/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { BlueskyCore } from "../core.js";
import { encodeFormQuery } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * View moderation statuses of subjects (record or repo).
 */
export async function toolsOzoneModerationToolsOzoneModerationQueryStatuses(
  client: BlueskyCore,
  request?: operations.ToolsOzoneModerationQueryStatusesRequest | undefined,
  options?: RequestOptions,
): Promise<
  Result<
    operations.ToolsOzoneModerationQueryStatusesResponseBody,
    | errors.ToolsOzoneModerationQueryStatusesResponseBody
    | errors.ToolsOzoneModerationQueryStatusesToolsOzoneModerationResponseBody
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.ToolsOzoneModerationQueryStatusesRequest$outboundSchema
        .optional().parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc("/xrpc/tools.ozone.moderation.queryStatuses")();

  const query = encodeFormQuery({
    "appealed": payload?.appealed,
    "collections": payload?.collections,
    "comment": payload?.comment,
    "cursor": payload?.cursor,
    "excludeTags": payload?.excludeTags,
    "hostingDeletedAfter": payload?.hostingDeletedAfter,
    "hostingDeletedBefore": payload?.hostingDeletedBefore,
    "hostingStatuses": payload?.hostingStatuses,
    "hostingUpdatedAfter": payload?.hostingUpdatedAfter,
    "hostingUpdatedBefore": payload?.hostingUpdatedBefore,
    "ignoreSubjects": payload?.ignoreSubjects,
    "includeAllUserRecords": payload?.includeAllUserRecords,
    "includeMuted": payload?.includeMuted,
    "lastReviewedBy": payload?.lastReviewedBy,
    "limit": payload?.limit,
    "onlyMuted": payload?.onlyMuted,
    "reportedAfter": payload?.reportedAfter,
    "reportedBefore": payload?.reportedBefore,
    "reviewedAfter": payload?.reviewedAfter,
    "reviewedBefore": payload?.reviewedBefore,
    "reviewState": payload?.reviewState,
    "sortDirection": payload?.sortDirection,
    "sortField": payload?.sortField,
    "subject": payload?.subject,
    "subjectType": payload?.subjectType,
    "tags": payload?.tags,
    "takendown": payload?.takendown,
  });

  const headers = new Headers({
    Accept: "application/json",
  });

  const secConfig = await extractSecurity(client._options.bearer);
  const securityInput = secConfig == null ? {} : { bearer: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    operationID: "tools.ozone.moderation.queryStatuses",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.bearer,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.ToolsOzoneModerationQueryStatusesResponseBody,
    | errors.ToolsOzoneModerationQueryStatusesResponseBody
    | errors.ToolsOzoneModerationQueryStatusesToolsOzoneModerationResponseBody
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(
      200,
      operations.ToolsOzoneModerationQueryStatusesResponseBody$inboundSchema,
    ),
    M.jsonErr(
      400,
      errors.ToolsOzoneModerationQueryStatusesResponseBody$inboundSchema,
    ),
    M.jsonErr(
      401,
      errors
        .ToolsOzoneModerationQueryStatusesToolsOzoneModerationResponseBody$inboundSchema,
    ),
    M.fail(["4XX", "5XX"]),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return result;
  }

  return result;
}
