/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoServerGetServiceAuth } from "../funcs/atprotoServerGetServiceAuth.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AtprotoServerGetServiceAuthQueryData =
  operations.ComAtprotoServerGetServiceAuthResponseBody;

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a signed token on behalf of the requesting DID for the requested service.
 */
export function useAtprotoServerGetServiceAuth(
  request: operations.ComAtprotoServerGetServiceAuthRequest,
  options?: QueryHookOptions<
    operations.ComAtprotoServerGetServiceAuthResponseBody
  >,
): UseQueryResult<
  operations.ComAtprotoServerGetServiceAuthResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildAtprotoServerGetServiceAuthQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a signed token on behalf of the requesting DID for the requested service.
 */
export function useAtprotoServerGetServiceAuthSuspense(
  request: operations.ComAtprotoServerGetServiceAuthRequest,
  options?: SuspenseQueryHookOptions<
    operations.ComAtprotoServerGetServiceAuthResponseBody
  >,
): UseSuspenseQueryResult<
  operations.ComAtprotoServerGetServiceAuthResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildAtprotoServerGetServiceAuthQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchAtprotoServerGetServiceAuth(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ComAtprotoServerGetServiceAuthRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAtprotoServerGetServiceAuthQuery(
      client$,
      request,
    ),
  });
}

export function setAtprotoServerGetServiceAuthData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      aud: string;
      exp?: number | undefined;
      lxm?: string | undefined;
    },
  ],
  data: operations.ComAtprotoServerGetServiceAuthResponseBody,
): operations.ComAtprotoServerGetServiceAuthResponseBody | undefined {
  const key = queryKeyAtprotoServerGetServiceAuth(...queryKeyBase);

  return client.setQueryData<
    operations.ComAtprotoServerGetServiceAuthResponseBody
  >(key, data);
}

export function invalidateAtprotoServerGetServiceAuth(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      aud: string;
      exp?: number | undefined;
      lxm?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "server", "getServiceAuth", ...queryKeyBase],
  });
}

export function invalidateAllAtprotoServerGetServiceAuth(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "server", "getServiceAuth"],
  });
}

export function buildAtprotoServerGetServiceAuthQuery(
  client$: BlueskyCore,
  request: operations.ComAtprotoServerGetServiceAuthRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ComAtprotoServerGetServiceAuthResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyAtprotoServerGetServiceAuth({
      aud: request.aud,
      exp: request.exp,
      lxm: request.lxm,
    }),
    queryFn: async function atprotoServerGetServiceAuthQuery(
      ctx,
    ): Promise<operations.ComAtprotoServerGetServiceAuthResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(atprotoServerGetServiceAuth(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAtprotoServerGetServiceAuth(
  parameters: {
    aud: string;
    exp?: number | undefined;
    lxm?: string | undefined;
  },
): QueryKey {
  return ["bluesky", "server", "getServiceAuth", parameters];
}
