/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatConvoGetConvoForMembers } from "../funcs/chatConvoGetConvoForMembers.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ChatConvoGetConvoForMembersQueryData =
  operations.ChatBskyConvoGetConvoForMembersResponseBody;

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetConvoForMembers(
  request: operations.ChatBskyConvoGetConvoForMembersRequest,
  options?: QueryHookOptions<
    operations.ChatBskyConvoGetConvoForMembersResponseBody
  >,
): UseQueryResult<
  operations.ChatBskyConvoGetConvoForMembersResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildChatConvoGetConvoForMembersQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetConvoForMembersSuspense(
  request: operations.ChatBskyConvoGetConvoForMembersRequest,
  options?: SuspenseQueryHookOptions<
    operations.ChatBskyConvoGetConvoForMembersResponseBody
  >,
): UseSuspenseQueryResult<
  operations.ChatBskyConvoGetConvoForMembersResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildChatConvoGetConvoForMembersQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchChatConvoGetConvoForMembers(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ChatBskyConvoGetConvoForMembersRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildChatConvoGetConvoForMembersQuery(
      client$,
      request,
    ),
  });
}

export function setChatConvoGetConvoForMembersData(
  client: QueryClient,
  queryKeyBase: [parameters: { members: Array<string> }],
  data: operations.ChatBskyConvoGetConvoForMembersResponseBody,
): operations.ChatBskyConvoGetConvoForMembersResponseBody | undefined {
  const key = queryKeyChatConvoGetConvoForMembers(...queryKeyBase);

  return client.setQueryData<
    operations.ChatBskyConvoGetConvoForMembersResponseBody
  >(key, data);
}

export function invalidateChatConvoGetConvoForMembers(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { members: Array<string> }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "convo", "getConvoForMembers", ...queryKeyBase],
  });
}

export function invalidateAllChatConvoGetConvoForMembers(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "convo", "getConvoForMembers"],
  });
}

export function buildChatConvoGetConvoForMembersQuery(
  client$: BlueskyCore,
  request: operations.ChatBskyConvoGetConvoForMembersRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ChatBskyConvoGetConvoForMembersResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyChatConvoGetConvoForMembers({ members: request.members }),
    queryFn: async function chatConvoGetConvoForMembersQuery(
      ctx,
    ): Promise<operations.ChatBskyConvoGetConvoForMembersResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(chatConvoGetConvoForMembers(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyChatConvoGetConvoForMembers(
  parameters: { members: Array<string> },
): QueryKey {
  return ["bluesky", "convo", "getConvoForMembers", parameters];
}
