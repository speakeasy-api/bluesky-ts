/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneSetGetValues } from "../funcs/ozoneSetGetValues.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneSetGetValuesQueryData = PageIterator<
  operations.ToolsOzoneSetGetValuesResponse,
  { cursor: string }
>;
export type OzoneSetGetValuesPageParams = PageIterator<
  operations.ToolsOzoneSetGetValuesResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a specific set and its values
 */
export function useOzoneSetGetValues(
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: QueryHookOptions<operations.ToolsOzoneSetGetValuesResponse>,
): UseQueryResult<operations.ToolsOzoneSetGetValuesResponse, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneSetGetValuesQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a specific set and its values
 */
export function useOzoneSetGetValuesSuspense(
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: SuspenseQueryHookOptions<operations.ToolsOzoneSetGetValuesResponse>,
): UseSuspenseQueryResult<operations.ToolsOzoneSetGetValuesResponse, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneSetGetValuesQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a specific set and its values
 */
export function useOzoneSetGetValuesInfinite(
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: InfiniteQueryHookOptions<
    PageIterator<operations.ToolsOzoneSetGetValuesResponse, { cursor: string }>
  >,
): UseInfiniteQueryResult<
  InfiniteData<OzoneSetGetValuesQueryData, OzoneSetGetValuesPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    OzoneSetGetValuesQueryData,
    Error,
    InfiniteData<OzoneSetGetValuesQueryData, OzoneSetGetValuesPageParams>,
    QueryKey,
    OzoneSetGetValuesPageParams
  >({
    ...buildOzoneSetGetValuesInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a specific set and its values
 */
export function useOzoneSetGetValuesInfiniteSuspense(
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: SuspenseInfiniteQueryHookOptions<
    PageIterator<operations.ToolsOzoneSetGetValuesResponse, { cursor: string }>
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<OzoneSetGetValuesQueryData, OzoneSetGetValuesPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    OzoneSetGetValuesQueryData,
    Error,
    InfiniteData<OzoneSetGetValuesQueryData, OzoneSetGetValuesPageParams>,
    QueryKey,
    OzoneSetGetValuesPageParams
  >({
    ...buildOzoneSetGetValuesInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchOzoneSetGetValues(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ToolsOzoneSetGetValuesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneSetGetValuesQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneSetGetValuesData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      name: string;
      limit?: number | undefined;
      cursor?: string | undefined;
    },
  ],
  data: operations.ToolsOzoneSetGetValuesResponse,
): operations.ToolsOzoneSetGetValuesResponse | undefined {
  const key = queryKeyOzoneSetGetValues(...queryKeyBase);

  return client.setQueryData<operations.ToolsOzoneSetGetValuesResponse>(
    key,
    data,
  );
}

export function invalidateOzoneSetGetValues(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      name: string;
      limit?: number | undefined;
      cursor?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "set", "getValues", ...queryKeyBase],
  });
}

export function invalidateAllOzoneSetGetValues(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "set", "getValues"],
  });
}

export function buildOzoneSetGetValuesQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ToolsOzoneSetGetValuesResponse>;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneSetGetValues({
      name: request.name,
      limit: request.limit,
      cursor: request.cursor,
    }),
    queryFn: async function ozoneSetGetValuesQuery(
      ctx,
    ): Promise<operations.ToolsOzoneSetGetValuesResponse> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneSetGetValues(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildOzoneSetGetValuesInfiniteQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, OzoneSetGetValuesPageParams>,
  ) => Promise<
    PageIterator<operations.ToolsOzoneSetGetValuesResponse, { cursor: string }>
  >;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneSetGetValues({
      name: request.name,
      limit: request.limit,
      cursor: request.cursor,
    }),
    queryFn: async function ozoneSetGetValuesQuery(
      ctx,
    ): Promise<
      PageIterator<
        operations.ToolsOzoneSetGetValuesResponse,
        { cursor: string }
      >
    > {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(ozoneSetGetValues(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(ozoneSetGetValues(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneSetGetValues(
  parameters: {
    name: string;
    limit?: number | undefined;
    cursor?: string | undefined;
  },
): QueryKey {
  return ["bluesky", "set", "getValues", parameters];
}
