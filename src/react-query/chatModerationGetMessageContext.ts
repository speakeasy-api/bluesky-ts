/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatModerationGetMessageContext } from "../funcs/chatModerationGetMessageContext.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ChatModerationGetMessageContextQueryData =
  operations.ChatBskyModerationGetMessageContextResponseBody;

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatModerationGetMessageContext(
  request: operations.ChatBskyModerationGetMessageContextRequest,
  options?: QueryHookOptions<
    operations.ChatBskyModerationGetMessageContextResponseBody
  >,
): UseQueryResult<
  operations.ChatBskyModerationGetMessageContextResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildChatModerationGetMessageContextQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatModerationGetMessageContextSuspense(
  request: operations.ChatBskyModerationGetMessageContextRequest,
  options?: SuspenseQueryHookOptions<
    operations.ChatBskyModerationGetMessageContextResponseBody
  >,
): UseSuspenseQueryResult<
  operations.ChatBskyModerationGetMessageContextResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildChatModerationGetMessageContextQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchChatModerationGetMessageContext(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ChatBskyModerationGetMessageContextRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildChatModerationGetMessageContextQuery(
      client$,
      request,
    ),
  });
}

export function setChatModerationGetMessageContextData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      convoId?: string | undefined;
      messageId: string;
      before?: number | undefined;
      after?: number | undefined;
    },
  ],
  data: operations.ChatBskyModerationGetMessageContextResponseBody,
): operations.ChatBskyModerationGetMessageContextResponseBody | undefined {
  const key = queryKeyChatModerationGetMessageContext(...queryKeyBase);

  return client.setQueryData<
    operations.ChatBskyModerationGetMessageContextResponseBody
  >(key, data);
}

export function invalidateChatModerationGetMessageContext(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      convoId?: string | undefined;
      messageId: string;
      before?: number | undefined;
      after?: number | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "getMessageContext", ...queryKeyBase],
  });
}

export function invalidateAllChatModerationGetMessageContext(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "getMessageContext"],
  });
}

export function buildChatModerationGetMessageContextQuery(
  client$: BlueskyCore,
  request: operations.ChatBskyModerationGetMessageContextRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ChatBskyModerationGetMessageContextResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyChatModerationGetMessageContext({
      convoId: request.convoId,
      messageId: request.messageId,
      before: request.before,
      after: request.after,
    }),
    queryFn: async function chatModerationGetMessageContextQuery(
      ctx,
    ): Promise<operations.ChatBskyModerationGetMessageContextResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(chatModerationGetMessageContext(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyChatModerationGetMessageContext(
  parameters: {
    convoId?: string | undefined;
    messageId: string;
    before?: number | undefined;
    after?: number | undefined;
  },
): QueryKey {
  return ["bluesky", "moderation", "getMessageContext", parameters];
}
