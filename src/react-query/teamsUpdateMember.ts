/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { teamsUpdateMember } from "../funcs/teamsUpdateMember.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TeamsUpdateMemberMutationVariables = {
  request: operations.ToolsOzoneTeamUpdateMemberRequestBody;
  options?: RequestOptions;
};

export type TeamsUpdateMemberMutationData = components.ToolsOzoneTeamDefsMember;

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Update a member in the ozone service. Requires admin role.
 */
export function useTeamsUpdateMemberMutation(
  options?: MutationHookOptions<
    TeamsUpdateMemberMutationData,
    Error,
    TeamsUpdateMemberMutationVariables
  >,
): UseMutationResult<
  TeamsUpdateMemberMutationData,
  Error,
  TeamsUpdateMemberMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildTeamsUpdateMemberMutation(client, options),
    ...options,
  });
}

export function mutationKeyTeamsUpdateMember(): MutationKey {
  return ["bluesky", "teams", "updateMember"];
}

export function buildTeamsUpdateMemberMutation(
  client$: BlueskyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TeamsUpdateMemberMutationVariables,
  ) => Promise<TeamsUpdateMemberMutationData>;
} {
  return {
    mutationKey: mutationKeyTeamsUpdateMember(),
    mutationFn: function teamsUpdateMemberMutationFn({
      request,
      options,
    }): Promise<TeamsUpdateMemberMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(teamsUpdateMember(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
