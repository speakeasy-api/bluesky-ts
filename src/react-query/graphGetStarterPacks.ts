/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { graphGetStarterPacks } from "../funcs/graphGetStarterPacks.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type GraphGetStarterPacksQueryData =
  operations.AppBskyGraphGetStarterPacksResponseBody;

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get views for a list of starter packs.
 */
export function useGraphGetStarterPacks(
  request: operations.AppBskyGraphGetStarterPacksRequest,
  options?: QueryHookOptions<
    operations.AppBskyGraphGetStarterPacksResponseBody
  >,
): UseQueryResult<operations.AppBskyGraphGetStarterPacksResponseBody, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildGraphGetStarterPacksQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get views for a list of starter packs.
 */
export function useGraphGetStarterPacksSuspense(
  request: operations.AppBskyGraphGetStarterPacksRequest,
  options?: SuspenseQueryHookOptions<
    operations.AppBskyGraphGetStarterPacksResponseBody
  >,
): UseSuspenseQueryResult<
  operations.AppBskyGraphGetStarterPacksResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildGraphGetStarterPacksQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchGraphGetStarterPacks(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.AppBskyGraphGetStarterPacksRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildGraphGetStarterPacksQuery(
      client$,
      request,
    ),
  });
}

export function setGraphGetStarterPacksData(
  client: QueryClient,
  queryKeyBase: [parameters: { uris: Array<string> }],
  data: operations.AppBskyGraphGetStarterPacksResponseBody,
): operations.AppBskyGraphGetStarterPacksResponseBody | undefined {
  const key = queryKeyGraphGetStarterPacks(...queryKeyBase);

  return client.setQueryData<
    operations.AppBskyGraphGetStarterPacksResponseBody
  >(key, data);
}

export function invalidateGraphGetStarterPacks(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { uris: Array<string> }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "graph", "getStarterPacks", ...queryKeyBase],
  });
}

export function invalidateAllGraphGetStarterPacks(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "graph", "getStarterPacks"],
  });
}

export function buildGraphGetStarterPacksQuery(
  client$: BlueskyCore,
  request: operations.AppBskyGraphGetStarterPacksRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.AppBskyGraphGetStarterPacksResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyGraphGetStarterPacks({ uris: request.uris }),
    queryFn: async function graphGetStarterPacksQuery(
      ctx,
    ): Promise<operations.AppBskyGraphGetStarterPacksResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(graphGetStarterPacks(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyGraphGetStarterPacks(
  parameters: { uris: Array<string> },
): QueryKey {
  return ["bluesky", "graph", "getStarterPacks", parameters];
}
