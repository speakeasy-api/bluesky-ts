/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatConvoListConvos } from "../funcs/chatConvoListConvos.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ChatConvoListConvosQueryData = PageIterator<
  operations.ChatBskyConvoListConvosResponse,
  { cursor: string }
>;
export type ChatConvoListConvosPageParams = PageIterator<
  operations.ChatBskyConvoListConvosResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoListConvos(
  request?: operations.ChatBskyConvoListConvosRequest | undefined,
  options?: QueryHookOptions<operations.ChatBskyConvoListConvosResponse>,
): UseQueryResult<operations.ChatBskyConvoListConvosResponse, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildChatConvoListConvosQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoListConvosSuspense(
  request?: operations.ChatBskyConvoListConvosRequest | undefined,
  options?: SuspenseQueryHookOptions<
    operations.ChatBskyConvoListConvosResponse
  >,
): UseSuspenseQueryResult<operations.ChatBskyConvoListConvosResponse, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildChatConvoListConvosQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoListConvosInfinite(
  request?: operations.ChatBskyConvoListConvosRequest | undefined,
  options?: InfiniteQueryHookOptions<
    PageIterator<operations.ChatBskyConvoListConvosResponse, { cursor: string }>
  >,
): UseInfiniteQueryResult<
  InfiniteData<ChatConvoListConvosQueryData, ChatConvoListConvosPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    ChatConvoListConvosQueryData,
    Error,
    InfiniteData<ChatConvoListConvosQueryData, ChatConvoListConvosPageParams>,
    QueryKey,
    ChatConvoListConvosPageParams
  >({
    ...buildChatConvoListConvosInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoListConvosInfiniteSuspense(
  request?: operations.ChatBskyConvoListConvosRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<
    PageIterator<operations.ChatBskyConvoListConvosResponse, { cursor: string }>
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<ChatConvoListConvosQueryData, ChatConvoListConvosPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    ChatConvoListConvosQueryData,
    Error,
    InfiniteData<ChatConvoListConvosQueryData, ChatConvoListConvosPageParams>,
    QueryKey,
    ChatConvoListConvosPageParams
  >({
    ...buildChatConvoListConvosInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchChatConvoListConvos(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.ChatBskyConvoListConvosRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildChatConvoListConvosQuery(
      client$,
      request,
    ),
  });
}

export function setChatConvoListConvosData(
  client: QueryClient,
  queryKeyBase: [
    parameters: { limit?: number | undefined; cursor?: string | undefined },
  ],
  data: operations.ChatBskyConvoListConvosResponse,
): operations.ChatBskyConvoListConvosResponse | undefined {
  const key = queryKeyChatConvoListConvos(...queryKeyBase);

  return client.setQueryData<operations.ChatBskyConvoListConvosResponse>(
    key,
    data,
  );
}

export function invalidateChatConvoListConvos(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { limit?: number | undefined; cursor?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "convo", "listConvos", ...queryKeyBase],
  });
}

export function invalidateAllChatConvoListConvos(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "convo", "listConvos"],
  });
}

export function buildChatConvoListConvosQuery(
  client$: BlueskyCore,
  request?: operations.ChatBskyConvoListConvosRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ChatBskyConvoListConvosResponse>;
} {
  return {
    retry: false,
    queryKey: queryKeyChatConvoListConvos({
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function chatConvoListConvosQuery(
      ctx,
    ): Promise<operations.ChatBskyConvoListConvosResponse> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(chatConvoListConvos(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildChatConvoListConvosInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.ChatBskyConvoListConvosRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, ChatConvoListConvosPageParams>,
  ) => Promise<
    PageIterator<operations.ChatBskyConvoListConvosResponse, { cursor: string }>
  >;
} {
  return {
    retry: false,
    queryKey: queryKeyChatConvoListConvos({
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function chatConvoListConvosQuery(
      ctx,
    ): Promise<
      PageIterator<
        operations.ChatBskyConvoListConvosResponse,
        { cursor: string }
      >
    > {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(chatConvoListConvos(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(chatConvoListConvos(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyChatConvoListConvos(
  parameters: { limit?: number | undefined; cursor?: string | undefined },
): QueryKey {
  return ["bluesky", "convo", "listConvos", parameters];
}
