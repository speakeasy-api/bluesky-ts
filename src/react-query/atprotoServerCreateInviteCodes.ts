/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoServerCreateInviteCodes } from "../funcs/atprotoServerCreateInviteCodes.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type AtprotoServerCreateInviteCodesMutationVariables = {
  request: operations.ComAtprotoServerCreateInviteCodesRequestBody;
  options?: RequestOptions;
};

export type AtprotoServerCreateInviteCodesMutationData =
  operations.ComAtprotoServerCreateInviteCodesResponseBody;

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Create invite codes.
 */
export function useAtprotoServerCreateInviteCodesMutation(
  options?: MutationHookOptions<
    AtprotoServerCreateInviteCodesMutationData,
    Error,
    AtprotoServerCreateInviteCodesMutationVariables
  >,
): UseMutationResult<
  AtprotoServerCreateInviteCodesMutationData,
  Error,
  AtprotoServerCreateInviteCodesMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildAtprotoServerCreateInviteCodesMutation(client, options),
    ...options,
  });
}

export function mutationKeyAtprotoServerCreateInviteCodes(): MutationKey {
  return ["bluesky", "atprotoServer", "createInviteCodes"];
}

export function buildAtprotoServerCreateInviteCodesMutation(
  client$: BlueskyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: AtprotoServerCreateInviteCodesMutationVariables,
  ) => Promise<AtprotoServerCreateInviteCodesMutationData>;
} {
  return {
    mutationKey: mutationKeyAtprotoServerCreateInviteCodes(),
    mutationFn: function atprotoServerCreateInviteCodesMutationFn({
      request,
      options,
    }): Promise<AtprotoServerCreateInviteCodesMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(atprotoServerCreateInviteCodes(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
