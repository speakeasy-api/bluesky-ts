/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatModerationGetActorMetadata } from "../funcs/chatModerationGetActorMetadata.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ChatModerationGetActorMetadataQueryData =
  operations.ChatBskyModerationGetActorMetadataResponseBody;

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatModerationGetActorMetadata(
  request: operations.ChatBskyModerationGetActorMetadataRequest,
  options?: QueryHookOptions<ChatModerationGetActorMetadataQueryData>,
): UseQueryResult<ChatModerationGetActorMetadataQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildChatModerationGetActorMetadataQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatModerationGetActorMetadataSuspense(
  request: operations.ChatBskyModerationGetActorMetadataRequest,
  options?: SuspenseQueryHookOptions<ChatModerationGetActorMetadataQueryData>,
): UseSuspenseQueryResult<ChatModerationGetActorMetadataQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildChatModerationGetActorMetadataQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchChatModerationGetActorMetadata(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ChatBskyModerationGetActorMetadataRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildChatModerationGetActorMetadataQuery(
      client$,
      request,
    ),
  });
}

export function setChatModerationGetActorMetadataData(
  client: QueryClient,
  queryKeyBase: [parameters: { actor: string }],
  data: ChatModerationGetActorMetadataQueryData,
): ChatModerationGetActorMetadataQueryData | undefined {
  const key = queryKeyChatModerationGetActorMetadata(...queryKeyBase);

  return client.setQueryData<ChatModerationGetActorMetadataQueryData>(
    key,
    data,
  );
}

export function invalidateChatModerationGetActorMetadata(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { actor: string }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-sdks/bluesky",
      "chatModeration",
      "getActorMetadata",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllChatModerationGetActorMetadata(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-sdks/bluesky", "chatModeration", "getActorMetadata"],
  });
}

export function buildChatModerationGetActorMetadataQuery(
  client$: BlueskyCore,
  request: operations.ChatBskyModerationGetActorMetadataRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ChatModerationGetActorMetadataQueryData>;
} {
  return {
    queryKey: queryKeyChatModerationGetActorMetadata({ actor: request.actor }),
    queryFn: async function chatModerationGetActorMetadataQueryFn(
      ctx,
    ): Promise<ChatModerationGetActorMetadataQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(chatModerationGetActorMetadata(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyChatModerationGetActorMetadata(
  parameters: { actor: string },
): QueryKey {
  return [
    "@speakeasy-sdks/bluesky",
    "chatModeration",
    "getActorMetadata",
    parameters,
  ];
}
