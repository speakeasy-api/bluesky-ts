/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { graphsGetBlocks } from "../funcs/graphsGetBlocks.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type GraphsGetBlocksQueryData = operations.AppBskyGraphGetBlocksResponse;

export type GraphsGetBlocksInfiniteQueryData = PageIterator<
  operations.AppBskyGraphGetBlocksResponse,
  { cursor: string }
>;

export type GraphsGetBlocksPageParams = PageIterator<
  operations.AppBskyGraphGetBlocksResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Enumerates which accounts the requesting account is currently blocking. Requires auth.
 */
export function useGraphsGetBlocks(
  request?: operations.AppBskyGraphGetBlocksRequest | undefined,
  options?: QueryHookOptions<GraphsGetBlocksQueryData>,
): UseQueryResult<GraphsGetBlocksQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildGraphsGetBlocksQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Enumerates which accounts the requesting account is currently blocking. Requires auth.
 */
export function useGraphsGetBlocksSuspense(
  request?: operations.AppBskyGraphGetBlocksRequest | undefined,
  options?: SuspenseQueryHookOptions<GraphsGetBlocksQueryData>,
): UseSuspenseQueryResult<GraphsGetBlocksQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildGraphsGetBlocksQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Enumerates which accounts the requesting account is currently blocking. Requires auth.
 */
export function useGraphsGetBlocksInfinite(
  request?: operations.AppBskyGraphGetBlocksRequest | undefined,
  options?: InfiniteQueryHookOptions<GraphsGetBlocksInfiniteQueryData>,
): UseInfiniteQueryResult<
  InfiniteData<GraphsGetBlocksInfiniteQueryData, GraphsGetBlocksPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    GraphsGetBlocksInfiniteQueryData,
    Error,
    InfiniteData<GraphsGetBlocksInfiniteQueryData, GraphsGetBlocksPageParams>,
    QueryKey,
    GraphsGetBlocksPageParams
  >({
    ...buildGraphsGetBlocksInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Enumerates which accounts the requesting account is currently blocking. Requires auth.
 */
export function useGraphsGetBlocksInfiniteSuspense(
  request?: operations.AppBskyGraphGetBlocksRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<GraphsGetBlocksInfiniteQueryData>,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<GraphsGetBlocksInfiniteQueryData, GraphsGetBlocksPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    GraphsGetBlocksInfiniteQueryData,
    Error,
    InfiniteData<GraphsGetBlocksInfiniteQueryData, GraphsGetBlocksPageParams>,
    QueryKey,
    GraphsGetBlocksPageParams
  >({
    ...buildGraphsGetBlocksInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchGraphsGetBlocks(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.AppBskyGraphGetBlocksRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildGraphsGetBlocksQuery(
      client$,
      request,
    ),
  });
}

export function setGraphsGetBlocksData(
  client: QueryClient,
  queryKeyBase: [
    parameters: { limit?: number | undefined; cursor?: string | undefined },
  ],
  data: GraphsGetBlocksQueryData,
): GraphsGetBlocksQueryData | undefined {
  const key = queryKeyGraphsGetBlocks(...queryKeyBase);

  return client.setQueryData<GraphsGetBlocksQueryData>(key, data);
}

export function invalidateGraphsGetBlocks(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { limit?: number | undefined; cursor?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/bluesky",
      "graphs",
      "getBlocks",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllGraphsGetBlocks(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "graphs", "getBlocks"],
  });
}

export function buildGraphsGetBlocksQuery(
  client$: BlueskyCore,
  request?: operations.AppBskyGraphGetBlocksRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<GraphsGetBlocksQueryData>;
} {
  return {
    queryKey: queryKeyGraphsGetBlocks({
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function graphsGetBlocksQueryFn(
      ctx,
    ): Promise<GraphsGetBlocksQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(graphsGetBlocks(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildGraphsGetBlocksInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.AppBskyGraphGetBlocksRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, GraphsGetBlocksPageParams>,
  ) => Promise<GraphsGetBlocksInfiniteQueryData>;
} {
  return {
    queryKey: queryKeyGraphsGetBlocks({
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function graphsGetBlocksQuery(
      ctx,
    ): Promise<GraphsGetBlocksInfiniteQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(graphsGetBlocks(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(graphsGetBlocks(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyGraphsGetBlocks(
  parameters: { limit?: number | undefined; cursor?: string | undefined },
): QueryKey {
  return ["@speakeasy-api/bluesky", "graphs", "getBlocks", parameters];
}
