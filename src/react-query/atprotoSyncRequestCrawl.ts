/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoSyncRequestCrawl } from "../funcs/atprotoSyncRequestCrawl.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";

export type AtprotoSyncRequestCrawlMutationVariables = {
  request: operations.ComAtprotoSyncRequestCrawlRequestBody;
  options?: RequestOptions;
};

/**
 * This endpoint is part of the atproto repository synchronization APIs. Requests usually do not require authentication, and can be made to PDS intances or Relay instances.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.
 */
export function useAtprotoSyncRequestCrawlMutation(
  options?: UseMutationOptions<
    void,
    Error,
    AtprotoSyncRequestCrawlMutationVariables
  >,
): UseMutationResult<void, Error, AtprotoSyncRequestCrawlMutationVariables> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildAtprotoSyncRequestCrawlMutation(client),
    ...options,
  });
}

export function mutationKeyAtprotoSyncRequestCrawl(): MutationKey {
  return ["bluesky", "sync", "requestCrawl"];
}

export function buildAtprotoSyncRequestCrawlMutation(
  client$: BlueskyCore,
): {
  retry: boolean;
  mutationKey: MutationKey;
  mutationFn: (
    variables: AtprotoSyncRequestCrawlMutationVariables,
  ) => Promise<void>;
} {
  return {
    retry: false,
    mutationKey: mutationKeyAtprotoSyncRequestCrawl(),
    mutationFn: function atprotoSyncRequestCrawlQuery({
      request,
      options,
    }): Promise<void> {
      return unwrapAsync(atprotoSyncRequestCrawl(
        client$,
        request,
        options,
      ));
    },
  };
}
