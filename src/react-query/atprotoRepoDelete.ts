/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoRepoDelete } from "../funcs/atprotoRepoDelete.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type AtprotoRepoDeleteMutationVariables = {
  request: operations.ComAtprotoRepoDeleteRecordRequestBody;
  options?: RequestOptions;
};

export type AtprotoRepoDeleteMutationData =
  operations.ComAtprotoRepoDeleteRecordResponseBody;

/**
 * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.
 */
export function useAtprotoRepoDeleteMutation(
  options?: MutationHookOptions<
    AtprotoRepoDeleteMutationData,
    Error,
    AtprotoRepoDeleteMutationVariables
  >,
): UseMutationResult<
  AtprotoRepoDeleteMutationData,
  Error,
  AtprotoRepoDeleteMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildAtprotoRepoDeleteMutation(client, options),
    ...options,
  });
}

export function mutationKeyAtprotoRepoDelete(): MutationKey {
  return ["bluesky", "atprotoRepo", "delete"];
}

export function buildAtprotoRepoDeleteMutation(
  client$: BlueskyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: AtprotoRepoDeleteMutationVariables,
  ) => Promise<AtprotoRepoDeleteMutationData>;
} {
  return {
    mutationKey: mutationKeyAtprotoRepoDelete(),
    mutationFn: function atprotoRepoDeleteMutationFn({
      request,
      options,
    }): Promise<AtprotoRepoDeleteMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(atprotoRepoDelete(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
