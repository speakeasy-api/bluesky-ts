/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { moderationsGetRepos } from "../funcs/moderationsGetRepos.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ModerationsGetReposQueryData =
  operations.ToolsOzoneModerationGetReposResponseBody;

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about some repositories.
 */
export function useModerationsGetRepos(
  request: operations.ToolsOzoneModerationGetReposRequest,
  options?: QueryHookOptions<ModerationsGetReposQueryData>,
): UseQueryResult<ModerationsGetReposQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildModerationsGetReposQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about some repositories.
 */
export function useModerationsGetReposSuspense(
  request: operations.ToolsOzoneModerationGetReposRequest,
  options?: SuspenseQueryHookOptions<ModerationsGetReposQueryData>,
): UseSuspenseQueryResult<ModerationsGetReposQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildModerationsGetReposQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchModerationsGetRepos(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetReposRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildModerationsGetReposQuery(
      client$,
      request,
    ),
  });
}

export function setModerationsGetReposData(
  client: QueryClient,
  queryKeyBase: [parameters: { dids: Array<string> }],
  data: ModerationsGetReposQueryData,
): ModerationsGetReposQueryData | undefined {
  const key = queryKeyModerationsGetRepos(...queryKeyBase);

  return client.setQueryData<ModerationsGetReposQueryData>(key, data);
}

export function invalidateModerationsGetRepos(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { dids: Array<string> }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/bluesky",
      "moderations",
      "getRepos",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllModerationsGetRepos(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "moderations", "getRepos"],
  });
}

export function buildModerationsGetReposQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetReposRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ModerationsGetReposQueryData>;
} {
  return {
    queryKey: queryKeyModerationsGetRepos({ dids: request.dids }),
    queryFn: async function moderationsGetReposQueryFn(
      ctx,
    ): Promise<ModerationsGetReposQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(moderationsGetRepos(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyModerationsGetRepos(
  parameters: { dids: Array<string> },
): QueryKey {
  return ["@speakeasy-api/bluesky", "moderations", "getRepos", parameters];
}
