/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoRepoGetRecord } from "../funcs/atprotoRepoGetRecord.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AtprotoRepoGetRecordQueryData =
  operations.ComAtprotoRepoGetRecordResponseBody;

/**
 * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a single record from a repository. Does not require auth.
 */
export function useAtprotoRepoGetRecord(
  request: operations.ComAtprotoRepoGetRecordRequest,
  options?: QueryHookOptions<operations.ComAtprotoRepoGetRecordResponseBody>,
): UseQueryResult<operations.ComAtprotoRepoGetRecordResponseBody, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildAtprotoRepoGetRecordQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a single record from a repository. Does not require auth.
 */
export function useAtprotoRepoGetRecordSuspense(
  request: operations.ComAtprotoRepoGetRecordRequest,
  options?: SuspenseQueryHookOptions<
    operations.ComAtprotoRepoGetRecordResponseBody
  >,
): UseSuspenseQueryResult<
  operations.ComAtprotoRepoGetRecordResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildAtprotoRepoGetRecordQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchAtprotoRepoGetRecord(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ComAtprotoRepoGetRecordRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAtprotoRepoGetRecordQuery(
      client$,
      request,
    ),
  });
}

export function setAtprotoRepoGetRecordData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      repo: string;
      collection: string;
      rkey: string;
      cid?: string | undefined;
    },
  ],
  data: operations.ComAtprotoRepoGetRecordResponseBody,
): operations.ComAtprotoRepoGetRecordResponseBody | undefined {
  const key = queryKeyAtprotoRepoGetRecord(...queryKeyBase);

  return client.setQueryData<operations.ComAtprotoRepoGetRecordResponseBody>(
    key,
    data,
  );
}

export function invalidateAtprotoRepoGetRecord(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      repo: string;
      collection: string;
      rkey: string;
      cid?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "repo", "getRecord", ...queryKeyBase],
  });
}

export function invalidateAllAtprotoRepoGetRecord(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "repo", "getRecord"],
  });
}

export function buildAtprotoRepoGetRecordQuery(
  client$: BlueskyCore,
  request: operations.ComAtprotoRepoGetRecordRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ComAtprotoRepoGetRecordResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyAtprotoRepoGetRecord({
      repo: request.repo,
      collection: request.collection,
      rkey: request.rkey,
      cid: request.cid,
    }),
    queryFn: async function atprotoRepoGetRecordQuery(
      ctx,
    ): Promise<operations.ComAtprotoRepoGetRecordResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(atprotoRepoGetRecord(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAtprotoRepoGetRecord(
  parameters: {
    repo: string;
    collection: string;
    rkey: string;
    cid?: string | undefined;
  },
): QueryKey {
  return ["bluesky", "repo", "getRecord", parameters];
}
