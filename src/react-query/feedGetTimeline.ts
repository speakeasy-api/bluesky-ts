/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { feedGetTimeline } from "../funcs/feedGetTimeline.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type FeedGetTimelineQueryData = PageIterator<
  operations.AppBskyFeedGetTimelineResponse,
  { cursor: string }
>;
export type FeedGetTimelinePageParams = PageIterator<
  operations.AppBskyFeedGetTimelineResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.
 */
export function useFeedGetTimeline(
  request?: operations.AppBskyFeedGetTimelineRequest | undefined,
  options?: QueryHookOptions<operations.AppBskyFeedGetTimelineResponse>,
): UseQueryResult<operations.AppBskyFeedGetTimelineResponse, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildFeedGetTimelineQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.
 */
export function useFeedGetTimelineSuspense(
  request?: operations.AppBskyFeedGetTimelineRequest | undefined,
  options?: SuspenseQueryHookOptions<operations.AppBskyFeedGetTimelineResponse>,
): UseSuspenseQueryResult<operations.AppBskyFeedGetTimelineResponse, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildFeedGetTimelineQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.
 */
export function useFeedGetTimelineInfinite(
  request?: operations.AppBskyFeedGetTimelineRequest | undefined,
  options?: InfiniteQueryHookOptions<
    PageIterator<operations.AppBskyFeedGetTimelineResponse, { cursor: string }>
  >,
): UseInfiniteQueryResult<
  InfiniteData<FeedGetTimelineQueryData, FeedGetTimelinePageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    FeedGetTimelineQueryData,
    Error,
    InfiniteData<FeedGetTimelineQueryData, FeedGetTimelinePageParams>,
    QueryKey,
    FeedGetTimelinePageParams
  >({
    ...buildFeedGetTimelineInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.
 */
export function useFeedGetTimelineInfiniteSuspense(
  request?: operations.AppBskyFeedGetTimelineRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<
    PageIterator<operations.AppBskyFeedGetTimelineResponse, { cursor: string }>
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<FeedGetTimelineQueryData, FeedGetTimelinePageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    FeedGetTimelineQueryData,
    Error,
    InfiniteData<FeedGetTimelineQueryData, FeedGetTimelinePageParams>,
    QueryKey,
    FeedGetTimelinePageParams
  >({
    ...buildFeedGetTimelineInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchFeedGetTimeline(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.AppBskyFeedGetTimelineRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildFeedGetTimelineQuery(
      client$,
      request,
    ),
  });
}

export function setFeedGetTimelineData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      algorithm?: string | undefined;
      limit?: number | undefined;
      cursor?: string | undefined;
    },
  ],
  data: operations.AppBskyFeedGetTimelineResponse,
): operations.AppBskyFeedGetTimelineResponse | undefined {
  const key = queryKeyFeedGetTimeline(...queryKeyBase);

  return client.setQueryData<operations.AppBskyFeedGetTimelineResponse>(
    key,
    data,
  );
}

export function invalidateFeedGetTimeline(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      algorithm?: string | undefined;
      limit?: number | undefined;
      cursor?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "feed", "getTimeline", ...queryKeyBase],
  });
}

export function invalidateAllFeedGetTimeline(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "feed", "getTimeline"],
  });
}

export function buildFeedGetTimelineQuery(
  client$: BlueskyCore,
  request?: operations.AppBskyFeedGetTimelineRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.AppBskyFeedGetTimelineResponse>;
} {
  return {
    retry: false,
    queryKey: queryKeyFeedGetTimeline({
      algorithm: request?.algorithm,
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function feedGetTimelineQuery(
      ctx,
    ): Promise<operations.AppBskyFeedGetTimelineResponse> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(feedGetTimeline(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildFeedGetTimelineInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.AppBskyFeedGetTimelineRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, FeedGetTimelinePageParams>,
  ) => Promise<
    PageIterator<operations.AppBskyFeedGetTimelineResponse, { cursor: string }>
  >;
} {
  return {
    retry: false,
    queryKey: queryKeyFeedGetTimeline({
      algorithm: request?.algorithm,
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function feedGetTimelineQuery(
      ctx,
    ): Promise<
      PageIterator<
        operations.AppBskyFeedGetTimelineResponse,
        { cursor: string }
      >
    > {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(feedGetTimeline(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(feedGetTimeline(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyFeedGetTimeline(
  parameters: {
    algorithm?: string | undefined;
    limit?: number | undefined;
    cursor?: string | undefined;
  },
): QueryKey {
  return ["bluesky", "feed", "getTimeline", parameters];
}
