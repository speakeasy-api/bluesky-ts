/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { videosUpload } from "../funcs/videosUpload.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type VideosUploadMutationVariables = {
  request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
  options?: RequestOptions;
};

export type VideosUploadMutationData =
  operations.AppBskyVideoUploadVideoResponseBody;

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Upload a video to be processed then stored on the PDS.
 */
export function useVideosUploadMutation(
  options?: MutationHookOptions<
    VideosUploadMutationData,
    Error,
    VideosUploadMutationVariables
  >,
): UseMutationResult<
  VideosUploadMutationData,
  Error,
  VideosUploadMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildVideosUploadMutation(client, options),
    ...options,
  });
}

export function mutationKeyVideosUpload(): MutationKey {
  return ["bluesky", "videos", "upload"];
}

export function buildVideosUploadMutation(
  client$: BlueskyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: VideosUploadMutationVariables,
  ) => Promise<VideosUploadMutationData>;
} {
  return {
    mutationKey: mutationKeyVideosUpload(),
    mutationFn: function videosUploadMutationFn({
      request,
      options,
    }): Promise<VideosUploadMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(videosUpload(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
