/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { conversationsGetLog } from "../funcs/conversationsGetLog.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ConversationsGetLogQueryData =
  operations.ChatBskyConvoGetLogResponse;

export type ConversationsGetLogInfiniteQueryData = PageIterator<
  operations.ChatBskyConvoGetLogResponse,
  { cursor: string }
>;

export type ConversationsGetLogPageParams = PageIterator<
  operations.ChatBskyConvoGetLogResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useConversationsGetLog(
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: QueryHookOptions<ConversationsGetLogQueryData>,
): UseQueryResult<ConversationsGetLogQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildConversationsGetLogQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useConversationsGetLogSuspense(
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: SuspenseQueryHookOptions<ConversationsGetLogQueryData>,
): UseSuspenseQueryResult<ConversationsGetLogQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildConversationsGetLogQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useConversationsGetLogInfinite(
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: InfiniteQueryHookOptions<ConversationsGetLogInfiniteQueryData>,
): UseInfiniteQueryResult<
  InfiniteData<
    ConversationsGetLogInfiniteQueryData,
    ConversationsGetLogPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    ConversationsGetLogInfiniteQueryData,
    Error,
    InfiniteData<
      ConversationsGetLogInfiniteQueryData,
      ConversationsGetLogPageParams
    >,
    QueryKey,
    ConversationsGetLogPageParams
  >({
    ...buildConversationsGetLogInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useConversationsGetLogInfiniteSuspense(
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<
    ConversationsGetLogInfiniteQueryData
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<
    ConversationsGetLogInfiniteQueryData,
    ConversationsGetLogPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    ConversationsGetLogInfiniteQueryData,
    Error,
    InfiniteData<
      ConversationsGetLogInfiniteQueryData,
      ConversationsGetLogPageParams
    >,
    QueryKey,
    ConversationsGetLogPageParams
  >({
    ...buildConversationsGetLogInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchConversationsGetLog(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildConversationsGetLogQuery(
      client$,
      request,
    ),
  });
}

export function setConversationsGetLogData(
  client: QueryClient,
  queryKeyBase: [parameters: { cursor?: string | undefined }],
  data: ConversationsGetLogQueryData,
): ConversationsGetLogQueryData | undefined {
  const key = queryKeyConversationsGetLog(...queryKeyBase);

  return client.setQueryData<ConversationsGetLogQueryData>(key, data);
}

export function invalidateConversationsGetLog(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { cursor?: string | undefined }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/bluesky",
      "conversations",
      "getLog",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllConversationsGetLog(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "conversations", "getLog"],
  });
}

export function buildConversationsGetLogQuery(
  client$: BlueskyCore,
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ConversationsGetLogQueryData>;
} {
  return {
    queryKey: queryKeyConversationsGetLog({ cursor: request?.cursor }),
    queryFn: async function conversationsGetLogQueryFn(
      ctx,
    ): Promise<ConversationsGetLogQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(conversationsGetLog(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildConversationsGetLogInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, ConversationsGetLogPageParams>,
  ) => Promise<ConversationsGetLogInfiniteQueryData>;
} {
  return {
    queryKey: queryKeyConversationsGetLog({ cursor: request?.cursor }),
    queryFn: async function conversationsGetLogQuery(
      ctx,
    ): Promise<ConversationsGetLogInfiniteQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(conversationsGetLog(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(conversationsGetLog(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyConversationsGetLog(
  parameters: { cursor?: string | undefined },
): QueryKey {
  return ["@speakeasy-api/bluesky", "conversations", "getLog", parameters];
}
