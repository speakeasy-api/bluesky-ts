/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { setsGetValues } from "../funcs/setsGetValues.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SetsGetValuesQueryData = operations.ToolsOzoneSetGetValuesResponse;

export type SetsGetValuesInfiniteQueryData = PageIterator<
  operations.ToolsOzoneSetGetValuesResponse,
  { cursor: string }
>;

export type SetsGetValuesPageParams = PageIterator<
  operations.ToolsOzoneSetGetValuesResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a specific set and its values
 */
export function useSetsGetValues(
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: QueryHookOptions<SetsGetValuesQueryData>,
): UseQueryResult<SetsGetValuesQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildSetsGetValuesQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a specific set and its values
 */
export function useSetsGetValuesSuspense(
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: SuspenseQueryHookOptions<SetsGetValuesQueryData>,
): UseSuspenseQueryResult<SetsGetValuesQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildSetsGetValuesQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a specific set and its values
 */
export function useSetsGetValuesInfinite(
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: InfiniteQueryHookOptions<SetsGetValuesInfiniteQueryData>,
): UseInfiniteQueryResult<
  InfiniteData<SetsGetValuesInfiniteQueryData, SetsGetValuesPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    SetsGetValuesInfiniteQueryData,
    Error,
    InfiniteData<SetsGetValuesInfiniteQueryData, SetsGetValuesPageParams>,
    QueryKey,
    SetsGetValuesPageParams
  >({
    ...buildSetsGetValuesInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a specific set and its values
 */
export function useSetsGetValuesInfiniteSuspense(
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: SuspenseInfiniteQueryHookOptions<SetsGetValuesInfiniteQueryData>,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<SetsGetValuesInfiniteQueryData, SetsGetValuesPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    SetsGetValuesInfiniteQueryData,
    Error,
    InfiniteData<SetsGetValuesInfiniteQueryData, SetsGetValuesPageParams>,
    QueryKey,
    SetsGetValuesPageParams
  >({
    ...buildSetsGetValuesInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchSetsGetValues(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ToolsOzoneSetGetValuesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSetsGetValuesQuery(
      client$,
      request,
    ),
  });
}

export function setSetsGetValuesData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      name: string;
      limit?: number | undefined;
      cursor?: string | undefined;
    },
  ],
  data: SetsGetValuesQueryData,
): SetsGetValuesQueryData | undefined {
  const key = queryKeySetsGetValues(...queryKeyBase);

  return client.setQueryData<SetsGetValuesQueryData>(key, data);
}

export function invalidateSetsGetValues(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      name: string;
      limit?: number | undefined;
      cursor?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "sets", "getValues", ...queryKeyBase],
  });
}

export function invalidateAllSetsGetValues(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "sets", "getValues"],
  });
}

export function buildSetsGetValuesQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<SetsGetValuesQueryData>;
} {
  return {
    queryKey: queryKeySetsGetValues({
      name: request.name,
      limit: request.limit,
      cursor: request.cursor,
    }),
    queryFn: async function setsGetValuesQueryFn(
      ctx,
    ): Promise<SetsGetValuesQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(setsGetValues(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildSetsGetValuesInfiniteQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneSetGetValuesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, SetsGetValuesPageParams>,
  ) => Promise<SetsGetValuesInfiniteQueryData>;
} {
  return {
    queryKey: queryKeySetsGetValues({
      name: request.name,
      limit: request.limit,
      cursor: request.cursor,
    }),
    queryFn: async function setsGetValuesQuery(
      ctx,
    ): Promise<SetsGetValuesInfiniteQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(setsGetValues(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(setsGetValues(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeySetsGetValues(
  parameters: {
    name: string;
    limit?: number | undefined;
    cursor?: string | undefined;
  },
): QueryKey {
  return ["@speakeasy-api/bluesky", "sets", "getValues", parameters];
}
