/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoServerCheckAccountStatus } from "../funcs/atprotoServerCheckAccountStatus.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type AtprotoServerCheckAccountStatusQueryData =
  operations.ComAtprotoServerCheckAccountStatusResponseBody;

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
 */
export function useAtprotoServerCheckAccountStatus(
  options?: QueryHookOptions<
    operations.ComAtprotoServerCheckAccountStatusResponseBody
  >,
): UseQueryResult<
  operations.ComAtprotoServerCheckAccountStatusResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildAtprotoServerCheckAccountStatusQuery(
      client,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
 */
export function useAtprotoServerCheckAccountStatusSuspense(
  options?: SuspenseQueryHookOptions<
    operations.ComAtprotoServerCheckAccountStatusResponseBody
  >,
): UseSuspenseQueryResult<
  operations.ComAtprotoServerCheckAccountStatusResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildAtprotoServerCheckAccountStatusQuery(
      client,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchAtprotoServerCheckAccountStatus(
  queryClient: QueryClient,
  client$: BlueskyCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAtprotoServerCheckAccountStatusQuery(
      client$,
    ),
  });
}

export function setAtprotoServerCheckAccountStatusData(
  client: QueryClient,
  data: operations.ComAtprotoServerCheckAccountStatusResponseBody,
): operations.ComAtprotoServerCheckAccountStatusResponseBody | undefined {
  const key = queryKeyAtprotoServerCheckAccountStatus();

  return client.setQueryData<
    operations.ComAtprotoServerCheckAccountStatusResponseBody
  >(key, data);
}

export function invalidateAllAtprotoServerCheckAccountStatus(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "server", "checkAccountStatus"],
  });
}

export function buildAtprotoServerCheckAccountStatusQuery(
  client$: BlueskyCore,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ComAtprotoServerCheckAccountStatusResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyAtprotoServerCheckAccountStatus(),
    queryFn: async function atprotoServerCheckAccountStatusQuery(
      ctx,
    ): Promise<operations.ComAtprotoServerCheckAccountStatusResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(atprotoServerCheckAccountStatus(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAtprotoServerCheckAccountStatus(): QueryKey {
  return ["bluesky", "server", "checkAccountStatus"];
}
