/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneModerationGetRecord } from "../funcs/ozoneModerationGetRecord.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneModerationGetRecordQueryData =
  components.ToolsOzoneModerationDefsRecordViewDetail;

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about a record.
 */
export function useOzoneModerationGetRecord(
  request: operations.ToolsOzoneModerationGetRecordRequest,
  options?: QueryHookOptions<OzoneModerationGetRecordQueryData>,
): UseQueryResult<OzoneModerationGetRecordQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneModerationGetRecordQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about a record.
 */
export function useOzoneModerationGetRecordSuspense(
  request: operations.ToolsOzoneModerationGetRecordRequest,
  options?: SuspenseQueryHookOptions<OzoneModerationGetRecordQueryData>,
): UseSuspenseQueryResult<OzoneModerationGetRecordQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneModerationGetRecordQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchOzoneModerationGetRecord(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetRecordRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneModerationGetRecordQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneModerationGetRecordData(
  client: QueryClient,
  queryKeyBase: [parameters: { uri: string; cid?: string | undefined }],
  data: OzoneModerationGetRecordQueryData,
): OzoneModerationGetRecordQueryData | undefined {
  const key = queryKeyOzoneModerationGetRecord(...queryKeyBase);

  return client.setQueryData<OzoneModerationGetRecordQueryData>(key, data);
}

export function invalidateOzoneModerationGetRecord(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { uri: string; cid?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-sdks/bluesky",
      "ozoneModeration",
      "getRecord",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllOzoneModerationGetRecord(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-sdks/bluesky", "ozoneModeration", "getRecord"],
  });
}

export function buildOzoneModerationGetRecordQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetRecordRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<OzoneModerationGetRecordQueryData>;
} {
  return {
    queryKey: queryKeyOzoneModerationGetRecord({
      uri: request.uri,
      cid: request.cid,
    }),
    queryFn: async function ozoneModerationGetRecordQueryFn(
      ctx,
    ): Promise<OzoneModerationGetRecordQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneModerationGetRecord(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneModerationGetRecord(
  parameters: { uri: string; cid?: string | undefined },
): QueryKey {
  return [
    "@speakeasy-sdks/bluesky",
    "ozoneModeration",
    "getRecord",
    parameters,
  ];
}
