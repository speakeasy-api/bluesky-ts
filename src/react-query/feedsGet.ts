/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { feedsGet } from "../funcs/feedsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type FeedsGetQueryData = operations.AppBskyFeedGetPostsResponseBody;

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.
 */
export function useFeedsGet(
  request: operations.AppBskyFeedGetPostsRequest,
  options?: QueryHookOptions<FeedsGetQueryData>,
): UseQueryResult<FeedsGetQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildFeedsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.
 */
export function useFeedsGetSuspense(
  request: operations.AppBskyFeedGetPostsRequest,
  options?: SuspenseQueryHookOptions<FeedsGetQueryData>,
): UseSuspenseQueryResult<FeedsGetQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildFeedsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchFeedsGet(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.AppBskyFeedGetPostsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildFeedsGetQuery(
      client$,
      request,
    ),
  });
}

export function setFeedsGetData(
  client: QueryClient,
  queryKeyBase: [parameters: { uris: Array<string> }],
  data: FeedsGetQueryData,
): FeedsGetQueryData | undefined {
  const key = queryKeyFeedsGet(...queryKeyBase);

  return client.setQueryData<FeedsGetQueryData>(key, data);
}

export function invalidateFeedsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { uris: Array<string> }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-sdks/bluesky", "feeds", "get", ...queryKeyBase],
  });
}

export function invalidateAllFeedsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-sdks/bluesky", "feeds", "get"],
  });
}

export function buildFeedsGetQuery(
  client$: BlueskyCore,
  request: operations.AppBskyFeedGetPostsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<FeedsGetQueryData>;
} {
  return {
    queryKey: queryKeyFeedsGet({ uris: request.uris }),
    queryFn: async function feedsGetQueryFn(ctx): Promise<FeedsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(feedsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyFeedsGet(
  parameters: { uris: Array<string> },
): QueryKey {
  return ["@speakeasy-sdks/bluesky", "feeds", "get", parameters];
}
