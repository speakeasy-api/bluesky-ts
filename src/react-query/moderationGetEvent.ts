/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { moderationGetEvent } from "../funcs/moderationGetEvent.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ModerationGetEventQueryData =
  components.ToolsOzoneModerationDefsModEventViewDetail;

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about a moderation event.
 */
export function useModerationGetEvent(
  request: operations.ToolsOzoneModerationGetEventRequest,
  options?: QueryHookOptions<ModerationGetEventQueryData>,
): UseQueryResult<ModerationGetEventQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildModerationGetEventQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about a moderation event.
 */
export function useModerationGetEventSuspense(
  request: operations.ToolsOzoneModerationGetEventRequest,
  options?: SuspenseQueryHookOptions<ModerationGetEventQueryData>,
): UseSuspenseQueryResult<ModerationGetEventQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildModerationGetEventQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchModerationGetEvent(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetEventRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildModerationGetEventQuery(
      client$,
      request,
    ),
  });
}

export function setModerationGetEventData(
  client: QueryClient,
  queryKeyBase: [parameters: { id: number }],
  data: ModerationGetEventQueryData,
): ModerationGetEventQueryData | undefined {
  const key = queryKeyModerationGetEvent(...queryKeyBase);

  return client.setQueryData<ModerationGetEventQueryData>(key, data);
}

export function invalidateModerationGetEvent(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { id: number }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-sdks/bluesky",
      "moderation",
      "getEvent",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllModerationGetEvent(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-sdks/bluesky", "moderation", "getEvent"],
  });
}

export function buildModerationGetEventQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetEventRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ModerationGetEventQueryData>;
} {
  return {
    queryKey: queryKeyModerationGetEvent({ id: request.id }),
    queryFn: async function moderationGetEventQueryFn(
      ctx,
    ): Promise<ModerationGetEventQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(moderationGetEvent(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyModerationGetEvent(
  parameters: { id: number },
): QueryKey {
  return ["@speakeasy-sdks/bluesky", "moderation", "getEvent", parameters];
}
