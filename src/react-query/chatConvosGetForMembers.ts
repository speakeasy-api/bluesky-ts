/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatConvosGetForMembers } from "../funcs/chatConvosGetForMembers.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ChatConvosGetForMembersQueryData =
  operations.ChatBskyConvoGetConvoForMembersResponseBody;

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvosGetForMembers(
  request: operations.ChatBskyConvoGetConvoForMembersRequest,
  options?: QueryHookOptions<ChatConvosGetForMembersQueryData>,
): UseQueryResult<ChatConvosGetForMembersQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildChatConvosGetForMembersQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvosGetForMembersSuspense(
  request: operations.ChatBskyConvoGetConvoForMembersRequest,
  options?: SuspenseQueryHookOptions<ChatConvosGetForMembersQueryData>,
): UseSuspenseQueryResult<ChatConvosGetForMembersQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildChatConvosGetForMembersQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchChatConvosGetForMembers(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ChatBskyConvoGetConvoForMembersRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildChatConvosGetForMembersQuery(
      client$,
      request,
    ),
  });
}

export function setChatConvosGetForMembersData(
  client: QueryClient,
  queryKeyBase: [parameters: { members: Array<string> }],
  data: ChatConvosGetForMembersQueryData,
): ChatConvosGetForMembersQueryData | undefined {
  const key = queryKeyChatConvosGetForMembers(...queryKeyBase);

  return client.setQueryData<ChatConvosGetForMembersQueryData>(key, data);
}

export function invalidateChatConvosGetForMembers(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { members: Array<string> }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "chatConvos", "getForMembers", ...queryKeyBase],
  });
}

export function invalidateAllChatConvosGetForMembers(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "chatConvos", "getForMembers"],
  });
}

export function buildChatConvosGetForMembersQuery(
  client$: BlueskyCore,
  request: operations.ChatBskyConvoGetConvoForMembersRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ChatConvosGetForMembersQueryData>;
} {
  return {
    queryKey: queryKeyChatConvosGetForMembers({ members: request.members }),
    queryFn: async function chatConvosGetForMembersQueryFn(
      ctx,
    ): Promise<ChatConvosGetForMembersQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(chatConvosGetForMembers(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyChatConvosGetForMembers(
  parameters: { members: Array<string> },
): QueryKey {
  return ["bluesky", "chatConvos", "getForMembers", parameters];
}
