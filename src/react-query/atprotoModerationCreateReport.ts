/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoModerationCreateReport } from "../funcs/atprotoModerationCreateReport.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type AtprotoModerationCreateReportMutationVariables = {
  request: operations.ComAtprotoModerationCreateReportRequestBody;
  options?: RequestOptions;
};

export type AtprotoModerationCreateReportMutationData =
  operations.ComAtprotoModerationCreateReportResponseBody;

/**
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.
 */
export function useAtprotoModerationCreateReportMutation(
  options?: MutationHookOptions<
    AtprotoModerationCreateReportMutationData,
    Error,
    AtprotoModerationCreateReportMutationVariables
  >,
): UseMutationResult<
  AtprotoModerationCreateReportMutationData,
  Error,
  AtprotoModerationCreateReportMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildAtprotoModerationCreateReportMutation(client, options),
    ...options,
  });
}

export function mutationKeyAtprotoModerationCreateReport(): MutationKey {
  return ["bluesky", "atprotoModeration", "createReport"];
}

export function buildAtprotoModerationCreateReportMutation(
  client$: BlueskyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: AtprotoModerationCreateReportMutationVariables,
  ) => Promise<AtprotoModerationCreateReportMutationData>;
} {
  return {
    mutationKey: mutationKeyAtprotoModerationCreateReport(),
    mutationFn: function atprotoModerationCreateReportMutationFn({
      request,
      options,
    }): Promise<AtprotoModerationCreateReportMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(atprotoModerationCreateReport(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
