/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneModerationGetRepo } from "../funcs/ozoneModerationGetRepo.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneModerationGetRepoQueryData =
  components.ToolsOzoneModerationDefsRepoViewDetail;

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about a repository.
 */
export function useOzoneModerationGetRepo(
  request: operations.ToolsOzoneModerationGetRepoRequest,
  options?: QueryHookOptions<components.ToolsOzoneModerationDefsRepoViewDetail>,
): UseQueryResult<components.ToolsOzoneModerationDefsRepoViewDetail, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneModerationGetRepoQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about a repository.
 */
export function useOzoneModerationGetRepoSuspense(
  request: operations.ToolsOzoneModerationGetRepoRequest,
  options?: SuspenseQueryHookOptions<
    components.ToolsOzoneModerationDefsRepoViewDetail
  >,
): UseSuspenseQueryResult<
  components.ToolsOzoneModerationDefsRepoViewDetail,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneModerationGetRepoQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchOzoneModerationGetRepo(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetRepoRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneModerationGetRepoQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneModerationGetRepoData(
  client: QueryClient,
  queryKeyBase: [parameters: { did: string }],
  data: components.ToolsOzoneModerationDefsRepoViewDetail,
): components.ToolsOzoneModerationDefsRepoViewDetail | undefined {
  const key = queryKeyOzoneModerationGetRepo(...queryKeyBase);

  return client.setQueryData<components.ToolsOzoneModerationDefsRepoViewDetail>(
    key,
    data,
  );
}

export function invalidateOzoneModerationGetRepo(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { did: string }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "getRepo", ...queryKeyBase],
  });
}

export function invalidateAllOzoneModerationGetRepo(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "getRepo"],
  });
}

export function buildOzoneModerationGetRepoQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetRepoRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<components.ToolsOzoneModerationDefsRepoViewDetail>;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneModerationGetRepo({ did: request.did }),
    queryFn: async function ozoneModerationGetRepoQuery(
      ctx,
    ): Promise<components.ToolsOzoneModerationDefsRepoViewDetail> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneModerationGetRepo(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneModerationGetRepo(
  parameters: { did: string },
): QueryKey {
  return ["bluesky", "moderation", "getRepo", parameters];
}
