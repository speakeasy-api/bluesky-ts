/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoIdentityGetRecommendedDidCredentials } from "../funcs/atprotoIdentityGetRecommendedDidCredentials.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type AtprotoIdentityGetRecommendedDidCredentialsQueryData =
  operations.ComAtprotoIdentityGetRecommendedDidCredentialsResponseBody;

/**
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
 */
export function useAtprotoIdentityGetRecommendedDidCredentials(
  options?: QueryHookOptions<
    operations.ComAtprotoIdentityGetRecommendedDidCredentialsResponseBody
  >,
): UseQueryResult<
  operations.ComAtprotoIdentityGetRecommendedDidCredentialsResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildAtprotoIdentityGetRecommendedDidCredentialsQuery(
      client,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
 */
export function useAtprotoIdentityGetRecommendedDidCredentialsSuspense(
  options?: SuspenseQueryHookOptions<
    operations.ComAtprotoIdentityGetRecommendedDidCredentialsResponseBody
  >,
): UseSuspenseQueryResult<
  operations.ComAtprotoIdentityGetRecommendedDidCredentialsResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildAtprotoIdentityGetRecommendedDidCredentialsQuery(
      client,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchAtprotoIdentityGetRecommendedDidCredentials(
  queryClient: QueryClient,
  client$: BlueskyCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAtprotoIdentityGetRecommendedDidCredentialsQuery(
      client$,
    ),
  });
}

export function setAtprotoIdentityGetRecommendedDidCredentialsData(
  client: QueryClient,
  data: operations.ComAtprotoIdentityGetRecommendedDidCredentialsResponseBody,
):
  | operations.ComAtprotoIdentityGetRecommendedDidCredentialsResponseBody
  | undefined
{
  const key = queryKeyAtprotoIdentityGetRecommendedDidCredentials();

  return client.setQueryData<
    operations.ComAtprotoIdentityGetRecommendedDidCredentialsResponseBody
  >(key, data);
}

export function invalidateAllAtprotoIdentityGetRecommendedDidCredentials(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "identity", "getRecommendedDidCredentials"],
  });
}

export function buildAtprotoIdentityGetRecommendedDidCredentialsQuery(
  client$: BlueskyCore,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<
    operations.ComAtprotoIdentityGetRecommendedDidCredentialsResponseBody
  >;
} {
  return {
    retry: false,
    queryKey: queryKeyAtprotoIdentityGetRecommendedDidCredentials(),
    queryFn: async function atprotoIdentityGetRecommendedDidCredentialsQuery(
      ctx,
    ): Promise<
      operations.ComAtprotoIdentityGetRecommendedDidCredentialsResponseBody
    > {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(atprotoIdentityGetRecommendedDidCredentials(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAtprotoIdentityGetRecommendedDidCredentials(): QueryKey {
  return ["bluesky", "identity", "getRecommendedDidCredentials"];
}
