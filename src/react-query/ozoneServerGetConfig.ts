/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneServerGetConfig } from "../funcs/ozoneServerGetConfig.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type OzoneServerGetConfigQueryData =
  operations.ToolsOzoneServerGetConfigResponseBody;

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about ozone's server configuration.
 */
export function useOzoneServerGetConfig(
  options?: QueryHookOptions<operations.ToolsOzoneServerGetConfigResponseBody>,
): UseQueryResult<operations.ToolsOzoneServerGetConfigResponseBody, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneServerGetConfigQuery(
      client,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about ozone's server configuration.
 */
export function useOzoneServerGetConfigSuspense(
  options?: SuspenseQueryHookOptions<
    operations.ToolsOzoneServerGetConfigResponseBody
  >,
): UseSuspenseQueryResult<
  operations.ToolsOzoneServerGetConfigResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneServerGetConfigQuery(
      client,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchOzoneServerGetConfig(
  queryClient: QueryClient,
  client$: BlueskyCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneServerGetConfigQuery(
      client$,
    ),
  });
}

export function setOzoneServerGetConfigData(
  client: QueryClient,
  data: operations.ToolsOzoneServerGetConfigResponseBody,
): operations.ToolsOzoneServerGetConfigResponseBody | undefined {
  const key = queryKeyOzoneServerGetConfig();

  return client.setQueryData<operations.ToolsOzoneServerGetConfigResponseBody>(
    key,
    data,
  );
}

export function invalidateAllOzoneServerGetConfig(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "server", "getConfig"],
  });
}

export function buildOzoneServerGetConfigQuery(
  client$: BlueskyCore,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ToolsOzoneServerGetConfigResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneServerGetConfig(),
    queryFn: async function ozoneServerGetConfigQuery(
      ctx,
    ): Promise<operations.ToolsOzoneServerGetConfigResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneServerGetConfig(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneServerGetConfig(): QueryKey {
  return ["bluesky", "server", "getConfig"];
}
