/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { syncNotifyOfUpdate } from "../funcs/syncNotifyOfUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type SyncNotifyOfUpdateMutationVariables = {
  request: operations.ComAtprotoSyncNotifyOfUpdateRequestBody;
  options?: RequestOptions;
};

export type SyncNotifyOfUpdateMutationData = void;

/**
 * This endpoint is part of the atproto repository synchronization APIs. Requests usually do not require authentication, and can be made to PDS intances or Relay instances.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.
 */
export function useSyncNotifyOfUpdateMutation(
  options?: MutationHookOptions<
    SyncNotifyOfUpdateMutationData,
    Error,
    SyncNotifyOfUpdateMutationVariables
  >,
): UseMutationResult<
  SyncNotifyOfUpdateMutationData,
  Error,
  SyncNotifyOfUpdateMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildSyncNotifyOfUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeySyncNotifyOfUpdate(): MutationKey {
  return ["bluesky", "sync", "notifyOfUpdate"];
}

export function buildSyncNotifyOfUpdateMutation(
  client$: BlueskyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: SyncNotifyOfUpdateMutationVariables,
  ) => Promise<SyncNotifyOfUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeySyncNotifyOfUpdate(),
    mutationFn: function syncNotifyOfUpdateMutationFn({
      request,
      options,
    }): Promise<SyncNotifyOfUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(syncNotifyOfUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
