/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { notificationUpdateSeen } from "../funcs/notificationUpdateSeen.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";

export type NotificationUpdateSeenMutationVariables = {
  request: operations.AppBskyNotificationUpdateSeenRequestBody;
  options?: RequestOptions;
};

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Notify server that the requesting account has seen notifications. Requires auth.
 */
export function useNotificationUpdateSeenMutation(
  options?: UseMutationOptions<
    void,
    Error,
    NotificationUpdateSeenMutationVariables
  >,
): UseMutationResult<void, Error, NotificationUpdateSeenMutationVariables> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildNotificationUpdateSeenMutation(client),
    ...options,
  });
}

export function mutationKeyNotificationUpdateSeen(): MutationKey {
  return ["bluesky", "notification", "updateSeen"];
}

export function buildNotificationUpdateSeenMutation(
  client$: BlueskyCore,
): {
  retry: boolean;
  mutationKey: MutationKey;
  mutationFn: (
    variables: NotificationUpdateSeenMutationVariables,
  ) => Promise<void>;
} {
  return {
    retry: false,
    mutationKey: mutationKeyNotificationUpdateSeen(),
    mutationFn: function notificationUpdateSeenQuery({
      request,
      options,
    }): Promise<void> {
      return unwrapAsync(notificationUpdateSeen(
        client$,
        request,
        options,
      ));
    },
  };
}
