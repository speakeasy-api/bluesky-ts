/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatActorDeleteAccount } from "../funcs/chatActorDeleteAccount.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";

export type ChatActorDeleteAccountMutationVariables = {
  options?: RequestOptions;
};

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatActorDeleteAccountMutation(
  options?: UseMutationOptions<
    operations.ChatBskyActorDeleteAccountResponseBody,
    Error,
    ChatActorDeleteAccountMutationVariables
  >,
): UseMutationResult<
  operations.ChatBskyActorDeleteAccountResponseBody,
  Error,
  ChatActorDeleteAccountMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildChatActorDeleteAccountMutation(client),
    ...options,
  });
}

export function mutationKeyChatActorDeleteAccount(): MutationKey {
  return ["bluesky", "actor", "deleteAccount"];
}

export function buildChatActorDeleteAccountMutation(
  client$: BlueskyCore,
): {
  retry: boolean;
  mutationKey: MutationKey;
  mutationFn: (
    variables: ChatActorDeleteAccountMutationVariables,
  ) => Promise<operations.ChatBskyActorDeleteAccountResponseBody>;
} {
  return {
    retry: false,
    mutationKey: mutationKeyChatActorDeleteAccount(),
    mutationFn: function chatActorDeleteAccountQuery({
      options,
    }): Promise<operations.ChatBskyActorDeleteAccountResponseBody> {
      return unwrapAsync(chatActorDeleteAccount(
        client$,
        options,
      ));
    },
  };
}
