/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneModerationQueryStatuses } from "../funcs/ozoneModerationQueryStatuses.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneModerationQueryStatusesQueryData = PageIterator<
  operations.ToolsOzoneModerationQueryStatusesResponse,
  { cursor: string }
>;
export type OzoneModerationQueryStatusesPageParams = PageIterator<
  operations.ToolsOzoneModerationQueryStatusesResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * View moderation statuses of subjects (record or repo).
 */
export function useOzoneModerationQueryStatuses(
  request?: operations.ToolsOzoneModerationQueryStatusesRequest | undefined,
  options?: QueryHookOptions<
    operations.ToolsOzoneModerationQueryStatusesResponse
  >,
): UseQueryResult<operations.ToolsOzoneModerationQueryStatusesResponse, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneModerationQueryStatusesQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * View moderation statuses of subjects (record or repo).
 */
export function useOzoneModerationQueryStatusesSuspense(
  request?: operations.ToolsOzoneModerationQueryStatusesRequest | undefined,
  options?: SuspenseQueryHookOptions<
    operations.ToolsOzoneModerationQueryStatusesResponse
  >,
): UseSuspenseQueryResult<
  operations.ToolsOzoneModerationQueryStatusesResponse,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneModerationQueryStatusesQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * View moderation statuses of subjects (record or repo).
 */
export function useOzoneModerationQueryStatusesInfinite(
  request?: operations.ToolsOzoneModerationQueryStatusesRequest | undefined,
  options?: InfiniteQueryHookOptions<
    PageIterator<
      operations.ToolsOzoneModerationQueryStatusesResponse,
      { cursor: string }
    >
  >,
): UseInfiniteQueryResult<
  InfiniteData<
    OzoneModerationQueryStatusesQueryData,
    OzoneModerationQueryStatusesPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    OzoneModerationQueryStatusesQueryData,
    Error,
    InfiniteData<
      OzoneModerationQueryStatusesQueryData,
      OzoneModerationQueryStatusesPageParams
    >,
    QueryKey,
    OzoneModerationQueryStatusesPageParams
  >({
    ...buildOzoneModerationQueryStatusesInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * View moderation statuses of subjects (record or repo).
 */
export function useOzoneModerationQueryStatusesInfiniteSuspense(
  request?: operations.ToolsOzoneModerationQueryStatusesRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<
    PageIterator<
      operations.ToolsOzoneModerationQueryStatusesResponse,
      { cursor: string }
    >
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<
    OzoneModerationQueryStatusesQueryData,
    OzoneModerationQueryStatusesPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    OzoneModerationQueryStatusesQueryData,
    Error,
    InfiniteData<
      OzoneModerationQueryStatusesQueryData,
      OzoneModerationQueryStatusesPageParams
    >,
    QueryKey,
    OzoneModerationQueryStatusesPageParams
  >({
    ...buildOzoneModerationQueryStatusesInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchOzoneModerationQueryStatuses(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.ToolsOzoneModerationQueryStatusesRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneModerationQueryStatusesQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneModerationQueryStatusesData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      includeAllUserRecords?: boolean | undefined;
      subject?: string | undefined;
      comment?: string | undefined;
      reportedAfter?: Date | undefined;
      reportedBefore?: Date | undefined;
      reviewedAfter?: Date | undefined;
      hostingDeletedAfter?: Date | undefined;
      hostingDeletedBefore?: Date | undefined;
      hostingUpdatedAfter?: Date | undefined;
      hostingUpdatedBefore?: Date | undefined;
      hostingStatuses?: Array<string> | undefined;
      reviewedBefore?: Date | undefined;
      includeMuted?: boolean | undefined;
      onlyMuted?: boolean | undefined;
      reviewState?: string | undefined;
      ignoreSubjects?: Array<string> | undefined;
      lastReviewedBy?: string | undefined;
      sortField?: string | undefined;
      sortDirection?: string | undefined;
      takendown?: boolean | undefined;
      appealed?: boolean | undefined;
      limit?: number | undefined;
      tags?: Array<string> | undefined;
      excludeTags?: Array<string> | undefined;
      cursor?: string | undefined;
      collections?: Array<string> | undefined;
      subjectType?: operations.QueryParamSubjectType | undefined;
    },
  ],
  data: operations.ToolsOzoneModerationQueryStatusesResponse,
): operations.ToolsOzoneModerationQueryStatusesResponse | undefined {
  const key = queryKeyOzoneModerationQueryStatuses(...queryKeyBase);

  return client.setQueryData<
    operations.ToolsOzoneModerationQueryStatusesResponse
  >(key, data);
}

export function invalidateOzoneModerationQueryStatuses(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      includeAllUserRecords?: boolean | undefined;
      subject?: string | undefined;
      comment?: string | undefined;
      reportedAfter?: Date | undefined;
      reportedBefore?: Date | undefined;
      reviewedAfter?: Date | undefined;
      hostingDeletedAfter?: Date | undefined;
      hostingDeletedBefore?: Date | undefined;
      hostingUpdatedAfter?: Date | undefined;
      hostingUpdatedBefore?: Date | undefined;
      hostingStatuses?: Array<string> | undefined;
      reviewedBefore?: Date | undefined;
      includeMuted?: boolean | undefined;
      onlyMuted?: boolean | undefined;
      reviewState?: string | undefined;
      ignoreSubjects?: Array<string> | undefined;
      lastReviewedBy?: string | undefined;
      sortField?: string | undefined;
      sortDirection?: string | undefined;
      takendown?: boolean | undefined;
      appealed?: boolean | undefined;
      limit?: number | undefined;
      tags?: Array<string> | undefined;
      excludeTags?: Array<string> | undefined;
      cursor?: string | undefined;
      collections?: Array<string> | undefined;
      subjectType?: operations.QueryParamSubjectType | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "queryStatuses", ...queryKeyBase],
  });
}

export function invalidateAllOzoneModerationQueryStatuses(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "queryStatuses"],
  });
}

export function buildOzoneModerationQueryStatusesQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneModerationQueryStatusesRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ToolsOzoneModerationQueryStatusesResponse>;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneModerationQueryStatuses({
      includeAllUserRecords: request?.includeAllUserRecords,
      subject: request?.subject,
      comment: request?.comment,
      reportedAfter: request?.reportedAfter,
      reportedBefore: request?.reportedBefore,
      reviewedAfter: request?.reviewedAfter,
      hostingDeletedAfter: request?.hostingDeletedAfter,
      hostingDeletedBefore: request?.hostingDeletedBefore,
      hostingUpdatedAfter: request?.hostingUpdatedAfter,
      hostingUpdatedBefore: request?.hostingUpdatedBefore,
      hostingStatuses: request?.hostingStatuses,
      reviewedBefore: request?.reviewedBefore,
      includeMuted: request?.includeMuted,
      onlyMuted: request?.onlyMuted,
      reviewState: request?.reviewState,
      ignoreSubjects: request?.ignoreSubjects,
      lastReviewedBy: request?.lastReviewedBy,
      sortField: request?.sortField,
      sortDirection: request?.sortDirection,
      takendown: request?.takendown,
      appealed: request?.appealed,
      limit: request?.limit,
      tags: request?.tags,
      excludeTags: request?.excludeTags,
      cursor: request?.cursor,
      collections: request?.collections,
      subjectType: request?.subjectType,
    }),
    queryFn: async function ozoneModerationQueryStatusesQuery(
      ctx,
    ): Promise<operations.ToolsOzoneModerationQueryStatusesResponse> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneModerationQueryStatuses(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildOzoneModerationQueryStatusesInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneModerationQueryStatusesRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<
      QueryKey,
      OzoneModerationQueryStatusesPageParams
    >,
  ) => Promise<
    PageIterator<
      operations.ToolsOzoneModerationQueryStatusesResponse,
      { cursor: string }
    >
  >;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneModerationQueryStatuses({
      includeAllUserRecords: request?.includeAllUserRecords,
      subject: request?.subject,
      comment: request?.comment,
      reportedAfter: request?.reportedAfter,
      reportedBefore: request?.reportedBefore,
      reviewedAfter: request?.reviewedAfter,
      hostingDeletedAfter: request?.hostingDeletedAfter,
      hostingDeletedBefore: request?.hostingDeletedBefore,
      hostingUpdatedAfter: request?.hostingUpdatedAfter,
      hostingUpdatedBefore: request?.hostingUpdatedBefore,
      hostingStatuses: request?.hostingStatuses,
      reviewedBefore: request?.reviewedBefore,
      includeMuted: request?.includeMuted,
      onlyMuted: request?.onlyMuted,
      reviewState: request?.reviewState,
      ignoreSubjects: request?.ignoreSubjects,
      lastReviewedBy: request?.lastReviewedBy,
      sortField: request?.sortField,
      sortDirection: request?.sortDirection,
      takendown: request?.takendown,
      appealed: request?.appealed,
      limit: request?.limit,
      tags: request?.tags,
      excludeTags: request?.excludeTags,
      cursor: request?.cursor,
      collections: request?.collections,
      subjectType: request?.subjectType,
    }),
    queryFn: async function ozoneModerationQueryStatusesQuery(
      ctx,
    ): Promise<
      PageIterator<
        operations.ToolsOzoneModerationQueryStatusesResponse,
        { cursor: string }
      >
    > {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(ozoneModerationQueryStatuses(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(ozoneModerationQueryStatuses(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneModerationQueryStatuses(
  parameters: {
    includeAllUserRecords?: boolean | undefined;
    subject?: string | undefined;
    comment?: string | undefined;
    reportedAfter?: Date | undefined;
    reportedBefore?: Date | undefined;
    reviewedAfter?: Date | undefined;
    hostingDeletedAfter?: Date | undefined;
    hostingDeletedBefore?: Date | undefined;
    hostingUpdatedAfter?: Date | undefined;
    hostingUpdatedBefore?: Date | undefined;
    hostingStatuses?: Array<string> | undefined;
    reviewedBefore?: Date | undefined;
    includeMuted?: boolean | undefined;
    onlyMuted?: boolean | undefined;
    reviewState?: string | undefined;
    ignoreSubjects?: Array<string> | undefined;
    lastReviewedBy?: string | undefined;
    sortField?: string | undefined;
    sortDirection?: string | undefined;
    takendown?: boolean | undefined;
    appealed?: boolean | undefined;
    limit?: number | undefined;
    tags?: Array<string> | undefined;
    excludeTags?: Array<string> | undefined;
    cursor?: string | undefined;
    collections?: Array<string> | undefined;
    subjectType?: operations.QueryParamSubjectType | undefined;
  },
): QueryKey {
  return ["bluesky", "moderation", "queryStatuses", parameters];
}
