/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { signatureFindCorrelation } from "../funcs/signatureFindCorrelation.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SignatureFindCorrelationQueryData =
  operations.ToolsOzoneSignatureFindCorrelationResponse;

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Find all correlated threat signatures between 2 or more accounts.
 */
export function useSignatureFindCorrelation(
  request: operations.ToolsOzoneSignatureFindCorrelationRequest,
  options?: QueryHookOptions<SignatureFindCorrelationQueryData>,
): UseQueryResult<SignatureFindCorrelationQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildSignatureFindCorrelationQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Find all correlated threat signatures between 2 or more accounts.
 */
export function useSignatureFindCorrelationSuspense(
  request: operations.ToolsOzoneSignatureFindCorrelationRequest,
  options?: SuspenseQueryHookOptions<SignatureFindCorrelationQueryData>,
): UseSuspenseQueryResult<SignatureFindCorrelationQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildSignatureFindCorrelationQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchSignatureFindCorrelation(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ToolsOzoneSignatureFindCorrelationRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSignatureFindCorrelationQuery(
      client$,
      request,
    ),
  });
}

export function setSignatureFindCorrelationData(
  client: QueryClient,
  queryKeyBase: [parameters: { dids: Array<string> }],
  data: SignatureFindCorrelationQueryData,
): SignatureFindCorrelationQueryData | undefined {
  const key = queryKeySignatureFindCorrelation(...queryKeyBase);

  return client.setQueryData<SignatureFindCorrelationQueryData>(key, data);
}

export function invalidateSignatureFindCorrelation(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { dids: Array<string> }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-sdks/bluesky",
      "signature",
      "findCorrelation",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllSignatureFindCorrelation(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-sdks/bluesky", "signature", "findCorrelation"],
  });
}

export function buildSignatureFindCorrelationQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneSignatureFindCorrelationRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<SignatureFindCorrelationQueryData>;
} {
  return {
    queryKey: queryKeySignatureFindCorrelation({ dids: request.dids }),
    queryFn: async function signatureFindCorrelationQueryFn(
      ctx,
    ): Promise<SignatureFindCorrelationQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(signatureFindCorrelation(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeySignatureFindCorrelation(
  parameters: { dids: Array<string> },
): QueryKey {
  return [
    "@speakeasy-sdks/bluesky",
    "signature",
    "findCorrelation",
    parameters,
  ];
}
