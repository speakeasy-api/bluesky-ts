/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoServerDeleteAccount } from "../funcs/atprotoServerDeleteAccount.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type AtprotoServerDeleteAccountMutationVariables = {
  request: operations.ComAtprotoServerDeleteAccountRequestBody;
  options?: RequestOptions;
};

export type AtprotoServerDeleteAccountMutationData = void;

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.
 */
export function useAtprotoServerDeleteAccountMutation(
  options?: MutationHookOptions<
    AtprotoServerDeleteAccountMutationData,
    Error,
    AtprotoServerDeleteAccountMutationVariables
  >,
): UseMutationResult<
  AtprotoServerDeleteAccountMutationData,
  Error,
  AtprotoServerDeleteAccountMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildAtprotoServerDeleteAccountMutation(client, options),
    ...options,
  });
}

export function mutationKeyAtprotoServerDeleteAccount(): MutationKey {
  return ["bluesky", "atprotoServer", "deleteAccount"];
}

export function buildAtprotoServerDeleteAccountMutation(
  client$: BlueskyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: AtprotoServerDeleteAccountMutationVariables,
  ) => Promise<AtprotoServerDeleteAccountMutationData>;
} {
  return {
    mutationKey: mutationKeyAtprotoServerDeleteAccount(),
    mutationFn: function atprotoServerDeleteAccountMutationFn({
      request,
      options,
    }): Promise<AtprotoServerDeleteAccountMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(atprotoServerDeleteAccount(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
