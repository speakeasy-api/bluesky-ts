/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneModerationGetRecords } from "../funcs/ozoneModerationGetRecords.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneModerationGetRecordsQueryData =
  operations.ToolsOzoneModerationGetRecordsResponseBody;

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about some records.
 */
export function useOzoneModerationGetRecords(
  request: operations.ToolsOzoneModerationGetRecordsRequest,
  options?: QueryHookOptions<
    operations.ToolsOzoneModerationGetRecordsResponseBody
  >,
): UseQueryResult<
  operations.ToolsOzoneModerationGetRecordsResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneModerationGetRecordsQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about some records.
 */
export function useOzoneModerationGetRecordsSuspense(
  request: operations.ToolsOzoneModerationGetRecordsRequest,
  options?: SuspenseQueryHookOptions<
    operations.ToolsOzoneModerationGetRecordsResponseBody
  >,
): UseSuspenseQueryResult<
  operations.ToolsOzoneModerationGetRecordsResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneModerationGetRecordsQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchOzoneModerationGetRecords(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetRecordsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneModerationGetRecordsQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneModerationGetRecordsData(
  client: QueryClient,
  queryKeyBase: [parameters: { uris: Array<string> }],
  data: operations.ToolsOzoneModerationGetRecordsResponseBody,
): operations.ToolsOzoneModerationGetRecordsResponseBody | undefined {
  const key = queryKeyOzoneModerationGetRecords(...queryKeyBase);

  return client.setQueryData<
    operations.ToolsOzoneModerationGetRecordsResponseBody
  >(key, data);
}

export function invalidateOzoneModerationGetRecords(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { uris: Array<string> }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "getRecords", ...queryKeyBase],
  });
}

export function invalidateAllOzoneModerationGetRecords(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "getRecords"],
  });
}

export function buildOzoneModerationGetRecordsQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetRecordsRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ToolsOzoneModerationGetRecordsResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneModerationGetRecords({ uris: request.uris }),
    queryFn: async function ozoneModerationGetRecordsQuery(
      ctx,
    ): Promise<operations.ToolsOzoneModerationGetRecordsResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneModerationGetRecords(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneModerationGetRecords(
  parameters: { uris: Array<string> },
): QueryKey {
  return ["bluesky", "moderation", "getRecords", parameters];
}
