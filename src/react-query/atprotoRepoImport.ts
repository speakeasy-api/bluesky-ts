/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoRepoImport } from "../funcs/atprotoRepoImport.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type AtprotoRepoImportMutationVariables = {
  request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
  options?: RequestOptions;
};

export type AtprotoRepoImportMutationData = void;

/**
 * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
 */
export function useAtprotoRepoImportMutation(
  options?: MutationHookOptions<
    AtprotoRepoImportMutationData,
    Error,
    AtprotoRepoImportMutationVariables
  >,
): UseMutationResult<
  AtprotoRepoImportMutationData,
  Error,
  AtprotoRepoImportMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildAtprotoRepoImportMutation(client, options),
    ...options,
  });
}

export function mutationKeyAtprotoRepoImport(): MutationKey {
  return ["@speakeasy-sdks/bluesky", "atprotoRepo", "import"];
}

export function buildAtprotoRepoImportMutation(
  client$: BlueskyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: AtprotoRepoImportMutationVariables,
  ) => Promise<AtprotoRepoImportMutationData>;
} {
  return {
    mutationKey: mutationKeyAtprotoRepoImport(),
    mutationFn: function atprotoRepoImportMutationFn({
      request,
      options,
    }): Promise<AtprotoRepoImportMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(atprotoRepoImport(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
