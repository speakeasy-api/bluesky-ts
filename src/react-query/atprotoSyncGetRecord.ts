/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoSyncGetRecord } from "../funcs/atprotoSyncGetRecord.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AtprotoSyncGetRecordQueryData = void;

/**
 * This endpoint is part of the atproto repository synchronization APIs. Requests usually do not require authentication, and can be made to PDS intances or Relay instances.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
 */
export function useAtprotoSyncGetRecord(
  request: operations.ComAtprotoSyncGetRecordRequest,
  options?: QueryHookOptions<void>,
): UseQueryResult<void, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildAtprotoSyncGetRecordQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * This endpoint is part of the atproto repository synchronization APIs. Requests usually do not require authentication, and can be made to PDS intances or Relay instances.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
 */
export function useAtprotoSyncGetRecordSuspense(
  request: operations.ComAtprotoSyncGetRecordRequest,
  options?: SuspenseQueryHookOptions<void>,
): UseSuspenseQueryResult<void, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildAtprotoSyncGetRecordQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchAtprotoSyncGetRecord(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ComAtprotoSyncGetRecordRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAtprotoSyncGetRecordQuery(
      client$,
      request,
    ),
  });
}

export function setAtprotoSyncGetRecordData(
  client: QueryClient,
  queryKeyBase: [parameters: { did: string; collection: string; rkey: string }],
  data: void,
): void | undefined {
  const key = queryKeyAtprotoSyncGetRecord(...queryKeyBase);

  return client.setQueryData<void>(key, data);
}

export function invalidateAtprotoSyncGetRecord(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { did: string; collection: string; rkey: string }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "sync", "getRecord", ...queryKeyBase],
  });
}

export function invalidateAllAtprotoSyncGetRecord(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "sync", "getRecord"],
  });
}

export function buildAtprotoSyncGetRecordQuery(
  client$: BlueskyCore,
  request: operations.ComAtprotoSyncGetRecordRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<void>;
} {
  return {
    retry: false,
    queryKey: queryKeyAtprotoSyncGetRecord({
      did: request.did,
      collection: request.collection,
      rkey: request.rkey,
    }),
    queryFn: async function atprotoSyncGetRecordQuery(ctx): Promise<void> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(atprotoSyncGetRecord(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAtprotoSyncGetRecord(
  parameters: { did: string; collection: string; rkey: string },
): QueryKey {
  return ["bluesky", "sync", "getRecord", parameters];
}
