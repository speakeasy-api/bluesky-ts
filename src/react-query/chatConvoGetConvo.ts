/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatConvoGetConvo } from "../funcs/chatConvoGetConvo.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ChatConvoGetConvoQueryData =
  operations.ChatBskyConvoGetConvoResponseBody;

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetConvo(
  request: operations.ChatBskyConvoGetConvoRequest,
  options?: QueryHookOptions<operations.ChatBskyConvoGetConvoResponseBody>,
): UseQueryResult<operations.ChatBskyConvoGetConvoResponseBody, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildChatConvoGetConvoQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetConvoSuspense(
  request: operations.ChatBskyConvoGetConvoRequest,
  options?: SuspenseQueryHookOptions<
    operations.ChatBskyConvoGetConvoResponseBody
  >,
): UseSuspenseQueryResult<operations.ChatBskyConvoGetConvoResponseBody, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildChatConvoGetConvoQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchChatConvoGetConvo(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ChatBskyConvoGetConvoRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildChatConvoGetConvoQuery(
      client$,
      request,
    ),
  });
}

export function setChatConvoGetConvoData(
  client: QueryClient,
  queryKeyBase: [parameters: { convoId: string }],
  data: operations.ChatBskyConvoGetConvoResponseBody,
): operations.ChatBskyConvoGetConvoResponseBody | undefined {
  const key = queryKeyChatConvoGetConvo(...queryKeyBase);

  return client.setQueryData<operations.ChatBskyConvoGetConvoResponseBody>(
    key,
    data,
  );
}

export function invalidateChatConvoGetConvo(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { convoId: string }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "convo", "getConvo", ...queryKeyBase],
  });
}

export function invalidateAllChatConvoGetConvo(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "convo", "getConvo"],
  });
}

export function buildChatConvoGetConvoQuery(
  client$: BlueskyCore,
  request: operations.ChatBskyConvoGetConvoRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ChatBskyConvoGetConvoResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyChatConvoGetConvo({ convoId: request.convoId }),
    queryFn: async function chatConvoGetConvoQuery(
      ctx,
    ): Promise<operations.ChatBskyConvoGetConvoResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(chatConvoGetConvo(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyChatConvoGetConvo(
  parameters: { convoId: string },
): QueryKey {
  return ["bluesky", "convo", "getConvo", parameters];
}
