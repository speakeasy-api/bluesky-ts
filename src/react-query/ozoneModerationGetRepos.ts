/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneModerationGetRepos } from "../funcs/ozoneModerationGetRepos.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneModerationGetReposQueryData =
  operations.ToolsOzoneModerationGetReposResponseBody;

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about some repositories.
 */
export function useOzoneModerationGetRepos(
  request: operations.ToolsOzoneModerationGetReposRequest,
  options?: QueryHookOptions<
    operations.ToolsOzoneModerationGetReposResponseBody
  >,
): UseQueryResult<operations.ToolsOzoneModerationGetReposResponseBody, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneModerationGetReposQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get details about some repositories.
 */
export function useOzoneModerationGetReposSuspense(
  request: operations.ToolsOzoneModerationGetReposRequest,
  options?: SuspenseQueryHookOptions<
    operations.ToolsOzoneModerationGetReposResponseBody
  >,
): UseSuspenseQueryResult<
  operations.ToolsOzoneModerationGetReposResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneModerationGetReposQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchOzoneModerationGetRepos(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetReposRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneModerationGetReposQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneModerationGetReposData(
  client: QueryClient,
  queryKeyBase: [parameters: { dids: Array<string> }],
  data: operations.ToolsOzoneModerationGetReposResponseBody,
): operations.ToolsOzoneModerationGetReposResponseBody | undefined {
  const key = queryKeyOzoneModerationGetRepos(...queryKeyBase);

  return client.setQueryData<
    operations.ToolsOzoneModerationGetReposResponseBody
  >(key, data);
}

export function invalidateOzoneModerationGetRepos(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { dids: Array<string> }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "getRepos", ...queryKeyBase],
  });
}

export function invalidateAllOzoneModerationGetRepos(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "getRepos"],
  });
}

export function buildOzoneModerationGetReposQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneModerationGetReposRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ToolsOzoneModerationGetReposResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneModerationGetRepos({ dids: request.dids }),
    queryFn: async function ozoneModerationGetReposQuery(
      ctx,
    ): Promise<operations.ToolsOzoneModerationGetReposResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneModerationGetRepos(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneModerationGetRepos(
  parameters: { dids: Array<string> },
): QueryKey {
  return ["bluesky", "moderation", "getRepos", parameters];
}
