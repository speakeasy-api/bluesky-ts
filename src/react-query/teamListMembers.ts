/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { teamListMembers } from "../funcs/teamListMembers.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type TeamListMembersQueryData =
  operations.ToolsOzoneTeamListMembersResponse;

export type TeamListMembersInfiniteQueryData = PageIterator<
  operations.ToolsOzoneTeamListMembersResponse,
  { cursor: string }
>;

export type TeamListMembersPageParams = PageIterator<
  operations.ToolsOzoneTeamListMembersResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List all members with access to the ozone service.
 */
export function useTeamListMembers(
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: QueryHookOptions<TeamListMembersQueryData>,
): UseQueryResult<TeamListMembersQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildTeamListMembersQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List all members with access to the ozone service.
 */
export function useTeamListMembersSuspense(
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: SuspenseQueryHookOptions<TeamListMembersQueryData>,
): UseSuspenseQueryResult<TeamListMembersQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildTeamListMembersQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List all members with access to the ozone service.
 */
export function useTeamListMembersInfinite(
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: InfiniteQueryHookOptions<TeamListMembersInfiniteQueryData>,
): UseInfiniteQueryResult<
  InfiniteData<TeamListMembersInfiniteQueryData, TeamListMembersPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    TeamListMembersInfiniteQueryData,
    Error,
    InfiniteData<TeamListMembersInfiniteQueryData, TeamListMembersPageParams>,
    QueryKey,
    TeamListMembersPageParams
  >({
    ...buildTeamListMembersInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List all members with access to the ozone service.
 */
export function useTeamListMembersInfiniteSuspense(
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<TeamListMembersInfiniteQueryData>,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<TeamListMembersInfiniteQueryData, TeamListMembersPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    TeamListMembersInfiniteQueryData,
    Error,
    InfiniteData<TeamListMembersInfiniteQueryData, TeamListMembersPageParams>,
    QueryKey,
    TeamListMembersPageParams
  >({
    ...buildTeamListMembersInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchTeamListMembers(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildTeamListMembersQuery(
      client$,
      request,
    ),
  });
}

export function setTeamListMembersData(
  client: QueryClient,
  queryKeyBase: [
    parameters: { limit?: number | undefined; cursor?: string | undefined },
  ],
  data: TeamListMembersQueryData,
): TeamListMembersQueryData | undefined {
  const key = queryKeyTeamListMembers(...queryKeyBase);

  return client.setQueryData<TeamListMembersQueryData>(key, data);
}

export function invalidateTeamListMembers(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { limit?: number | undefined; cursor?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/bluesky",
      "team",
      "listMembers",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllTeamListMembers(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "team", "listMembers"],
  });
}

export function buildTeamListMembersQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<TeamListMembersQueryData>;
} {
  return {
    queryKey: queryKeyTeamListMembers({
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function teamListMembersQueryFn(
      ctx,
    ): Promise<TeamListMembersQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(teamListMembers(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildTeamListMembersInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, TeamListMembersPageParams>,
  ) => Promise<TeamListMembersInfiniteQueryData>;
} {
  return {
    queryKey: queryKeyTeamListMembers({
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function teamListMembersQuery(
      ctx,
    ): Promise<TeamListMembersInfiniteQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(teamListMembers(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(teamListMembers(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyTeamListMembers(
  parameters: { limit?: number | undefined; cursor?: string | undefined },
): QueryKey {
  return ["@speakeasy-api/bluesky", "team", "listMembers", parameters];
}
