/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { syncListBlobs } from "../funcs/syncListBlobs.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SyncListBlobsQueryData = operations.ComAtprotoSyncListBlobsResponse;

export type SyncListBlobsInfiniteQueryData = PageIterator<
  operations.ComAtprotoSyncListBlobsResponse,
  { cursor: string }
>;

export type SyncListBlobsPageParams = PageIterator<
  operations.ComAtprotoSyncListBlobsResponse,
  { cursor: string }
>["~next"];

/**
 * This endpoint is part of the atproto repository synchronization APIs. Requests usually do not require authentication, and can be made to PDS intances or Relay instances.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
 */
export function useSyncListBlobs(
  request: operations.ComAtprotoSyncListBlobsRequest,
  options?: QueryHookOptions<SyncListBlobsQueryData>,
): UseQueryResult<SyncListBlobsQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildSyncListBlobsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * This endpoint is part of the atproto repository synchronization APIs. Requests usually do not require authentication, and can be made to PDS intances or Relay instances.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
 */
export function useSyncListBlobsSuspense(
  request: operations.ComAtprotoSyncListBlobsRequest,
  options?: SuspenseQueryHookOptions<SyncListBlobsQueryData>,
): UseSuspenseQueryResult<SyncListBlobsQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildSyncListBlobsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * This endpoint is part of the atproto repository synchronization APIs. Requests usually do not require authentication, and can be made to PDS intances or Relay instances.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
 */
export function useSyncListBlobsInfinite(
  request: operations.ComAtprotoSyncListBlobsRequest,
  options?: InfiniteQueryHookOptions<SyncListBlobsInfiniteQueryData>,
): UseInfiniteQueryResult<
  InfiniteData<SyncListBlobsInfiniteQueryData, SyncListBlobsPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    SyncListBlobsInfiniteQueryData,
    Error,
    InfiniteData<SyncListBlobsInfiniteQueryData, SyncListBlobsPageParams>,
    QueryKey,
    SyncListBlobsPageParams
  >({
    ...buildSyncListBlobsInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * This endpoint is part of the atproto repository synchronization APIs. Requests usually do not require authentication, and can be made to PDS intances or Relay instances.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
 */
export function useSyncListBlobsInfiniteSuspense(
  request: operations.ComAtprotoSyncListBlobsRequest,
  options?: SuspenseInfiniteQueryHookOptions<SyncListBlobsInfiniteQueryData>,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<SyncListBlobsInfiniteQueryData, SyncListBlobsPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    SyncListBlobsInfiniteQueryData,
    Error,
    InfiniteData<SyncListBlobsInfiniteQueryData, SyncListBlobsPageParams>,
    QueryKey,
    SyncListBlobsPageParams
  >({
    ...buildSyncListBlobsInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchSyncListBlobs(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ComAtprotoSyncListBlobsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSyncListBlobsQuery(
      client$,
      request,
    ),
  });
}

export function setSyncListBlobsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      did: string;
      since?: string | undefined;
      limit?: number | undefined;
      cursor?: string | undefined;
    },
  ],
  data: SyncListBlobsQueryData,
): SyncListBlobsQueryData | undefined {
  const key = queryKeySyncListBlobs(...queryKeyBase);

  return client.setQueryData<SyncListBlobsQueryData>(key, data);
}

export function invalidateSyncListBlobs(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      did: string;
      since?: string | undefined;
      limit?: number | undefined;
      cursor?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "sync", "listBlobs", ...queryKeyBase],
  });
}

export function invalidateAllSyncListBlobs(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "sync", "listBlobs"],
  });
}

export function buildSyncListBlobsQuery(
  client$: BlueskyCore,
  request: operations.ComAtprotoSyncListBlobsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<SyncListBlobsQueryData>;
} {
  return {
    queryKey: queryKeySyncListBlobs({
      did: request.did,
      since: request.since,
      limit: request.limit,
      cursor: request.cursor,
    }),
    queryFn: async function syncListBlobsQueryFn(
      ctx,
    ): Promise<SyncListBlobsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(syncListBlobs(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildSyncListBlobsInfiniteQuery(
  client$: BlueskyCore,
  request: operations.ComAtprotoSyncListBlobsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, SyncListBlobsPageParams>,
  ) => Promise<SyncListBlobsInfiniteQueryData>;
} {
  return {
    queryKey: queryKeySyncListBlobs({
      did: request.did,
      since: request.since,
      limit: request.limit,
      cursor: request.cursor,
    }),
    queryFn: async function syncListBlobsQuery(
      ctx,
    ): Promise<SyncListBlobsInfiniteQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(syncListBlobs(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(syncListBlobs(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeySyncListBlobs(
  parameters: {
    did: string;
    since?: string | undefined;
    limit?: number | undefined;
    cursor?: string | undefined;
  },
): QueryKey {
  return ["bluesky", "sync", "listBlobs", parameters];
}
