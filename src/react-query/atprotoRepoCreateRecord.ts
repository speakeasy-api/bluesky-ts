/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoRepoCreateRecord } from "../funcs/atprotoRepoCreateRecord.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";

export type AtprotoRepoCreateRecordMutationVariables = {
  request: operations.ComAtprotoRepoCreateRecordRequestBody;
  options?: RequestOptions;
};

/**
 * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Create a single new repository record. Requires auth, implemented by PDS.
 */
export function useAtprotoRepoCreateRecordMutation(
  options?: UseMutationOptions<
    operations.ComAtprotoRepoCreateRecordResponseBody,
    Error,
    AtprotoRepoCreateRecordMutationVariables
  >,
): UseMutationResult<
  operations.ComAtprotoRepoCreateRecordResponseBody,
  Error,
  AtprotoRepoCreateRecordMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildAtprotoRepoCreateRecordMutation(client),
    ...options,
  });
}

export function mutationKeyAtprotoRepoCreateRecord(): MutationKey {
  return ["bluesky", "repo", "createRecord"];
}

export function buildAtprotoRepoCreateRecordMutation(
  client$: BlueskyCore,
): {
  retry: boolean;
  mutationKey: MutationKey;
  mutationFn: (
    variables: AtprotoRepoCreateRecordMutationVariables,
  ) => Promise<operations.ComAtprotoRepoCreateRecordResponseBody>;
} {
  return {
    retry: false,
    mutationKey: mutationKeyAtprotoRepoCreateRecord(),
    mutationFn: function atprotoRepoCreateRecordQuery({
      request,
      options,
    }): Promise<operations.ComAtprotoRepoCreateRecordResponseBody> {
      return unwrapAsync(atprotoRepoCreateRecord(
        client$,
        request,
        options,
      ));
    },
  };
}
