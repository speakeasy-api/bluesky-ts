/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneSettingListOptions } from "../funcs/ozoneSettingListOptions.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneSettingListOptionsQueryData = PageIterator<
  operations.ToolsOzoneSettingListOptionsResponse,
  { cursor: string }
>;
export type OzoneSettingListOptionsPageParams = PageIterator<
  operations.ToolsOzoneSettingListOptionsResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List settings with optional filtering
 */
export function useOzoneSettingListOptions(
  request?: operations.ToolsOzoneSettingListOptionsRequest | undefined,
  options?: QueryHookOptions<operations.ToolsOzoneSettingListOptionsResponse>,
): UseQueryResult<operations.ToolsOzoneSettingListOptionsResponse, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneSettingListOptionsQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List settings with optional filtering
 */
export function useOzoneSettingListOptionsSuspense(
  request?: operations.ToolsOzoneSettingListOptionsRequest | undefined,
  options?: SuspenseQueryHookOptions<
    operations.ToolsOzoneSettingListOptionsResponse
  >,
): UseSuspenseQueryResult<
  operations.ToolsOzoneSettingListOptionsResponse,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneSettingListOptionsQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List settings with optional filtering
 */
export function useOzoneSettingListOptionsInfinite(
  request?: operations.ToolsOzoneSettingListOptionsRequest | undefined,
  options?: InfiniteQueryHookOptions<
    PageIterator<
      operations.ToolsOzoneSettingListOptionsResponse,
      { cursor: string }
    >
  >,
): UseInfiniteQueryResult<
  InfiniteData<
    OzoneSettingListOptionsQueryData,
    OzoneSettingListOptionsPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    OzoneSettingListOptionsQueryData,
    Error,
    InfiniteData<
      OzoneSettingListOptionsQueryData,
      OzoneSettingListOptionsPageParams
    >,
    QueryKey,
    OzoneSettingListOptionsPageParams
  >({
    ...buildOzoneSettingListOptionsInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List settings with optional filtering
 */
export function useOzoneSettingListOptionsInfiniteSuspense(
  request?: operations.ToolsOzoneSettingListOptionsRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<
    PageIterator<
      operations.ToolsOzoneSettingListOptionsResponse,
      { cursor: string }
    >
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<
    OzoneSettingListOptionsQueryData,
    OzoneSettingListOptionsPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    OzoneSettingListOptionsQueryData,
    Error,
    InfiniteData<
      OzoneSettingListOptionsQueryData,
      OzoneSettingListOptionsPageParams
    >,
    QueryKey,
    OzoneSettingListOptionsPageParams
  >({
    ...buildOzoneSettingListOptionsInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchOzoneSettingListOptions(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.ToolsOzoneSettingListOptionsRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneSettingListOptionsQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneSettingListOptionsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      limit?: number | undefined;
      cursor?: string | undefined;
      scope?: operations.QueryParamScope | undefined;
      prefix?: string | undefined;
      keys?: Array<string> | undefined;
    },
  ],
  data: operations.ToolsOzoneSettingListOptionsResponse,
): operations.ToolsOzoneSettingListOptionsResponse | undefined {
  const key = queryKeyOzoneSettingListOptions(...queryKeyBase);

  return client.setQueryData<operations.ToolsOzoneSettingListOptionsResponse>(
    key,
    data,
  );
}

export function invalidateOzoneSettingListOptions(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      limit?: number | undefined;
      cursor?: string | undefined;
      scope?: operations.QueryParamScope | undefined;
      prefix?: string | undefined;
      keys?: Array<string> | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "setting", "listOptions", ...queryKeyBase],
  });
}

export function invalidateAllOzoneSettingListOptions(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "setting", "listOptions"],
  });
}

export function buildOzoneSettingListOptionsQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneSettingListOptionsRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ToolsOzoneSettingListOptionsResponse>;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneSettingListOptions({
      limit: request?.limit,
      cursor: request?.cursor,
      scope: request?.scope,
      prefix: request?.prefix,
      keys: request?.keys,
    }),
    queryFn: async function ozoneSettingListOptionsQuery(
      ctx,
    ): Promise<operations.ToolsOzoneSettingListOptionsResponse> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneSettingListOptions(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildOzoneSettingListOptionsInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneSettingListOptionsRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, OzoneSettingListOptionsPageParams>,
  ) => Promise<
    PageIterator<
      operations.ToolsOzoneSettingListOptionsResponse,
      { cursor: string }
    >
  >;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneSettingListOptions({
      limit: request?.limit,
      cursor: request?.cursor,
      scope: request?.scope,
      prefix: request?.prefix,
      keys: request?.keys,
    }),
    queryFn: async function ozoneSettingListOptionsQuery(
      ctx,
    ): Promise<
      PageIterator<
        operations.ToolsOzoneSettingListOptionsResponse,
        { cursor: string }
      >
    > {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(ozoneSettingListOptions(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(ozoneSettingListOptions(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneSettingListOptions(
  parameters: {
    limit?: number | undefined;
    cursor?: string | undefined;
    scope?: operations.QueryParamScope | undefined;
    prefix?: string | undefined;
    keys?: Array<string> | undefined;
  },
): QueryKey {
  return ["bluesky", "setting", "listOptions", parameters];
}
