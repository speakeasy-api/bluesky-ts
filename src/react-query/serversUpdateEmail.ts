/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { serversUpdateEmail } from "../funcs/serversUpdateEmail.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ServersUpdateEmailMutationVariables = {
  request: operations.ComAtprotoServerUpdateEmailRequestBody;
  options?: RequestOptions;
};

export type ServersUpdateEmailMutationData = void;

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Update an account's email.
 */
export function useServersUpdateEmailMutation(
  options?: MutationHookOptions<
    ServersUpdateEmailMutationData,
    Error,
    ServersUpdateEmailMutationVariables
  >,
): UseMutationResult<
  ServersUpdateEmailMutationData,
  Error,
  ServersUpdateEmailMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildServersUpdateEmailMutation(client, options),
    ...options,
  });
}

export function mutationKeyServersUpdateEmail(): MutationKey {
  return ["bluesky", "servers", "updateEmail"];
}

export function buildServersUpdateEmailMutation(
  client$: BlueskyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ServersUpdateEmailMutationVariables,
  ) => Promise<ServersUpdateEmailMutationData>;
} {
  return {
    mutationKey: mutationKeyServersUpdateEmail(),
    mutationFn: function serversUpdateEmailMutationFn({
      request,
      options,
    }): Promise<ServersUpdateEmailMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(serversUpdateEmail(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
