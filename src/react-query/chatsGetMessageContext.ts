/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatsGetMessageContext } from "../funcs/chatsGetMessageContext.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ChatsGetMessageContextQueryData =
  operations.ChatBskyModerationGetMessageContextResponseBody;

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatsGetMessageContext(
  request: operations.ChatBskyModerationGetMessageContextRequest,
  options?: QueryHookOptions<ChatsGetMessageContextQueryData>,
): UseQueryResult<ChatsGetMessageContextQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildChatsGetMessageContextQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatsGetMessageContextSuspense(
  request: operations.ChatBskyModerationGetMessageContextRequest,
  options?: SuspenseQueryHookOptions<ChatsGetMessageContextQueryData>,
): UseSuspenseQueryResult<ChatsGetMessageContextQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildChatsGetMessageContextQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchChatsGetMessageContext(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ChatBskyModerationGetMessageContextRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildChatsGetMessageContextQuery(
      client$,
      request,
    ),
  });
}

export function setChatsGetMessageContextData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      convoId?: string | undefined;
      messageId: string;
      before?: number | undefined;
      after?: number | undefined;
    },
  ],
  data: ChatsGetMessageContextQueryData,
): ChatsGetMessageContextQueryData | undefined {
  const key = queryKeyChatsGetMessageContext(...queryKeyBase);

  return client.setQueryData<ChatsGetMessageContextQueryData>(key, data);
}

export function invalidateChatsGetMessageContext(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      convoId?: string | undefined;
      messageId: string;
      before?: number | undefined;
      after?: number | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-sdks/bluesky",
      "chats",
      "getMessageContext",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllChatsGetMessageContext(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-sdks/bluesky", "chats", "getMessageContext"],
  });
}

export function buildChatsGetMessageContextQuery(
  client$: BlueskyCore,
  request: operations.ChatBskyModerationGetMessageContextRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ChatsGetMessageContextQueryData>;
} {
  return {
    queryKey: queryKeyChatsGetMessageContext({
      convoId: request.convoId,
      messageId: request.messageId,
      before: request.before,
      after: request.after,
    }),
    queryFn: async function chatsGetMessageContextQueryFn(
      ctx,
    ): Promise<ChatsGetMessageContextQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(chatsGetMessageContext(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyChatsGetMessageContext(
  parameters: {
    convoId?: string | undefined;
    messageId: string;
    before?: number | undefined;
    after?: number | undefined;
  },
): QueryKey {
  return ["@speakeasy-sdks/bluesky", "chats", "getMessageContext", parameters];
}
