/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatConvoGetLog } from "../funcs/chatConvoGetLog.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ChatConvoGetLogQueryData = PageIterator<
  operations.ChatBskyConvoGetLogResponse,
  { cursor: string }
>;
export type ChatConvoGetLogPageParams = PageIterator<
  operations.ChatBskyConvoGetLogResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetLog(
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: QueryHookOptions<operations.ChatBskyConvoGetLogResponse>,
): UseQueryResult<operations.ChatBskyConvoGetLogResponse, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildChatConvoGetLogQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetLogSuspense(
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: SuspenseQueryHookOptions<operations.ChatBskyConvoGetLogResponse>,
): UseSuspenseQueryResult<operations.ChatBskyConvoGetLogResponse, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildChatConvoGetLogQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetLogInfinite(
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: InfiniteQueryHookOptions<
    PageIterator<operations.ChatBskyConvoGetLogResponse, { cursor: string }>
  >,
): UseInfiniteQueryResult<
  InfiniteData<ChatConvoGetLogQueryData, ChatConvoGetLogPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    ChatConvoGetLogQueryData,
    Error,
    InfiniteData<ChatConvoGetLogQueryData, ChatConvoGetLogPageParams>,
    QueryKey,
    ChatConvoGetLogPageParams
  >({
    ...buildChatConvoGetLogInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetLogInfiniteSuspense(
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<
    PageIterator<operations.ChatBskyConvoGetLogResponse, { cursor: string }>
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<ChatConvoGetLogQueryData, ChatConvoGetLogPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    ChatConvoGetLogQueryData,
    Error,
    InfiniteData<ChatConvoGetLogQueryData, ChatConvoGetLogPageParams>,
    QueryKey,
    ChatConvoGetLogPageParams
  >({
    ...buildChatConvoGetLogInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchChatConvoGetLog(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildChatConvoGetLogQuery(
      client$,
      request,
    ),
  });
}

export function setChatConvoGetLogData(
  client: QueryClient,
  queryKeyBase: [parameters: { cursor?: string | undefined }],
  data: operations.ChatBskyConvoGetLogResponse,
): operations.ChatBskyConvoGetLogResponse | undefined {
  const key = queryKeyChatConvoGetLog(...queryKeyBase);

  return client.setQueryData<operations.ChatBskyConvoGetLogResponse>(key, data);
}

export function invalidateChatConvoGetLog(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { cursor?: string | undefined }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "convo", "getLog", ...queryKeyBase],
  });
}

export function invalidateAllChatConvoGetLog(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "convo", "getLog"],
  });
}

export function buildChatConvoGetLogQuery(
  client$: BlueskyCore,
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ChatBskyConvoGetLogResponse>;
} {
  return {
    retry: false,
    queryKey: queryKeyChatConvoGetLog({ cursor: request?.cursor }),
    queryFn: async function chatConvoGetLogQuery(
      ctx,
    ): Promise<operations.ChatBskyConvoGetLogResponse> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(chatConvoGetLog(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildChatConvoGetLogInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.ChatBskyConvoGetLogRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, ChatConvoGetLogPageParams>,
  ) => Promise<
    PageIterator<operations.ChatBskyConvoGetLogResponse, { cursor: string }>
  >;
} {
  return {
    retry: false,
    queryKey: queryKeyChatConvoGetLog({ cursor: request?.cursor }),
    queryFn: async function chatConvoGetLogQuery(
      ctx,
    ): Promise<
      PageIterator<operations.ChatBskyConvoGetLogResponse, { cursor: string }>
    > {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(chatConvoGetLog(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(chatConvoGetLog(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyChatConvoGetLog(
  parameters: { cursor?: string | undefined },
): QueryKey {
  return ["bluesky", "convo", "getLog", parameters];
}
