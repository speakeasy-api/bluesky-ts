/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { moderationQueryEvents } from "../funcs/moderationQueryEvents.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ModerationQueryEventsQueryData =
  operations.ToolsOzoneModerationQueryEventsResponse;

export type ModerationQueryEventsInfiniteQueryData = PageIterator<
  operations.ToolsOzoneModerationQueryEventsResponse,
  { cursor: string }
>;

export type ModerationQueryEventsPageParams = PageIterator<
  operations.ToolsOzoneModerationQueryEventsResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List moderation events related to a subject.
 */
export function useModerationQueryEvents(
  request?: operations.ToolsOzoneModerationQueryEventsRequest | undefined,
  options?: QueryHookOptions<ModerationQueryEventsQueryData>,
): UseQueryResult<ModerationQueryEventsQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildModerationQueryEventsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List moderation events related to a subject.
 */
export function useModerationQueryEventsSuspense(
  request?: operations.ToolsOzoneModerationQueryEventsRequest | undefined,
  options?: SuspenseQueryHookOptions<ModerationQueryEventsQueryData>,
): UseSuspenseQueryResult<ModerationQueryEventsQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildModerationQueryEventsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List moderation events related to a subject.
 */
export function useModerationQueryEventsInfinite(
  request?: operations.ToolsOzoneModerationQueryEventsRequest | undefined,
  options?: InfiniteQueryHookOptions<ModerationQueryEventsInfiniteQueryData>,
): UseInfiniteQueryResult<
  InfiniteData<
    ModerationQueryEventsInfiniteQueryData,
    ModerationQueryEventsPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    ModerationQueryEventsInfiniteQueryData,
    Error,
    InfiniteData<
      ModerationQueryEventsInfiniteQueryData,
      ModerationQueryEventsPageParams
    >,
    QueryKey,
    ModerationQueryEventsPageParams
  >({
    ...buildModerationQueryEventsInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List moderation events related to a subject.
 */
export function useModerationQueryEventsInfiniteSuspense(
  request?: operations.ToolsOzoneModerationQueryEventsRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<
    ModerationQueryEventsInfiniteQueryData
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<
    ModerationQueryEventsInfiniteQueryData,
    ModerationQueryEventsPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    ModerationQueryEventsInfiniteQueryData,
    Error,
    InfiniteData<
      ModerationQueryEventsInfiniteQueryData,
      ModerationQueryEventsPageParams
    >,
    QueryKey,
    ModerationQueryEventsPageParams
  >({
    ...buildModerationQueryEventsInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchModerationQueryEvents(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.ToolsOzoneModerationQueryEventsRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildModerationQueryEventsQuery(
      client$,
      request,
    ),
  });
}

export function setModerationQueryEventsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      types?: Array<string> | undefined;
      createdBy?: string | undefined;
      sortDirection?: string | undefined;
      createdAfter?: Date | undefined;
      createdBefore?: Date | undefined;
      subject?: string | undefined;
      collections?: Array<string> | undefined;
      subjectType?:
        | operations.ToolsOzoneModerationQueryEventsSubjectType
        | undefined;
      includeAllUserRecords?: boolean | undefined;
      limit?: number | undefined;
      hasComment?: boolean | undefined;
      comment?: string | undefined;
      addedLabels?: Array<string> | undefined;
      removedLabels?: Array<string> | undefined;
      addedTags?: Array<string> | undefined;
      removedTags?: Array<string> | undefined;
      reportTypes?: Array<string> | undefined;
      cursor?: string | undefined;
    },
  ],
  data: ModerationQueryEventsQueryData,
): ModerationQueryEventsQueryData | undefined {
  const key = queryKeyModerationQueryEvents(...queryKeyBase);

  return client.setQueryData<ModerationQueryEventsQueryData>(key, data);
}

export function invalidateModerationQueryEvents(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      types?: Array<string> | undefined;
      createdBy?: string | undefined;
      sortDirection?: string | undefined;
      createdAfter?: Date | undefined;
      createdBefore?: Date | undefined;
      subject?: string | undefined;
      collections?: Array<string> | undefined;
      subjectType?:
        | operations.ToolsOzoneModerationQueryEventsSubjectType
        | undefined;
      includeAllUserRecords?: boolean | undefined;
      limit?: number | undefined;
      hasComment?: boolean | undefined;
      comment?: string | undefined;
      addedLabels?: Array<string> | undefined;
      removedLabels?: Array<string> | undefined;
      addedTags?: Array<string> | undefined;
      removedTags?: Array<string> | undefined;
      reportTypes?: Array<string> | undefined;
      cursor?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/bluesky",
      "moderation",
      "queryEvents",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllModerationQueryEvents(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "moderation", "queryEvents"],
  });
}

export function buildModerationQueryEventsQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneModerationQueryEventsRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ModerationQueryEventsQueryData>;
} {
  return {
    queryKey: queryKeyModerationQueryEvents({
      types: request?.types,
      createdBy: request?.createdBy,
      sortDirection: request?.sortDirection,
      createdAfter: request?.createdAfter,
      createdBefore: request?.createdBefore,
      subject: request?.subject,
      collections: request?.collections,
      subjectType: request?.subjectType,
      includeAllUserRecords: request?.includeAllUserRecords,
      limit: request?.limit,
      hasComment: request?.hasComment,
      comment: request?.comment,
      addedLabels: request?.addedLabels,
      removedLabels: request?.removedLabels,
      addedTags: request?.addedTags,
      removedTags: request?.removedTags,
      reportTypes: request?.reportTypes,
      cursor: request?.cursor,
    }),
    queryFn: async function moderationQueryEventsQueryFn(
      ctx,
    ): Promise<ModerationQueryEventsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(moderationQueryEvents(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildModerationQueryEventsInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneModerationQueryEventsRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, ModerationQueryEventsPageParams>,
  ) => Promise<ModerationQueryEventsInfiniteQueryData>;
} {
  return {
    queryKey: queryKeyModerationQueryEvents({
      types: request?.types,
      createdBy: request?.createdBy,
      sortDirection: request?.sortDirection,
      createdAfter: request?.createdAfter,
      createdBefore: request?.createdBefore,
      subject: request?.subject,
      collections: request?.collections,
      subjectType: request?.subjectType,
      includeAllUserRecords: request?.includeAllUserRecords,
      limit: request?.limit,
      hasComment: request?.hasComment,
      comment: request?.comment,
      addedLabels: request?.addedLabels,
      removedLabels: request?.removedLabels,
      addedTags: request?.addedTags,
      removedTags: request?.removedTags,
      reportTypes: request?.reportTypes,
      cursor: request?.cursor,
    }),
    queryFn: async function moderationQueryEventsQuery(
      ctx,
    ): Promise<ModerationQueryEventsInfiniteQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(moderationQueryEvents(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(moderationQueryEvents(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyModerationQueryEvents(
  parameters: {
    types?: Array<string> | undefined;
    createdBy?: string | undefined;
    sortDirection?: string | undefined;
    createdAfter?: Date | undefined;
    createdBefore?: Date | undefined;
    subject?: string | undefined;
    collections?: Array<string> | undefined;
    subjectType?:
      | operations.ToolsOzoneModerationQueryEventsSubjectType
      | undefined;
    includeAllUserRecords?: boolean | undefined;
    limit?: number | undefined;
    hasComment?: boolean | undefined;
    comment?: string | undefined;
    addedLabels?: Array<string> | undefined;
    removedLabels?: Array<string> | undefined;
    addedTags?: Array<string> | undefined;
    removedTags?: Array<string> | undefined;
    reportTypes?: Array<string> | undefined;
    cursor?: string | undefined;
  },
): QueryKey {
  return ["@speakeasy-api/bluesky", "moderation", "queryEvents", parameters];
}
