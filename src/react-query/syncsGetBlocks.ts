/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { syncsGetBlocks } from "../funcs/syncsGetBlocks.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SyncsGetBlocksQueryData = void;

/**
 * This endpoint is part of the atproto repository synchronization APIs. Requests usually do not require authentication, and can be made to PDS intances or Relay instances.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
 */
export function useSyncsGetBlocks(
  request: operations.ComAtprotoSyncGetBlocksRequest,
  options?: QueryHookOptions<SyncsGetBlocksQueryData>,
): UseQueryResult<SyncsGetBlocksQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildSyncsGetBlocksQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * This endpoint is part of the atproto repository synchronization APIs. Requests usually do not require authentication, and can be made to PDS intances or Relay instances.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
 */
export function useSyncsGetBlocksSuspense(
  request: operations.ComAtprotoSyncGetBlocksRequest,
  options?: SuspenseQueryHookOptions<SyncsGetBlocksQueryData>,
): UseSuspenseQueryResult<SyncsGetBlocksQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildSyncsGetBlocksQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchSyncsGetBlocks(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ComAtprotoSyncGetBlocksRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSyncsGetBlocksQuery(
      client$,
      request,
    ),
  });
}

export function setSyncsGetBlocksData(
  client: QueryClient,
  queryKeyBase: [parameters: { did: string; cids: Array<string> }],
  data: SyncsGetBlocksQueryData,
): SyncsGetBlocksQueryData | undefined {
  const key = queryKeySyncsGetBlocks(...queryKeyBase);

  return client.setQueryData<SyncsGetBlocksQueryData>(key, data);
}

export function invalidateSyncsGetBlocks(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { did: string; cids: Array<string> }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-sdks/bluesky",
      "syncs",
      "getBlocks",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllSyncsGetBlocks(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-sdks/bluesky", "syncs", "getBlocks"],
  });
}

export function buildSyncsGetBlocksQuery(
  client$: BlueskyCore,
  request: operations.ComAtprotoSyncGetBlocksRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<SyncsGetBlocksQueryData>;
} {
  return {
    queryKey: queryKeySyncsGetBlocks({ did: request.did, cids: request.cids }),
    queryFn: async function syncsGetBlocksQueryFn(
      ctx,
    ): Promise<SyncsGetBlocksQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(syncsGetBlocks(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeySyncsGetBlocks(
  parameters: { did: string; cids: Array<string> },
): QueryKey {
  return ["@speakeasy-sdks/bluesky", "syncs", "getBlocks", parameters];
}
