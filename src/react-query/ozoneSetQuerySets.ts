/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneSetQuerySets } from "../funcs/ozoneSetQuerySets.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneSetQuerySetsQueryData = PageIterator<
  operations.ToolsOzoneSetQuerySetsResponse,
  { cursor: string }
>;
export type OzoneSetQuerySetsPageParams = PageIterator<
  operations.ToolsOzoneSetQuerySetsResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Query available sets
 */
export function useOzoneSetQuerySets(
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: QueryHookOptions<operations.ToolsOzoneSetQuerySetsResponse>,
): UseQueryResult<operations.ToolsOzoneSetQuerySetsResponse, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneSetQuerySetsQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Query available sets
 */
export function useOzoneSetQuerySetsSuspense(
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: SuspenseQueryHookOptions<operations.ToolsOzoneSetQuerySetsResponse>,
): UseSuspenseQueryResult<operations.ToolsOzoneSetQuerySetsResponse, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneSetQuerySetsQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Query available sets
 */
export function useOzoneSetQuerySetsInfinite(
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: InfiniteQueryHookOptions<
    PageIterator<operations.ToolsOzoneSetQuerySetsResponse, { cursor: string }>
  >,
): UseInfiniteQueryResult<
  InfiniteData<OzoneSetQuerySetsQueryData, OzoneSetQuerySetsPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    OzoneSetQuerySetsQueryData,
    Error,
    InfiniteData<OzoneSetQuerySetsQueryData, OzoneSetQuerySetsPageParams>,
    QueryKey,
    OzoneSetQuerySetsPageParams
  >({
    ...buildOzoneSetQuerySetsInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Query available sets
 */
export function useOzoneSetQuerySetsInfiniteSuspense(
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<
    PageIterator<operations.ToolsOzoneSetQuerySetsResponse, { cursor: string }>
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<OzoneSetQuerySetsQueryData, OzoneSetQuerySetsPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    OzoneSetQuerySetsQueryData,
    Error,
    InfiniteData<OzoneSetQuerySetsQueryData, OzoneSetQuerySetsPageParams>,
    QueryKey,
    OzoneSetQuerySetsPageParams
  >({
    ...buildOzoneSetQuerySetsInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchOzoneSetQuerySets(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneSetQuerySetsQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneSetQuerySetsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      limit?: number | undefined;
      cursor?: string | undefined;
      namePrefix?: string | undefined;
      sortBy?: string | undefined;
      sortDirection?: string | undefined;
    },
  ],
  data: operations.ToolsOzoneSetQuerySetsResponse,
): operations.ToolsOzoneSetQuerySetsResponse | undefined {
  const key = queryKeyOzoneSetQuerySets(...queryKeyBase);

  return client.setQueryData<operations.ToolsOzoneSetQuerySetsResponse>(
    key,
    data,
  );
}

export function invalidateOzoneSetQuerySets(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      limit?: number | undefined;
      cursor?: string | undefined;
      namePrefix?: string | undefined;
      sortBy?: string | undefined;
      sortDirection?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "set", "querySets", ...queryKeyBase],
  });
}

export function invalidateAllOzoneSetQuerySets(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "set", "querySets"],
  });
}

export function buildOzoneSetQuerySetsQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ToolsOzoneSetQuerySetsResponse>;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneSetQuerySets({
      limit: request?.limit,
      cursor: request?.cursor,
      namePrefix: request?.namePrefix,
      sortBy: request?.sortBy,
      sortDirection: request?.sortDirection,
    }),
    queryFn: async function ozoneSetQuerySetsQuery(
      ctx,
    ): Promise<operations.ToolsOzoneSetQuerySetsResponse> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneSetQuerySets(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildOzoneSetQuerySetsInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, OzoneSetQuerySetsPageParams>,
  ) => Promise<
    PageIterator<operations.ToolsOzoneSetQuerySetsResponse, { cursor: string }>
  >;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneSetQuerySets({
      limit: request?.limit,
      cursor: request?.cursor,
      namePrefix: request?.namePrefix,
      sortBy: request?.sortBy,
      sortDirection: request?.sortDirection,
    }),
    queryFn: async function ozoneSetQuerySetsQuery(
      ctx,
    ): Promise<
      PageIterator<
        operations.ToolsOzoneSetQuerySetsResponse,
        { cursor: string }
      >
    > {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(ozoneSetQuerySets(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(ozoneSetQuerySets(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneSetQuerySets(
  parameters: {
    limit?: number | undefined;
    cursor?: string | undefined;
    namePrefix?: string | undefined;
    sortBy?: string | undefined;
    sortDirection?: string | undefined;
  },
): QueryKey {
  return ["bluesky", "set", "querySets", parameters];
}
