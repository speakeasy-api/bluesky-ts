/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoIdentitySignPlcOperation } from "../funcs/atprotoIdentitySignPlcOperation.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";

export type AtprotoIdentitySignPlcOperationMutationVariables = {
  request?:
    | operations.ComAtprotoIdentitySignPlcOperationRequestBody
    | undefined;
  options?: RequestOptions;
};

/**
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Signs a PLC operation to update some value(s) in the requesting DID's document.
 */
export function useAtprotoIdentitySignPlcOperationMutation(
  options?: UseMutationOptions<
    operations.ComAtprotoIdentitySignPlcOperationResponseBody,
    Error,
    AtprotoIdentitySignPlcOperationMutationVariables
  >,
): UseMutationResult<
  operations.ComAtprotoIdentitySignPlcOperationResponseBody,
  Error,
  AtprotoIdentitySignPlcOperationMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildAtprotoIdentitySignPlcOperationMutation(client),
    ...options,
  });
}

export function mutationKeyAtprotoIdentitySignPlcOperation(): MutationKey {
  return ["bluesky", "identity", "signPlcOperation"];
}

export function buildAtprotoIdentitySignPlcOperationMutation(
  client$: BlueskyCore,
): {
  retry: boolean;
  mutationKey: MutationKey;
  mutationFn: (
    variables: AtprotoIdentitySignPlcOperationMutationVariables,
  ) => Promise<operations.ComAtprotoIdentitySignPlcOperationResponseBody>;
} {
  return {
    retry: false,
    mutationKey: mutationKeyAtprotoIdentitySignPlcOperation(),
    mutationFn: function atprotoIdentitySignPlcOperationQuery({
      request,
      options,
    }): Promise<operations.ComAtprotoIdentitySignPlcOperationResponseBody> {
      return unwrapAsync(atprotoIdentitySignPlcOperation(
        client$,
        request,
        options,
      ));
    },
  };
}
