/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoServerDescribe } from "../funcs/atprotoServerDescribe.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type AtprotoServerDescribeQueryData =
  operations.ComAtprotoServerDescribeServerResponseBody;

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Describes the server's account creation requirements and capabilities. Implemented by PDS.
 */
export function useAtprotoServerDescribe(
  options?: QueryHookOptions<AtprotoServerDescribeQueryData>,
): UseQueryResult<AtprotoServerDescribeQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildAtprotoServerDescribeQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Describes the server's account creation requirements and capabilities. Implemented by PDS.
 */
export function useAtprotoServerDescribeSuspense(
  options?: SuspenseQueryHookOptions<AtprotoServerDescribeQueryData>,
): UseSuspenseQueryResult<AtprotoServerDescribeQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildAtprotoServerDescribeQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchAtprotoServerDescribe(
  queryClient: QueryClient,
  client$: BlueskyCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAtprotoServerDescribeQuery(
      client$,
    ),
  });
}

export function setAtprotoServerDescribeData(
  client: QueryClient,
  data: AtprotoServerDescribeQueryData,
): AtprotoServerDescribeQueryData | undefined {
  const key = queryKeyAtprotoServerDescribe();

  return client.setQueryData<AtprotoServerDescribeQueryData>(key, data);
}

export function invalidateAllAtprotoServerDescribe(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-sdks/bluesky", "atprotoServer", "describe"],
  });
}

export function buildAtprotoServerDescribeQuery(
  client$: BlueskyCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<AtprotoServerDescribeQueryData>;
} {
  return {
    queryKey: queryKeyAtprotoServerDescribe(),
    queryFn: async function atprotoServerDescribeQueryFn(
      ctx,
    ): Promise<AtprotoServerDescribeQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(atprotoServerDescribe(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAtprotoServerDescribe(): QueryKey {
  return ["@speakeasy-sdks/bluesky", "atprotoServer", "describe"];
}
