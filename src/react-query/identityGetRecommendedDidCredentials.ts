/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { identityGetRecommendedDidCredentials } from "../funcs/identityGetRecommendedDidCredentials.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type IdentityGetRecommendedDidCredentialsQueryData =
  operations.ComAtprotoIdentityGetRecommendedDidCredentialsResponseBody;

/**
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
 */
export function useIdentityGetRecommendedDidCredentials(
  options?: QueryHookOptions<IdentityGetRecommendedDidCredentialsQueryData>,
): UseQueryResult<IdentityGetRecommendedDidCredentialsQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildIdentityGetRecommendedDidCredentialsQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
 */
export function useIdentityGetRecommendedDidCredentialsSuspense(
  options?: SuspenseQueryHookOptions<
    IdentityGetRecommendedDidCredentialsQueryData
  >,
): UseSuspenseQueryResult<
  IdentityGetRecommendedDidCredentialsQueryData,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildIdentityGetRecommendedDidCredentialsQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchIdentityGetRecommendedDidCredentials(
  queryClient: QueryClient,
  client$: BlueskyCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildIdentityGetRecommendedDidCredentialsQuery(
      client$,
    ),
  });
}

export function setIdentityGetRecommendedDidCredentialsData(
  client: QueryClient,
  data: IdentityGetRecommendedDidCredentialsQueryData,
): IdentityGetRecommendedDidCredentialsQueryData | undefined {
  const key = queryKeyIdentityGetRecommendedDidCredentials();

  return client.setQueryData<IdentityGetRecommendedDidCredentialsQueryData>(
    key,
    data,
  );
}

export function invalidateAllIdentityGetRecommendedDidCredentials(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "identity", "getRecommendedDidCredentials"],
  });
}

export function buildIdentityGetRecommendedDidCredentialsQuery(
  client$: BlueskyCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<IdentityGetRecommendedDidCredentialsQueryData>;
} {
  return {
    queryKey: queryKeyIdentityGetRecommendedDidCredentials(),
    queryFn: async function identityGetRecommendedDidCredentialsQueryFn(
      ctx,
    ): Promise<IdentityGetRecommendedDidCredentialsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(identityGetRecommendedDidCredentials(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyIdentityGetRecommendedDidCredentials(): QueryKey {
  return ["bluesky", "identity", "getRecommendedDidCredentials"];
}
