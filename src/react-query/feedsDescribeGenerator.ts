/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { feedsDescribeGenerator } from "../funcs/feedsDescribeGenerator.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type FeedsDescribeGeneratorQueryData =
  operations.AppBskyFeedDescribeFeedGeneratorResponseBody;

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).
 */
export function useFeedsDescribeGenerator(
  options?: QueryHookOptions<FeedsDescribeGeneratorQueryData>,
): UseQueryResult<FeedsDescribeGeneratorQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildFeedsDescribeGeneratorQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).
 */
export function useFeedsDescribeGeneratorSuspense(
  options?: SuspenseQueryHookOptions<FeedsDescribeGeneratorQueryData>,
): UseSuspenseQueryResult<FeedsDescribeGeneratorQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildFeedsDescribeGeneratorQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchFeedsDescribeGenerator(
  queryClient: QueryClient,
  client$: BlueskyCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildFeedsDescribeGeneratorQuery(
      client$,
    ),
  });
}

export function setFeedsDescribeGeneratorData(
  client: QueryClient,
  data: FeedsDescribeGeneratorQueryData,
): FeedsDescribeGeneratorQueryData | undefined {
  const key = queryKeyFeedsDescribeGenerator();

  return client.setQueryData<FeedsDescribeGeneratorQueryData>(key, data);
}

export function invalidateAllFeedsDescribeGenerator(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "feeds", "describeGenerator"],
  });
}

export function buildFeedsDescribeGeneratorQuery(
  client$: BlueskyCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<FeedsDescribeGeneratorQueryData>;
} {
  return {
    queryKey: queryKeyFeedsDescribeGenerator(),
    queryFn: async function feedsDescribeGeneratorQueryFn(
      ctx,
    ): Promise<FeedsDescribeGeneratorQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(feedsDescribeGenerator(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyFeedsDescribeGenerator(): QueryKey {
  return ["bluesky", "feeds", "describeGenerator"];
}
