/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatConvoGetMessages } from "../funcs/chatConvoGetMessages.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ChatConvoGetMessagesQueryData = PageIterator<
  operations.ChatBskyConvoGetMessagesResponse,
  { cursor: string }
>;
export type ChatConvoGetMessagesPageParams = PageIterator<
  operations.ChatBskyConvoGetMessagesResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetMessages(
  request: operations.ChatBskyConvoGetMessagesRequest,
  options?: QueryHookOptions<operations.ChatBskyConvoGetMessagesResponse>,
): UseQueryResult<operations.ChatBskyConvoGetMessagesResponse, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildChatConvoGetMessagesQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetMessagesSuspense(
  request: operations.ChatBskyConvoGetMessagesRequest,
  options?: SuspenseQueryHookOptions<
    operations.ChatBskyConvoGetMessagesResponse
  >,
): UseSuspenseQueryResult<operations.ChatBskyConvoGetMessagesResponse, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildChatConvoGetMessagesQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetMessagesInfinite(
  request: operations.ChatBskyConvoGetMessagesRequest,
  options?: InfiniteQueryHookOptions<
    PageIterator<
      operations.ChatBskyConvoGetMessagesResponse,
      { cursor: string }
    >
  >,
): UseInfiniteQueryResult<
  InfiniteData<ChatConvoGetMessagesQueryData, ChatConvoGetMessagesPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    ChatConvoGetMessagesQueryData,
    Error,
    InfiniteData<ChatConvoGetMessagesQueryData, ChatConvoGetMessagesPageParams>,
    QueryKey,
    ChatConvoGetMessagesPageParams
  >({
    ...buildChatConvoGetMessagesInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatConvoGetMessagesInfiniteSuspense(
  request: operations.ChatBskyConvoGetMessagesRequest,
  options?: SuspenseInfiniteQueryHookOptions<
    PageIterator<
      operations.ChatBskyConvoGetMessagesResponse,
      { cursor: string }
    >
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<ChatConvoGetMessagesQueryData, ChatConvoGetMessagesPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    ChatConvoGetMessagesQueryData,
    Error,
    InfiniteData<ChatConvoGetMessagesQueryData, ChatConvoGetMessagesPageParams>,
    QueryKey,
    ChatConvoGetMessagesPageParams
  >({
    ...buildChatConvoGetMessagesInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchChatConvoGetMessages(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ChatBskyConvoGetMessagesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildChatConvoGetMessagesQuery(
      client$,
      request,
    ),
  });
}

export function setChatConvoGetMessagesData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      convoId: string;
      limit?: number | undefined;
      cursor?: string | undefined;
    },
  ],
  data: operations.ChatBskyConvoGetMessagesResponse,
): operations.ChatBskyConvoGetMessagesResponse | undefined {
  const key = queryKeyChatConvoGetMessages(...queryKeyBase);

  return client.setQueryData<operations.ChatBskyConvoGetMessagesResponse>(
    key,
    data,
  );
}

export function invalidateChatConvoGetMessages(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      convoId: string;
      limit?: number | undefined;
      cursor?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "convo", "getMessages", ...queryKeyBase],
  });
}

export function invalidateAllChatConvoGetMessages(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "convo", "getMessages"],
  });
}

export function buildChatConvoGetMessagesQuery(
  client$: BlueskyCore,
  request: operations.ChatBskyConvoGetMessagesRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ChatBskyConvoGetMessagesResponse>;
} {
  return {
    retry: false,
    queryKey: queryKeyChatConvoGetMessages({
      convoId: request.convoId,
      limit: request.limit,
      cursor: request.cursor,
    }),
    queryFn: async function chatConvoGetMessagesQuery(
      ctx,
    ): Promise<operations.ChatBskyConvoGetMessagesResponse> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(chatConvoGetMessages(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildChatConvoGetMessagesInfiniteQuery(
  client$: BlueskyCore,
  request: operations.ChatBskyConvoGetMessagesRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, ChatConvoGetMessagesPageParams>,
  ) => Promise<
    PageIterator<
      operations.ChatBskyConvoGetMessagesResponse,
      { cursor: string }
    >
  >;
} {
  return {
    retry: false,
    queryKey: queryKeyChatConvoGetMessages({
      convoId: request.convoId,
      limit: request.limit,
      cursor: request.cursor,
    }),
    queryFn: async function chatConvoGetMessagesQuery(
      ctx,
    ): Promise<
      PageIterator<
        operations.ChatBskyConvoGetMessagesResponse,
        { cursor: string }
      >
    > {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(chatConvoGetMessages(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(chatConvoGetMessages(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyChatConvoGetMessages(
  parameters: {
    convoId: string;
    limit?: number | undefined;
    cursor?: string | undefined;
  },
): QueryKey {
  return ["bluesky", "convo", "getMessages", parameters];
}
