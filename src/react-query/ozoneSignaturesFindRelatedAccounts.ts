/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneSignaturesFindRelatedAccounts } from "../funcs/ozoneSignaturesFindRelatedAccounts.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneSignaturesFindRelatedAccountsQueryData =
  operations.ToolsOzoneSignatureFindRelatedAccountsResponse;

export type OzoneSignaturesFindRelatedAccountsInfiniteQueryData = PageIterator<
  operations.ToolsOzoneSignatureFindRelatedAccountsResponse,
  { cursor: string }
>;

export type OzoneSignaturesFindRelatedAccountsPageParams = PageIterator<
  operations.ToolsOzoneSignatureFindRelatedAccountsResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get accounts that share some matching threat signatures with the root account.
 */
export function useOzoneSignaturesFindRelatedAccounts(
  request: operations.ToolsOzoneSignatureFindRelatedAccountsRequest,
  options?: QueryHookOptions<OzoneSignaturesFindRelatedAccountsQueryData>,
): UseQueryResult<OzoneSignaturesFindRelatedAccountsQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneSignaturesFindRelatedAccountsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get accounts that share some matching threat signatures with the root account.
 */
export function useOzoneSignaturesFindRelatedAccountsSuspense(
  request: operations.ToolsOzoneSignatureFindRelatedAccountsRequest,
  options?: SuspenseQueryHookOptions<
    OzoneSignaturesFindRelatedAccountsQueryData
  >,
): UseSuspenseQueryResult<OzoneSignaturesFindRelatedAccountsQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneSignaturesFindRelatedAccountsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get accounts that share some matching threat signatures with the root account.
 */
export function useOzoneSignaturesFindRelatedAccountsInfinite(
  request: operations.ToolsOzoneSignatureFindRelatedAccountsRequest,
  options?: InfiniteQueryHookOptions<
    OzoneSignaturesFindRelatedAccountsInfiniteQueryData
  >,
): UseInfiniteQueryResult<
  InfiniteData<
    OzoneSignaturesFindRelatedAccountsInfiniteQueryData,
    OzoneSignaturesFindRelatedAccountsPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    OzoneSignaturesFindRelatedAccountsInfiniteQueryData,
    Error,
    InfiniteData<
      OzoneSignaturesFindRelatedAccountsInfiniteQueryData,
      OzoneSignaturesFindRelatedAccountsPageParams
    >,
    QueryKey,
    OzoneSignaturesFindRelatedAccountsPageParams
  >({
    ...buildOzoneSignaturesFindRelatedAccountsInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get accounts that share some matching threat signatures with the root account.
 */
export function useOzoneSignaturesFindRelatedAccountsInfiniteSuspense(
  request: operations.ToolsOzoneSignatureFindRelatedAccountsRequest,
  options?: SuspenseInfiniteQueryHookOptions<
    OzoneSignaturesFindRelatedAccountsInfiniteQueryData
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<
    OzoneSignaturesFindRelatedAccountsInfiniteQueryData,
    OzoneSignaturesFindRelatedAccountsPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    OzoneSignaturesFindRelatedAccountsInfiniteQueryData,
    Error,
    InfiniteData<
      OzoneSignaturesFindRelatedAccountsInfiniteQueryData,
      OzoneSignaturesFindRelatedAccountsPageParams
    >,
    QueryKey,
    OzoneSignaturesFindRelatedAccountsPageParams
  >({
    ...buildOzoneSignaturesFindRelatedAccountsInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchOzoneSignaturesFindRelatedAccounts(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ToolsOzoneSignatureFindRelatedAccountsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneSignaturesFindRelatedAccountsQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneSignaturesFindRelatedAccountsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      did: string;
      cursor?: string | undefined;
      limit?: number | undefined;
    },
  ],
  data: OzoneSignaturesFindRelatedAccountsQueryData,
): OzoneSignaturesFindRelatedAccountsQueryData | undefined {
  const key = queryKeyOzoneSignaturesFindRelatedAccounts(...queryKeyBase);

  return client.setQueryData<OzoneSignaturesFindRelatedAccountsQueryData>(
    key,
    data,
  );
}

export function invalidateOzoneSignaturesFindRelatedAccounts(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      did: string;
      cursor?: string | undefined;
      limit?: number | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-sdks/bluesky",
      "ozoneSignatures",
      "findRelatedAccounts",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllOzoneSignaturesFindRelatedAccounts(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-sdks/bluesky",
      "ozoneSignatures",
      "findRelatedAccounts",
    ],
  });
}

export function buildOzoneSignaturesFindRelatedAccountsQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneSignatureFindRelatedAccountsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<OzoneSignaturesFindRelatedAccountsQueryData>;
} {
  return {
    queryKey: queryKeyOzoneSignaturesFindRelatedAccounts({
      did: request.did,
      cursor: request.cursor,
      limit: request.limit,
    }),
    queryFn: async function ozoneSignaturesFindRelatedAccountsQueryFn(
      ctx,
    ): Promise<OzoneSignaturesFindRelatedAccountsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneSignaturesFindRelatedAccounts(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildOzoneSignaturesFindRelatedAccountsInfiniteQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneSignatureFindRelatedAccountsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<
      QueryKey,
      OzoneSignaturesFindRelatedAccountsPageParams
    >,
  ) => Promise<OzoneSignaturesFindRelatedAccountsInfiniteQueryData>;
} {
  return {
    queryKey: queryKeyOzoneSignaturesFindRelatedAccounts({
      did: request.did,
      cursor: request.cursor,
      limit: request.limit,
    }),
    queryFn: async function ozoneSignaturesFindRelatedAccountsQuery(
      ctx,
    ): Promise<OzoneSignaturesFindRelatedAccountsInfiniteQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(ozoneSignaturesFindRelatedAccounts(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(ozoneSignaturesFindRelatedAccounts(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneSignaturesFindRelatedAccounts(
  parameters: {
    did: string;
    cursor?: string | undefined;
    limit?: number | undefined;
  },
): QueryKey {
  return [
    "@speakeasy-sdks/bluesky",
    "ozoneSignatures",
    "findRelatedAccounts",
    parameters,
  ];
}
