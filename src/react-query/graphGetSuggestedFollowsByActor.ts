/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { graphGetSuggestedFollowsByActor } from "../funcs/graphGetSuggestedFollowsByActor.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type GraphGetSuggestedFollowsByActorQueryData =
  operations.AppBskyGraphGetSuggestedFollowsByActorResponseBody;

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.
 */
export function useGraphGetSuggestedFollowsByActor(
  request: operations.AppBskyGraphGetSuggestedFollowsByActorRequest,
  options?: QueryHookOptions<
    operations.AppBskyGraphGetSuggestedFollowsByActorResponseBody
  >,
): UseQueryResult<
  operations.AppBskyGraphGetSuggestedFollowsByActorResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildGraphGetSuggestedFollowsByActorQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.
 */
export function useGraphGetSuggestedFollowsByActorSuspense(
  request: operations.AppBskyGraphGetSuggestedFollowsByActorRequest,
  options?: SuspenseQueryHookOptions<
    operations.AppBskyGraphGetSuggestedFollowsByActorResponseBody
  >,
): UseSuspenseQueryResult<
  operations.AppBskyGraphGetSuggestedFollowsByActorResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildGraphGetSuggestedFollowsByActorQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchGraphGetSuggestedFollowsByActor(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.AppBskyGraphGetSuggestedFollowsByActorRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildGraphGetSuggestedFollowsByActorQuery(
      client$,
      request,
    ),
  });
}

export function setGraphGetSuggestedFollowsByActorData(
  client: QueryClient,
  queryKeyBase: [parameters: { actor: string }],
  data: operations.AppBskyGraphGetSuggestedFollowsByActorResponseBody,
): operations.AppBskyGraphGetSuggestedFollowsByActorResponseBody | undefined {
  const key = queryKeyGraphGetSuggestedFollowsByActor(...queryKeyBase);

  return client.setQueryData<
    operations.AppBskyGraphGetSuggestedFollowsByActorResponseBody
  >(key, data);
}

export function invalidateGraphGetSuggestedFollowsByActor(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { actor: string }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "bluesky",
      "graph",
      "getSuggestedFollowsByActor",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllGraphGetSuggestedFollowsByActor(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "graph", "getSuggestedFollowsByActor"],
  });
}

export function buildGraphGetSuggestedFollowsByActorQuery(
  client$: BlueskyCore,
  request: operations.AppBskyGraphGetSuggestedFollowsByActorRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.AppBskyGraphGetSuggestedFollowsByActorResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyGraphGetSuggestedFollowsByActor({ actor: request.actor }),
    queryFn: async function graphGetSuggestedFollowsByActorQuery(
      ctx,
    ): Promise<operations.AppBskyGraphGetSuggestedFollowsByActorResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(graphGetSuggestedFollowsByActor(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyGraphGetSuggestedFollowsByActor(
  parameters: { actor: string },
): QueryKey {
  return ["bluesky", "graph", "getSuggestedFollowsByActor", parameters];
}
