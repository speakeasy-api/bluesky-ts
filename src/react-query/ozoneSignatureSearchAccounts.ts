/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneSignatureSearchAccounts } from "../funcs/ozoneSignatureSearchAccounts.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneSignatureSearchAccountsQueryData =
  operations.ToolsOzoneSignatureSearchAccountsResponse;

export type OzoneSignatureSearchAccountsInfiniteQueryData = PageIterator<
  operations.ToolsOzoneSignatureSearchAccountsResponse,
  { cursor: string }
>;

export type OzoneSignatureSearchAccountsPageParams = PageIterator<
  operations.ToolsOzoneSignatureSearchAccountsResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Search for accounts that match one or more threat signature values.
 */
export function useOzoneSignatureSearchAccounts(
  request: operations.ToolsOzoneSignatureSearchAccountsRequest,
  options?: QueryHookOptions<OzoneSignatureSearchAccountsQueryData>,
): UseQueryResult<OzoneSignatureSearchAccountsQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneSignatureSearchAccountsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Search for accounts that match one or more threat signature values.
 */
export function useOzoneSignatureSearchAccountsSuspense(
  request: operations.ToolsOzoneSignatureSearchAccountsRequest,
  options?: SuspenseQueryHookOptions<OzoneSignatureSearchAccountsQueryData>,
): UseSuspenseQueryResult<OzoneSignatureSearchAccountsQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneSignatureSearchAccountsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Search for accounts that match one or more threat signature values.
 */
export function useOzoneSignatureSearchAccountsInfinite(
  request: operations.ToolsOzoneSignatureSearchAccountsRequest,
  options?: InfiniteQueryHookOptions<
    OzoneSignatureSearchAccountsInfiniteQueryData
  >,
): UseInfiniteQueryResult<
  InfiniteData<
    OzoneSignatureSearchAccountsInfiniteQueryData,
    OzoneSignatureSearchAccountsPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    OzoneSignatureSearchAccountsInfiniteQueryData,
    Error,
    InfiniteData<
      OzoneSignatureSearchAccountsInfiniteQueryData,
      OzoneSignatureSearchAccountsPageParams
    >,
    QueryKey,
    OzoneSignatureSearchAccountsPageParams
  >({
    ...buildOzoneSignatureSearchAccountsInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Search for accounts that match one or more threat signature values.
 */
export function useOzoneSignatureSearchAccountsInfiniteSuspense(
  request: operations.ToolsOzoneSignatureSearchAccountsRequest,
  options?: SuspenseInfiniteQueryHookOptions<
    OzoneSignatureSearchAccountsInfiniteQueryData
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<
    OzoneSignatureSearchAccountsInfiniteQueryData,
    OzoneSignatureSearchAccountsPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    OzoneSignatureSearchAccountsInfiniteQueryData,
    Error,
    InfiniteData<
      OzoneSignatureSearchAccountsInfiniteQueryData,
      OzoneSignatureSearchAccountsPageParams
    >,
    QueryKey,
    OzoneSignatureSearchAccountsPageParams
  >({
    ...buildOzoneSignatureSearchAccountsInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchOzoneSignatureSearchAccounts(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ToolsOzoneSignatureSearchAccountsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneSignatureSearchAccountsQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneSignatureSearchAccountsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      values: Array<string>;
      cursor?: string | undefined;
      limit?: number | undefined;
    },
  ],
  data: OzoneSignatureSearchAccountsQueryData,
): OzoneSignatureSearchAccountsQueryData | undefined {
  const key = queryKeyOzoneSignatureSearchAccounts(...queryKeyBase);

  return client.setQueryData<OzoneSignatureSearchAccountsQueryData>(key, data);
}

export function invalidateOzoneSignatureSearchAccounts(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      values: Array<string>;
      cursor?: string | undefined;
      limit?: number | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/bluesky",
      "ozoneSignature",
      "searchAccounts",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllOzoneSignatureSearchAccounts(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "ozoneSignature", "searchAccounts"],
  });
}

export function buildOzoneSignatureSearchAccountsQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneSignatureSearchAccountsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<OzoneSignatureSearchAccountsQueryData>;
} {
  return {
    queryKey: queryKeyOzoneSignatureSearchAccounts({
      values: request.values,
      cursor: request.cursor,
      limit: request.limit,
    }),
    queryFn: async function ozoneSignatureSearchAccountsQueryFn(
      ctx,
    ): Promise<OzoneSignatureSearchAccountsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneSignatureSearchAccounts(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildOzoneSignatureSearchAccountsInfiniteQuery(
  client$: BlueskyCore,
  request: operations.ToolsOzoneSignatureSearchAccountsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<
      QueryKey,
      OzoneSignatureSearchAccountsPageParams
    >,
  ) => Promise<OzoneSignatureSearchAccountsInfiniteQueryData>;
} {
  return {
    queryKey: queryKeyOzoneSignatureSearchAccounts({
      values: request.values,
      cursor: request.cursor,
      limit: request.limit,
    }),
    queryFn: async function ozoneSignatureSearchAccountsQuery(
      ctx,
    ): Promise<OzoneSignatureSearchAccountsInfiniteQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(ozoneSignatureSearchAccounts(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(ozoneSignatureSearchAccounts(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneSignatureSearchAccounts(
  parameters: {
    values: Array<string>;
    cursor?: string | undefined;
    limit?: number | undefined;
  },
): QueryKey {
  return [
    "@speakeasy-api/bluesky",
    "ozoneSignature",
    "searchAccounts",
    parameters,
  ];
}
