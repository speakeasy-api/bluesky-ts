/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { setQuery } from "../funcs/setQuery.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SetQueryQueryData = operations.ToolsOzoneSetQuerySetsResponse;

export type SetQueryInfiniteQueryData = PageIterator<
  operations.ToolsOzoneSetQuerySetsResponse,
  { cursor: string }
>;

export type SetQueryPageParams = PageIterator<
  operations.ToolsOzoneSetQuerySetsResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Query available sets
 */
export function useSetQuery(
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: QueryHookOptions<SetQueryQueryData>,
): UseQueryResult<SetQueryQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildSetQueryQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Query available sets
 */
export function useSetQuerySuspense(
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: SuspenseQueryHookOptions<SetQueryQueryData>,
): UseSuspenseQueryResult<SetQueryQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildSetQueryQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Query available sets
 */
export function useSetQueryInfinite(
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: InfiniteQueryHookOptions<SetQueryInfiniteQueryData>,
): UseInfiniteQueryResult<
  InfiniteData<SetQueryInfiniteQueryData, SetQueryPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    SetQueryInfiniteQueryData,
    Error,
    InfiniteData<SetQueryInfiniteQueryData, SetQueryPageParams>,
    QueryKey,
    SetQueryPageParams
  >({
    ...buildSetQueryInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Query available sets
 */
export function useSetQueryInfiniteSuspense(
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<SetQueryInfiniteQueryData>,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<SetQueryInfiniteQueryData, SetQueryPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    SetQueryInfiniteQueryData,
    Error,
    InfiniteData<SetQueryInfiniteQueryData, SetQueryPageParams>,
    QueryKey,
    SetQueryPageParams
  >({
    ...buildSetQueryInfiniteQuery(
      client,
      request,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchSetQuery(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSetQueryQuery(
      client$,
      request,
    ),
  });
}

export function setSetQueryData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      limit?: number | undefined;
      cursor?: string | undefined;
      namePrefix?: string | undefined;
      sortBy?: string | undefined;
      sortDirection?: string | undefined;
    },
  ],
  data: SetQueryQueryData,
): SetQueryQueryData | undefined {
  const key = queryKeySetQuery(...queryKeyBase);

  return client.setQueryData<SetQueryQueryData>(key, data);
}

export function invalidateSetQuery(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      limit?: number | undefined;
      cursor?: string | undefined;
      namePrefix?: string | undefined;
      sortBy?: string | undefined;
      sortDirection?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-sdks/bluesky", "set", "query", ...queryKeyBase],
  });
}

export function invalidateAllSetQuery(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-sdks/bluesky", "set", "query"],
  });
}

export function buildSetQueryQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<SetQueryQueryData>;
} {
  return {
    queryKey: queryKeySetQuery({
      limit: request?.limit,
      cursor: request?.cursor,
      namePrefix: request?.namePrefix,
      sortBy: request?.sortBy,
      sortDirection: request?.sortDirection,
    }),
    queryFn: async function setQueryQueryFn(ctx): Promise<SetQueryQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(setQuery(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildSetQueryInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneSetQuerySetsRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, SetQueryPageParams>,
  ) => Promise<SetQueryInfiniteQueryData>;
} {
  return {
    queryKey: queryKeySetQuery({
      limit: request?.limit,
      cursor: request?.cursor,
      namePrefix: request?.namePrefix,
      sortBy: request?.sortBy,
      sortDirection: request?.sortDirection,
    }),
    queryFn: async function setQueryQuery(
      ctx,
    ): Promise<SetQueryInfiniteQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(setQuery(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(setQuery(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeySetQuery(
  parameters: {
    limit?: number | undefined;
    cursor?: string | undefined;
    namePrefix?: string | undefined;
    sortBy?: string | undefined;
    sortDirection?: string | undefined;
  },
): QueryKey {
  return ["@speakeasy-sdks/bluesky", "set", "query", parameters];
}
