/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneModerationSearchRepos } from "../funcs/ozoneModerationSearchRepos.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneModerationSearchReposQueryData = PageIterator<
  operations.ToolsOzoneModerationSearchReposResponse,
  { cursor: string }
>;
export type OzoneModerationSearchReposPageParams = PageIterator<
  operations.ToolsOzoneModerationSearchReposResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Find repositories based on a search term.
 */
export function useOzoneModerationSearchRepos(
  request?: operations.ToolsOzoneModerationSearchReposRequest | undefined,
  options?: QueryHookOptions<
    operations.ToolsOzoneModerationSearchReposResponse
  >,
): UseQueryResult<operations.ToolsOzoneModerationSearchReposResponse, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneModerationSearchReposQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Find repositories based on a search term.
 */
export function useOzoneModerationSearchReposSuspense(
  request?: operations.ToolsOzoneModerationSearchReposRequest | undefined,
  options?: SuspenseQueryHookOptions<
    operations.ToolsOzoneModerationSearchReposResponse
  >,
): UseSuspenseQueryResult<
  operations.ToolsOzoneModerationSearchReposResponse,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneModerationSearchReposQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Find repositories based on a search term.
 */
export function useOzoneModerationSearchReposInfinite(
  request?: operations.ToolsOzoneModerationSearchReposRequest | undefined,
  options?: InfiniteQueryHookOptions<
    PageIterator<
      operations.ToolsOzoneModerationSearchReposResponse,
      { cursor: string }
    >
  >,
): UseInfiniteQueryResult<
  InfiniteData<
    OzoneModerationSearchReposQueryData,
    OzoneModerationSearchReposPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    OzoneModerationSearchReposQueryData,
    Error,
    InfiniteData<
      OzoneModerationSearchReposQueryData,
      OzoneModerationSearchReposPageParams
    >,
    QueryKey,
    OzoneModerationSearchReposPageParams
  >({
    ...buildOzoneModerationSearchReposInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Find repositories based on a search term.
 */
export function useOzoneModerationSearchReposInfiniteSuspense(
  request?: operations.ToolsOzoneModerationSearchReposRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<
    PageIterator<
      operations.ToolsOzoneModerationSearchReposResponse,
      { cursor: string }
    >
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<
    OzoneModerationSearchReposQueryData,
    OzoneModerationSearchReposPageParams
  >,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    OzoneModerationSearchReposQueryData,
    Error,
    InfiniteData<
      OzoneModerationSearchReposQueryData,
      OzoneModerationSearchReposPageParams
    >,
    QueryKey,
    OzoneModerationSearchReposPageParams
  >({
    ...buildOzoneModerationSearchReposInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchOzoneModerationSearchRepos(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.ToolsOzoneModerationSearchReposRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneModerationSearchReposQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneModerationSearchReposData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      q?: string | undefined;
      limit?: number | undefined;
      cursor?: string | undefined;
    },
  ],
  data: operations.ToolsOzoneModerationSearchReposResponse,
): operations.ToolsOzoneModerationSearchReposResponse | undefined {
  const key = queryKeyOzoneModerationSearchRepos(...queryKeyBase);

  return client.setQueryData<
    operations.ToolsOzoneModerationSearchReposResponse
  >(key, data);
}

export function invalidateOzoneModerationSearchRepos(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      q?: string | undefined;
      limit?: number | undefined;
      cursor?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "searchRepos", ...queryKeyBase],
  });
}

export function invalidateAllOzoneModerationSearchRepos(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "moderation", "searchRepos"],
  });
}

export function buildOzoneModerationSearchReposQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneModerationSearchReposRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ToolsOzoneModerationSearchReposResponse>;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneModerationSearchRepos({
      q: request?.q,
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function ozoneModerationSearchReposQuery(
      ctx,
    ): Promise<operations.ToolsOzoneModerationSearchReposResponse> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneModerationSearchRepos(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildOzoneModerationSearchReposInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneModerationSearchReposRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<
      QueryKey,
      OzoneModerationSearchReposPageParams
    >,
  ) => Promise<
    PageIterator<
      operations.ToolsOzoneModerationSearchReposResponse,
      { cursor: string }
    >
  >;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneModerationSearchRepos({
      q: request?.q,
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function ozoneModerationSearchReposQuery(
      ctx,
    ): Promise<
      PageIterator<
        operations.ToolsOzoneModerationSearchReposResponse,
        { cursor: string }
      >
    > {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(ozoneModerationSearchRepos(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(ozoneModerationSearchRepos(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneModerationSearchRepos(
  parameters: {
    q?: string | undefined;
    limit?: number | undefined;
    cursor?: string | undefined;
  },
): QueryKey {
  return ["bluesky", "moderation", "searchRepos", parameters];
}
