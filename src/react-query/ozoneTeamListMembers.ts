/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { ozoneTeamListMembers } from "../funcs/ozoneTeamListMembers.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useBlueskyContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OzoneTeamListMembersQueryData = PageIterator<
  operations.ToolsOzoneTeamListMembersResponse,
  { cursor: string }
>;
export type OzoneTeamListMembersPageParams = PageIterator<
  operations.ToolsOzoneTeamListMembersResponse,
  { cursor: string }
>["~next"];

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List all members with access to the ozone service.
 */
export function useOzoneTeamListMembers(
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: QueryHookOptions<operations.ToolsOzoneTeamListMembersResponse>,
): UseQueryResult<operations.ToolsOzoneTeamListMembersResponse, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildOzoneTeamListMembersQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List all members with access to the ozone service.
 */
export function useOzoneTeamListMembersSuspense(
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: SuspenseQueryHookOptions<
    operations.ToolsOzoneTeamListMembersResponse
  >,
): UseSuspenseQueryResult<operations.ToolsOzoneTeamListMembersResponse, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildOzoneTeamListMembersQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List all members with access to the ozone service.
 */
export function useOzoneTeamListMembersInfinite(
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: InfiniteQueryHookOptions<
    PageIterator<
      operations.ToolsOzoneTeamListMembersResponse,
      { cursor: string }
    >
  >,
): UseInfiniteQueryResult<
  InfiniteData<OzoneTeamListMembersQueryData, OzoneTeamListMembersPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useInfiniteQuery<
    OzoneTeamListMembersQueryData,
    Error,
    InfiniteData<OzoneTeamListMembersQueryData, OzoneTeamListMembersPageParams>,
    QueryKey,
    OzoneTeamListMembersPageParams
  >({
    ...buildOzoneTeamListMembersInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * *This endpoint is part of the [Ozone moderation service](https://ozone.tools/) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the Ozone instance indicated by the DID in the service proxying header. Admin authenentication may also be possible, with request sent directly to the Ozone instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * List all members with access to the ozone service.
 */
export function useOzoneTeamListMembersInfiniteSuspense(
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: SuspenseInfiniteQueryHookOptions<
    PageIterator<
      operations.ToolsOzoneTeamListMembersResponse,
      { cursor: string }
    >
  >,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<OzoneTeamListMembersQueryData, OzoneTeamListMembersPageParams>,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseInfiniteQuery<
    OzoneTeamListMembersQueryData,
    Error,
    InfiniteData<OzoneTeamListMembersQueryData, OzoneTeamListMembersPageParams>,
    QueryKey,
    OzoneTeamListMembersPageParams
  >({
    ...buildOzoneTeamListMembersInfiniteQuery(
      client,
      request,
      options?.request,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchOzoneTeamListMembers(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOzoneTeamListMembersQuery(
      client$,
      request,
    ),
  });
}

export function setOzoneTeamListMembersData(
  client: QueryClient,
  queryKeyBase: [
    parameters: { limit?: number | undefined; cursor?: string | undefined },
  ],
  data: operations.ToolsOzoneTeamListMembersResponse,
): operations.ToolsOzoneTeamListMembersResponse | undefined {
  const key = queryKeyOzoneTeamListMembers(...queryKeyBase);

  return client.setQueryData<operations.ToolsOzoneTeamListMembersResponse>(
    key,
    data,
  );
}

export function invalidateOzoneTeamListMembers(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { limit?: number | undefined; cursor?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "team", "listMembers", ...queryKeyBase],
  });
}

export function invalidateAllOzoneTeamListMembers(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "team", "listMembers"],
  });
}

export function buildOzoneTeamListMembersQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.ToolsOzoneTeamListMembersResponse>;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneTeamListMembers({
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function ozoneTeamListMembersQuery(
      ctx,
    ): Promise<operations.ToolsOzoneTeamListMembersResponse> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(ozoneTeamListMembers(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function buildOzoneTeamListMembersInfiniteQuery(
  client$: BlueskyCore,
  request?: operations.ToolsOzoneTeamListMembersRequest | undefined,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, OzoneTeamListMembersPageParams>,
  ) => Promise<
    PageIterator<
      operations.ToolsOzoneTeamListMembersResponse,
      { cursor: string }
    >
  >;
} {
  return {
    retry: false,
    queryKey: queryKeyOzoneTeamListMembers({
      limit: request?.limit,
      cursor: request?.cursor,
    }),
    queryFn: async function ozoneTeamListMembersQuery(
      ctx,
    ): Promise<
      PageIterator<
        operations.ToolsOzoneTeamListMembersResponse,
        { cursor: string }
      >
    > {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(ozoneTeamListMembers(
          client$,
          request,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(ozoneTeamListMembers(
        client$,
        {
          ...request,
          cursor: ctx.pageParam.cursor,
        },
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOzoneTeamListMembers(
  parameters: { limit?: number | undefined; cursor?: string | undefined },
): QueryKey {
  return ["bluesky", "team", "listMembers", parameters];
}
