/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatActorExportAccountData } from "../funcs/chatActorExportAccountData.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type ChatActorExportAccountDataQueryData = void;

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatActorExportAccountData(
  options?: QueryHookOptions<void>,
): UseQueryResult<void, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildChatActorExportAccountDataQuery(
      client,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatActorExportAccountDataSuspense(
  options?: SuspenseQueryHookOptions<void>,
): UseSuspenseQueryResult<void, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildChatActorExportAccountDataQuery(
      client,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchChatActorExportAccountData(
  queryClient: QueryClient,
  client$: BlueskyCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildChatActorExportAccountDataQuery(
      client$,
    ),
  });
}

export function setChatActorExportAccountDataData(
  client: QueryClient,
  data: void,
): void | undefined {
  const key = queryKeyChatActorExportAccountData();

  return client.setQueryData<void>(key, data);
}

export function invalidateAllChatActorExportAccountData(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "actor", "exportAccountData"],
  });
}

export function buildChatActorExportAccountDataQuery(
  client$: BlueskyCore,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<void>;
} {
  return {
    retry: false,
    queryKey: queryKeyChatActorExportAccountData(),
    queryFn: async function chatActorExportAccountDataQuery(
      ctx,
    ): Promise<void> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(chatActorExportAccountData(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyChatActorExportAccountData(): QueryKey {
  return ["bluesky", "actor", "exportAccountData"];
}
