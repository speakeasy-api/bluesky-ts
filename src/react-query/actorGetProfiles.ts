/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { actorGetProfiles } from "../funcs/actorGetProfiles.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ActorGetProfilesQueryData =
  operations.AppBskyActorGetProfilesResponseBody;

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get detailed profile views of multiple actors.
 */
export function useActorGetProfiles(
  request: operations.AppBskyActorGetProfilesRequest,
  options?: QueryHookOptions<operations.AppBskyActorGetProfilesResponseBody>,
): UseQueryResult<operations.AppBskyActorGetProfilesResponseBody, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildActorGetProfilesQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky application Lexicon APIs (`app.bsky.*`). Public endpoints which don't require authentication can be made directly against the public Bluesky AppView API: https://public.api.bsky.app. Authenticated requests are usually made to the user's PDS, with automatic service proxying. Authenticated requests can be used for both public and non-public endpoints.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get detailed profile views of multiple actors.
 */
export function useActorGetProfilesSuspense(
  request: operations.AppBskyActorGetProfilesRequest,
  options?: SuspenseQueryHookOptions<
    operations.AppBskyActorGetProfilesResponseBody
  >,
): UseSuspenseQueryResult<
  operations.AppBskyActorGetProfilesResponseBody,
  Error
> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildActorGetProfilesQuery(
      client,
      request,
      options?.request,
    ),
    ...options,
  });
}

export function prefetchActorGetProfiles(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.AppBskyActorGetProfilesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildActorGetProfilesQuery(
      client$,
      request,
    ),
  });
}

export function setActorGetProfilesData(
  client: QueryClient,
  queryKeyBase: [parameters: { actors: Array<string> }],
  data: operations.AppBskyActorGetProfilesResponseBody,
): operations.AppBskyActorGetProfilesResponseBody | undefined {
  const key = queryKeyActorGetProfiles(...queryKeyBase);

  return client.setQueryData<operations.AppBskyActorGetProfilesResponseBody>(
    key,
    data,
  );
}

export function invalidateActorGetProfiles(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { actors: Array<string> }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "actor", "getProfiles", ...queryKeyBase],
  });
}

export function invalidateAllActorGetProfiles(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["bluesky", "actor", "getProfiles"],
  });
}

export function buildActorGetProfilesQuery(
  client$: BlueskyCore,
  request: operations.AppBskyActorGetProfilesRequest,
  options?: RequestOptions,
): {
  retry: boolean;
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<operations.AppBskyActorGetProfilesResponseBody>;
} {
  return {
    retry: false,
    queryKey: queryKeyActorGetProfiles({ actors: request.actors }),
    queryFn: async function actorGetProfilesQuery(
      ctx,
    ): Promise<operations.AppBskyActorGetProfilesResponseBody> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(actorGetProfiles(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyActorGetProfiles(
  parameters: { actors: Array<string> },
): QueryKey {
  return ["bluesky", "actor", "getProfiles", parameters];
}
