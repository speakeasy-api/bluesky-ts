/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { atprotoServerResetPassword } from "../funcs/atprotoServerResetPassword.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type AtprotoServerResetPasswordMutationVariables = {
  request: operations.ComAtprotoServerResetPasswordRequest;
  options?: RequestOptions;
};

export type AtprotoServerResetPasswordMutationData = void;

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Reset a user account password using a token.
 */
export function useAtprotoServerResetPasswordMutation(
  options?: MutationHookOptions<
    AtprotoServerResetPasswordMutationData,
    Error,
    AtprotoServerResetPasswordMutationVariables
  >,
): UseMutationResult<
  AtprotoServerResetPasswordMutationData,
  Error,
  AtprotoServerResetPasswordMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildAtprotoServerResetPasswordMutation(client, options),
    ...options,
  });
}

export function mutationKeyAtprotoServerResetPassword(): MutationKey {
  return ["@speakeasy-sdks/bluesky", "atprotoServer", "resetPassword"];
}

export function buildAtprotoServerResetPasswordMutation(
  client$: BlueskyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: AtprotoServerResetPasswordMutationVariables,
  ) => Promise<AtprotoServerResetPasswordMutationData>;
} {
  return {
    mutationKey: mutationKeyAtprotoServerResetPassword(),
    mutationFn: function atprotoServerResetPasswordMutationFn({
      request,
      options,
    }): Promise<AtprotoServerResetPasswordMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(atprotoServerResetPassword(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
