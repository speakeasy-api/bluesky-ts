/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { serverCheckAccountStatus } from "../funcs/serverCheckAccountStatus.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type ServerCheckAccountStatusQueryData =
  operations.ComAtprotoServerCheckAccountStatusResponseBody;

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
 */
export function useServerCheckAccountStatus(
  options?: QueryHookOptions<ServerCheckAccountStatusQueryData>,
): UseQueryResult<ServerCheckAccountStatusQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildServerCheckAccountStatusQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
 */
export function useServerCheckAccountStatusSuspense(
  options?: SuspenseQueryHookOptions<ServerCheckAccountStatusQueryData>,
): UseSuspenseQueryResult<ServerCheckAccountStatusQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildServerCheckAccountStatusQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchServerCheckAccountStatus(
  queryClient: QueryClient,
  client$: BlueskyCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildServerCheckAccountStatusQuery(
      client$,
    ),
  });
}

export function setServerCheckAccountStatusData(
  client: QueryClient,
  data: ServerCheckAccountStatusQueryData,
): ServerCheckAccountStatusQueryData | undefined {
  const key = queryKeyServerCheckAccountStatus();

  return client.setQueryData<ServerCheckAccountStatusQueryData>(key, data);
}

export function invalidateAllServerCheckAccountStatus(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "server", "checkAccountStatus"],
  });
}

export function buildServerCheckAccountStatusQuery(
  client$: BlueskyCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ServerCheckAccountStatusQueryData>;
} {
  return {
    queryKey: queryKeyServerCheckAccountStatus(),
    queryFn: async function serverCheckAccountStatusQueryFn(
      ctx,
    ): Promise<ServerCheckAccountStatusQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(serverCheckAccountStatus(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyServerCheckAccountStatus(): QueryKey {
  return ["@speakeasy-api/bluesky", "server", "checkAccountStatus"];
}
