/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { chatsGetConvo } from "../funcs/chatsGetConvo.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ChatsGetConvoQueryData =
  operations.ChatBskyConvoGetConvoResponseBody;

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatsGetConvo(
  request: operations.ChatBskyConvoGetConvoRequest,
  options?: QueryHookOptions<ChatsGetConvoQueryData>,
): UseQueryResult<ChatsGetConvoQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildChatsGetConvoQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the Bluesky Chat (DMs) APIs. Requests usually require authentication, are directed to the user's PDS intance, and proxied to the single central chat service by setting the appropriate service DID (`did:web:api.bsky.chat`) in the service proxying header.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 */
export function useChatsGetConvoSuspense(
  request: operations.ChatBskyConvoGetConvoRequest,
  options?: SuspenseQueryHookOptions<ChatsGetConvoQueryData>,
): UseSuspenseQueryResult<ChatsGetConvoQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildChatsGetConvoQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchChatsGetConvo(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ChatBskyConvoGetConvoRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildChatsGetConvoQuery(
      client$,
      request,
    ),
  });
}

export function setChatsGetConvoData(
  client: QueryClient,
  queryKeyBase: [parameters: { convoId: string }],
  data: ChatsGetConvoQueryData,
): ChatsGetConvoQueryData | undefined {
  const key = queryKeyChatsGetConvo(...queryKeyBase);

  return client.setQueryData<ChatsGetConvoQueryData>(key, data);
}

export function invalidateChatsGetConvo(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { convoId: string }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "chats", "getConvo", ...queryKeyBase],
  });
}

export function invalidateAllChatsGetConvo(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "chats", "getConvo"],
  });
}

export function buildChatsGetConvoQuery(
  client$: BlueskyCore,
  request: operations.ChatBskyConvoGetConvoRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ChatsGetConvoQueryData>;
} {
  return {
    queryKey: queryKeyChatsGetConvo({ convoId: request.convoId }),
    queryFn: async function chatsGetConvoQueryFn(
      ctx,
    ): Promise<ChatsGetConvoQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(chatsGetConvo(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyChatsGetConvo(
  parameters: { convoId: string },
): QueryKey {
  return ["@speakeasy-api/bluesky", "chats", "getConvo", parameters];
}
