/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { serverDeactivateAccount } from "../funcs/serverDeactivateAccount.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ServerDeactivateAccountMutationVariables = {
  request?: operations.ComAtprotoServerDeactivateAccountRequestBody | undefined;
  options?: RequestOptions;
};

export type ServerDeactivateAccountMutationData = void;

/**
 * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
 */
export function useServerDeactivateAccountMutation(
  options?: MutationHookOptions<
    ServerDeactivateAccountMutationData,
    Error,
    ServerDeactivateAccountMutationVariables
  >,
): UseMutationResult<
  ServerDeactivateAccountMutationData,
  Error,
  ServerDeactivateAccountMutationVariables
> {
  const client = useBlueskyContext();
  return useMutation({
    ...buildServerDeactivateAccountMutation(client, options),
    ...options,
  });
}

export function mutationKeyServerDeactivateAccount(): MutationKey {
  return ["@speakeasy-api/bluesky", "server", "deactivateAccount"];
}

export function buildServerDeactivateAccountMutation(
  client$: BlueskyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ServerDeactivateAccountMutationVariables,
  ) => Promise<ServerDeactivateAccountMutationData>;
} {
  return {
    mutationKey: mutationKeyServerDeactivateAccount(),
    mutationFn: function serverDeactivateAccountMutationFn({
      request,
      options,
    }): Promise<ServerDeactivateAccountMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(serverDeactivateAccount(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
