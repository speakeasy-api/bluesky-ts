/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { BlueskyCore } from "../core.js";
import { reposGetRecord } from "../funcs/reposGetRecord.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useBlueskyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ReposGetRecordQueryData =
  operations.ComAtprotoRepoGetRecordResponseBody;

/**
 * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a single record from a repository. Does not require auth.
 */
export function useReposGetRecord(
  request: operations.ComAtprotoRepoGetRecordRequest,
  options?: QueryHookOptions<ReposGetRecordQueryData>,
): UseQueryResult<ReposGetRecordQueryData, Error> {
  const client = useBlueskyContext();
  return useQuery({
    ...buildReposGetRecordQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
 *
 * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
 *
 * Get a single record from a repository. Does not require auth.
 */
export function useReposGetRecordSuspense(
  request: operations.ComAtprotoRepoGetRecordRequest,
  options?: SuspenseQueryHookOptions<ReposGetRecordQueryData>,
): UseSuspenseQueryResult<ReposGetRecordQueryData, Error> {
  const client = useBlueskyContext();
  return useSuspenseQuery({
    ...buildReposGetRecordQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchReposGetRecord(
  queryClient: QueryClient,
  client$: BlueskyCore,
  request: operations.ComAtprotoRepoGetRecordRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildReposGetRecordQuery(
      client$,
      request,
    ),
  });
}

export function setReposGetRecordData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      repo: string;
      collection: string;
      rkey: string;
      cid?: string | undefined;
    },
  ],
  data: ReposGetRecordQueryData,
): ReposGetRecordQueryData | undefined {
  const key = queryKeyReposGetRecord(...queryKeyBase);

  return client.setQueryData<ReposGetRecordQueryData>(key, data);
}

export function invalidateReposGetRecord(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      repo: string;
      collection: string;
      rkey: string;
      cid?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "repos", "getRecord", ...queryKeyBase],
  });
}

export function invalidateAllReposGetRecord(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasy-api/bluesky", "repos", "getRecord"],
  });
}

export function buildReposGetRecordQuery(
  client$: BlueskyCore,
  request: operations.ComAtprotoRepoGetRecordRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ReposGetRecordQueryData>;
} {
  return {
    queryKey: queryKeyReposGetRecord({
      repo: request.repo,
      collection: request.collection,
      rkey: request.rkey,
      cid: request.cid,
    }),
    queryFn: async function reposGetRecordQueryFn(
      ctx,
    ): Promise<ReposGetRecordQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(reposGetRecord(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyReposGetRecord(
  parameters: {
    repo: string;
    collection: string;
    rkey: string;
    cid?: string | undefined;
  },
): QueryKey {
  return ["@speakeasy-api/bluesky", "repos", "getRecord", parameters];
}
