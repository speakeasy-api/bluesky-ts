/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atprotoAdminDeleteAccount } from "../funcs/atprotoAdminDeleteAccount.js";
import { atprotoAdminDisableAccountInvites } from "../funcs/atprotoAdminDisableAccountInvites.js";
import { atprotoAdminDisableInviteCodes } from "../funcs/atprotoAdminDisableInviteCodes.js";
import { atprotoAdminEnableAccountInvites } from "../funcs/atprotoAdminEnableAccountInvites.js";
import { atprotoAdminGetAccountInfo } from "../funcs/atprotoAdminGetAccountInfo.js";
import { atprotoAdminGetAccountInfos } from "../funcs/atprotoAdminGetAccountInfos.js";
import { atprotoAdminGetInviteCodes } from "../funcs/atprotoAdminGetInviteCodes.js";
import { atprotoAdminGetSubjectStatus } from "../funcs/atprotoAdminGetSubjectStatus.js";
import { atprotoAdminSearchAccounts } from "../funcs/atprotoAdminSearchAccounts.js";
import { atprotoAdminSendEmail } from "../funcs/atprotoAdminSendEmail.js";
import { atprotoAdminUpdateAccountEmail } from "../funcs/atprotoAdminUpdateAccountEmail.js";
import { atprotoAdminUpdateAccountHandle } from "../funcs/atprotoAdminUpdateAccountHandle.js";
import { atprotoAdminUpdateAccountPassword } from "../funcs/atprotoAdminUpdateAccountPassword.js";
import { atprotoAdminUpdateSubjectStatus } from "../funcs/atprotoAdminUpdateSubjectStatus.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Admin extends ClientSDK {
  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Delete a user account as an administrator.
   */
  async deleteAccount(
    request: operations.ComAtprotoAdminDeleteAccountRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoAdminDeleteAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Disable an account from receiving new invite codes, but does not invalidate existing codes.
   */
  async disableAccountInvites(
    request: operations.ComAtprotoAdminDisableAccountInvitesRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoAdminDisableAccountInvites(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Disable some set of codes and/or all codes associated with a set of users.
   */
  async disableInviteCodes(
    request?:
      | operations.ComAtprotoAdminDisableInviteCodesRequestBody
      | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoAdminDisableInviteCodes(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Re-enable an account's ability to receive invite codes.
   */
  async enableAccountInvites(
    request: operations.ComAtprotoAdminEnableAccountInvitesRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoAdminEnableAccountInvites(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get details about an account.
   */
  async getAccountInfo(
    request: operations.ComAtprotoAdminGetAccountInfoRequest,
    options?: RequestOptions,
  ): Promise<components.ComAtprotoAdminDefsAccountView> {
    return unwrapAsync(atprotoAdminGetAccountInfo(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get details about some accounts.
   */
  async getAccountInfos(
    request: operations.ComAtprotoAdminGetAccountInfosRequest,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoAdminGetAccountInfosResponseBody> {
    return unwrapAsync(atprotoAdminGetAccountInfos(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get an admin view of invite codes.
   */
  async getInviteCodes(
    request?: operations.ComAtprotoAdminGetInviteCodesRequest | undefined,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.ComAtprotoAdminGetInviteCodesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(atprotoAdminGetInviteCodes(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get the service-specific admin status of a subject (account, record, or blob).
   */
  async getSubjectStatus(
    request?: operations.ComAtprotoAdminGetSubjectStatusRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoAdminGetSubjectStatusResponseBody> {
    return unwrapAsync(atprotoAdminGetSubjectStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get list of accounts that matches your search query.
   */
  async searchAccounts(
    request?: operations.ComAtprotoAdminSearchAccountsRequest | undefined,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.ComAtprotoAdminSearchAccountsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(atprotoAdminSearchAccounts(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Send email to a user's account email address.
   */
  async sendEmail(
    request: operations.ComAtprotoAdminSendEmailRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoAdminSendEmailResponseBody> {
    return unwrapAsync(atprotoAdminSendEmail(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Administrative action to update an account's email.
   */
  async updateAccountEmail(
    request: operations.ComAtprotoAdminUpdateAccountEmailRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoAdminUpdateAccountEmail(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Administrative action to update an account's handle.
   */
  async updateAccountHandle(
    request: operations.ComAtprotoAdminUpdateAccountHandleRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoAdminUpdateAccountHandle(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Update the password for a user account as an administrator.
   */
  async updateAccountPassword(
    request: operations.ComAtprotoAdminUpdateAccountPasswordRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoAdminUpdateAccountPassword(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Update the service-specific admin status of a subject (account, record, or blob).
   */
  async updateSubjectStatus(
    request: operations.ComAtprotoAdminUpdateSubjectStatusRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoAdminUpdateSubjectStatusResponseBody> {
    return unwrapAsync(atprotoAdminUpdateSubjectStatus(
      this,
      request,
      options,
    ));
  }
}
