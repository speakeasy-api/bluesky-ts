/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { adminDisableInviteCodes } from "../funcs/adminDisableInviteCodes.js";
import { adminGetAccountInfo } from "../funcs/adminGetAccountInfo.js";
import { adminGetSubjectStatus } from "../funcs/adminGetSubjectStatus.js";
import { adminSendEmail } from "../funcs/adminSendEmail.js";
import { adminUpdateAccountEmail } from "../funcs/adminUpdateAccountEmail.js";
import { adminUpdateAccountHandle } from "../funcs/adminUpdateAccountHandle.js";
import { adminUpdateAccountPassword } from "../funcs/adminUpdateAccountPassword.js";
import { adminUpdateSubjectStatus } from "../funcs/adminUpdateSubjectStatus.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Admin extends ClientSDK {
  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Disable some set of codes and/or all codes associated with a set of users.
   */
  async disableInviteCodes(
    request?: operations.ComAtprotoAdminDisableInviteCodesBody | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(adminDisableInviteCodes(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get details about an account.
   */
  async getAccountInfo(
    request: operations.ComAtprotoAdminGetAccountInfoRequest,
    options?: RequestOptions,
  ): Promise<components.ComAtprotoAdminDefsAccountView> {
    return unwrapAsync(adminGetAccountInfo(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get the service-specific admin status of a subject (account, record, or blob).
   */
  async getSubjectStatus(
    request?: operations.ComAtprotoAdminGetSubjectStatusRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoAdminGetSubjectStatusResponseBody> {
    return unwrapAsync(adminGetSubjectStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Send email to a user's account email address.
   */
  async sendEmail(
    request: operations.ComAtprotoAdminSendEmailBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoAdminSendEmailResponseBody> {
    return unwrapAsync(adminSendEmail(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Administrative action to update an account's email.
   */
  async updateAccountEmail(
    request: operations.ComAtprotoAdminUpdateAccountEmailBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(adminUpdateAccountEmail(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Administrative action to update an account's handle.
   */
  async updateAccountHandle(
    request: operations.ComAtprotoAdminUpdateAccountHandleBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(adminUpdateAccountHandle(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Update the password for a user account as an administrator.
   */
  async updateAccountPassword(
    request: operations.ComAtprotoAdminUpdateAccountPasswordBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(adminUpdateAccountPassword(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS management APIs. Requests usually require admin authentication and are made directly to the PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Update the service-specific admin status of a subject (account, record, or blob).
   */
  async updateSubjectStatus(
    request: operations.ComAtprotoAdminUpdateSubjectStatusBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoAdminUpdateSubjectStatusResponseBody> {
    return unwrapAsync(adminUpdateSubjectStatus(
      this,
      request,
      options,
    ));
  }
}
