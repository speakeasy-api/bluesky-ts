/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { reposApplyWrites } from "../funcs/reposApplyWrites.js";
import { reposCreateRecord } from "../funcs/reposCreateRecord.js";
import { reposDescribe } from "../funcs/reposDescribe.js";
import { reposGetRecord } from "../funcs/reposGetRecord.js";
import { reposList } from "../funcs/reposList.js";
import { reposListMissingBlobs } from "../funcs/reposListMissingBlobs.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Repos extends ClientSDK {
  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
   */
  async applyWrites(
    request: operations.ComAtprotoRepoApplyWritesBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoApplyWritesResponseBody> {
    return unwrapAsync(reposApplyWrites(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Create a single new repository record. Requires auth, implemented by PDS.
   */
  async createRecord(
    request: operations.ComAtprotoRepoCreateRecordBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoCreateRecordResponseBody> {
    return unwrapAsync(reposCreateRecord(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get information about an account and repository, including the list of collections. Does not require auth.
   */
  async describe(
    request: operations.ComAtprotoRepoDescribeRepoRequest,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoDescribeRepoResponseBody> {
    return unwrapAsync(reposDescribe(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get a single record from a repository. Does not require auth.
   */
  async getRecord(
    request: operations.ComAtprotoRepoGetRecordRequest,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoGetRecordResponseBody> {
    return unwrapAsync(reposGetRecord(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
   */
  async listMissingBlobs(
    request?: operations.ComAtprotoRepoListMissingBlobsRequest | undefined,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.ComAtprotoRepoListMissingBlobsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(reposListMissingBlobs(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * List a range of records in a repository, matching a specific collection. Does not require auth.
   */
  async list(
    request: operations.ComAtprotoRepoListRecordsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.ComAtprotoRepoListRecordsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(reposList(
      this,
      request,
      options,
    ));
  }
}
