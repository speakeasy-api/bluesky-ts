/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atprotoRepoDelete } from "../funcs/atprotoRepoDelete.js";
import { atprotoRepoImport } from "../funcs/atprotoRepoImport.js";
import { atprotoRepoUploadBlob } from "../funcs/atprotoRepoUploadBlob.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AtprotoRepo extends ClientSDK {
  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.
   */
  async delete(
    request: operations.ComAtprotoRepoDeleteRecordRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoDeleteRecordResponseBody> {
    return unwrapAsync(atprotoRepoDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
   */
  async import(
    request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoRepoImport(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
   */
  async uploadBlob(
    request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoUploadBlobResponseBody> {
    return unwrapAsync(atprotoRepoUploadBlob(
      this,
      request,
      options,
    ));
  }
}
