/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { comAtprotoRepoComAtprotoRepoApplyWrites } from "../funcs/comAtprotoRepoComAtprotoRepoApplyWrites.js";
import { comAtprotoRepoComAtprotoRepoCreateRecord } from "../funcs/comAtprotoRepoComAtprotoRepoCreateRecord.js";
import { comAtprotoRepoComAtprotoRepoDeleteRecord } from "../funcs/comAtprotoRepoComAtprotoRepoDeleteRecord.js";
import { comAtprotoRepoComAtprotoRepoDescribeRepo } from "../funcs/comAtprotoRepoComAtprotoRepoDescribeRepo.js";
import { comAtprotoRepoComAtprotoRepoGetRecord } from "../funcs/comAtprotoRepoComAtprotoRepoGetRecord.js";
import { comAtprotoRepoComAtprotoRepoImportRepo } from "../funcs/comAtprotoRepoComAtprotoRepoImportRepo.js";
import { comAtprotoRepoComAtprotoRepoListMissingBlobs } from "../funcs/comAtprotoRepoComAtprotoRepoListMissingBlobs.js";
import { comAtprotoRepoComAtprotoRepoListRecords } from "../funcs/comAtprotoRepoComAtprotoRepoListRecords.js";
import { comAtprotoRepoComAtprotoRepoPutRecord } from "../funcs/comAtprotoRepoComAtprotoRepoPutRecord.js";
import { comAtprotoRepoComAtprotoRepoUploadBlob } from "../funcs/comAtprotoRepoComAtprotoRepoUploadBlob.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Repo extends ClientSDK {
  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
   */
  async comAtprotoRepoApplyWrites(
    request: operations.ComAtprotoRepoApplyWritesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoApplyWritesResponseBody> {
    return unwrapAsync(comAtprotoRepoComAtprotoRepoApplyWrites(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Create a single new repository record. Requires auth, implemented by PDS.
   */
  async comAtprotoRepoCreateRecord(
    request: operations.ComAtprotoRepoCreateRecordRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoCreateRecordResponseBody> {
    return unwrapAsync(comAtprotoRepoComAtprotoRepoCreateRecord(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.
   */
  async comAtprotoRepoDeleteRecord(
    request: operations.ComAtprotoRepoDeleteRecordRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoDeleteRecordResponseBody> {
    return unwrapAsync(comAtprotoRepoComAtprotoRepoDeleteRecord(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get information about an account and repository, including the list of collections. Does not require auth.
   */
  async comAtprotoRepoDescribeRepo(
    request: operations.ComAtprotoRepoDescribeRepoRequest,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoDescribeRepoResponseBody> {
    return unwrapAsync(comAtprotoRepoComAtprotoRepoDescribeRepo(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get a single record from a repository. Does not require auth.
   */
  async comAtprotoRepoGetRecord(
    request: operations.ComAtprotoRepoGetRecordRequest,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoGetRecordResponseBody> {
    return unwrapAsync(comAtprotoRepoComAtprotoRepoGetRecord(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
   */
  async comAtprotoRepoImportRepo(
    request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(comAtprotoRepoComAtprotoRepoImportRepo(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
   */
  async comAtprotoRepoListMissingBlobs(
    request?: operations.ComAtprotoRepoListMissingBlobsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoListMissingBlobsResponseBody> {
    return unwrapAsync(comAtprotoRepoComAtprotoRepoListMissingBlobs(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * List a range of records in a repository, matching a specific collection. Does not require auth.
   */
  async comAtprotoRepoListRecords(
    request: operations.ComAtprotoRepoListRecordsRequest,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoListRecordsResponseBody> {
    return unwrapAsync(comAtprotoRepoComAtprotoRepoListRecords(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.
   */
  async comAtprotoRepoPutRecord(
    request: operations.ComAtprotoRepoPutRecordRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoPutRecordResponseBody> {
    return unwrapAsync(comAtprotoRepoComAtprotoRepoPutRecord(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
   */
  async comAtprotoRepoUploadBlob(
    request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoUploadBlobResponseBody> {
    return unwrapAsync(comAtprotoRepoComAtprotoRepoUploadBlob(
      this,
      request,
      options,
    ));
  }
}
