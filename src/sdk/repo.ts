/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atprotoRepoApplyWrites } from "../funcs/atprotoRepoApplyWrites.js";
import { atprotoRepoCreateRecord } from "../funcs/atprotoRepoCreateRecord.js";
import { atprotoRepoDeleteRecord } from "../funcs/atprotoRepoDeleteRecord.js";
import { atprotoRepoDescribeRepo } from "../funcs/atprotoRepoDescribeRepo.js";
import { atprotoRepoGetRecord } from "../funcs/atprotoRepoGetRecord.js";
import { atprotoRepoImportRepo } from "../funcs/atprotoRepoImportRepo.js";
import { atprotoRepoListMissingBlobs } from "../funcs/atprotoRepoListMissingBlobs.js";
import { atprotoRepoListRecords } from "../funcs/atprotoRepoListRecords.js";
import { atprotoRepoPutRecord } from "../funcs/atprotoRepoPutRecord.js";
import { atprotoRepoUploadBlob } from "../funcs/atprotoRepoUploadBlob.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Repo extends ClientSDK {
  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
   */
  async applyWrites(
    request: operations.ComAtprotoRepoApplyWritesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoApplyWritesResponseBody> {
    return unwrapAsync(atprotoRepoApplyWrites(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Create a single new repository record. Requires auth, implemented by PDS.
   */
  async createRecord(
    request: operations.ComAtprotoRepoCreateRecordRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoCreateRecordResponseBody> {
    return unwrapAsync(atprotoRepoCreateRecord(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.
   */
  async deleteRecord(
    request: operations.ComAtprotoRepoDeleteRecordRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoDeleteRecordResponseBody> {
    return unwrapAsync(atprotoRepoDeleteRecord(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get information about an account and repository, including the list of collections. Does not require auth.
   */
  async describeRepo(
    request: operations.ComAtprotoRepoDescribeRepoRequest,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoDescribeRepoResponseBody> {
    return unwrapAsync(atprotoRepoDescribeRepo(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get a single record from a repository. Does not require auth.
   */
  async getRecord(
    request: operations.ComAtprotoRepoGetRecordRequest,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoGetRecordResponseBody> {
    return unwrapAsync(atprotoRepoGetRecord(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
   */
  async importRepo(
    request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoRepoImportRepo(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
   */
  async listMissingBlobs(
    request?: operations.ComAtprotoRepoListMissingBlobsRequest | undefined,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.ComAtprotoRepoListMissingBlobsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(atprotoRepoListMissingBlobs(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * List a range of records in a repository, matching a specific collection. Does not require auth.
   */
  async listRecords(
    request: operations.ComAtprotoRepoListRecordsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.ComAtprotoRepoListRecordsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(atprotoRepoListRecords(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.
   */
  async putRecord(
    request: operations.ComAtprotoRepoPutRecordRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoPutRecordResponseBody> {
    return unwrapAsync(atprotoRepoPutRecord(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS repository management APIs. Requests usually require authentication (unlike the `com.atproto.sync.*` endpoints), and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
   */
  async uploadBlob(
    request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoRepoUploadBlobResponseBody> {
    return unwrapAsync(atprotoRepoUploadBlob(
      this,
      request,
      options,
    ));
  }
}
