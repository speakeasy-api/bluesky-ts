/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atprotoServerActivateAccount } from "../funcs/atprotoServerActivateAccount.js";
import { atprotoServerCheckAccountStatus } from "../funcs/atprotoServerCheckAccountStatus.js";
import { atprotoServerConfirmEmail } from "../funcs/atprotoServerConfirmEmail.js";
import { atprotoServerCreateAccount } from "../funcs/atprotoServerCreateAccount.js";
import { atprotoServerCreateAppPassword } from "../funcs/atprotoServerCreateAppPassword.js";
import { atprotoServerCreateInviteCode } from "../funcs/atprotoServerCreateInviteCode.js";
import { atprotoServerCreateInviteCodes } from "../funcs/atprotoServerCreateInviteCodes.js";
import { atprotoServerCreateSession } from "../funcs/atprotoServerCreateSession.js";
import { atprotoServerDeactivateAccount } from "../funcs/atprotoServerDeactivateAccount.js";
import { atprotoServerDeleteAccount } from "../funcs/atprotoServerDeleteAccount.js";
import { atprotoServerDeleteSession } from "../funcs/atprotoServerDeleteSession.js";
import { atprotoServerDescribeServer } from "../funcs/atprotoServerDescribeServer.js";
import { atprotoServerGetAccountInviteCodes } from "../funcs/atprotoServerGetAccountInviteCodes.js";
import { atprotoServerGetServiceAuth } from "../funcs/atprotoServerGetServiceAuth.js";
import { atprotoServerGetSession } from "../funcs/atprotoServerGetSession.js";
import { atprotoServerListAppPasswords } from "../funcs/atprotoServerListAppPasswords.js";
import { atprotoServerRefreshSession } from "../funcs/atprotoServerRefreshSession.js";
import { atprotoServerRequestAccountDelete } from "../funcs/atprotoServerRequestAccountDelete.js";
import { atprotoServerRequestEmailConfirmation } from "../funcs/atprotoServerRequestEmailConfirmation.js";
import { atprotoServerRequestEmailUpdate } from "../funcs/atprotoServerRequestEmailUpdate.js";
import { atprotoServerRequestPasswordReset } from "../funcs/atprotoServerRequestPasswordReset.js";
import { atprotoServerReserveSigningKey } from "../funcs/atprotoServerReserveSigningKey.js";
import { atprotoServerResetPassword } from "../funcs/atprotoServerResetPassword.js";
import { atprotoServerRevokeAppPassword } from "../funcs/atprotoServerRevokeAppPassword.js";
import { atprotoServerUpdateEmail } from "../funcs/atprotoServerUpdateEmail.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Server extends ClientSDK {
  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup.
   */
  async activateAccount(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoServerActivateAccount(
      this,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
   */
  async checkAccountStatus(
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerCheckAccountStatusResponseBody> {
    return unwrapAsync(atprotoServerCheckAccountStatus(
      this,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Confirm an email using a token from com.atproto.server.requestEmailConfirmation.
   */
  async confirmEmail(
    request: operations.ComAtprotoServerConfirmEmailRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoServerConfirmEmail(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Create an account. Implemented by PDS.
   */
  async createAccount(
    request: operations.ComAtprotoServerCreateAccountRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerCreateAccountResponseBody> {
    return unwrapAsync(atprotoServerCreateAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Create an App Password.
   */
  async createAppPassword(
    request: operations.ComAtprotoServerCreateAppPasswordRequestBody,
    options?: RequestOptions,
  ): Promise<components.ComAtprotoServerCreateAppPasswordAppPassword> {
    return unwrapAsync(atprotoServerCreateAppPassword(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Create an invite code.
   */
  async createInviteCode(
    request: operations.ComAtprotoServerCreateInviteCodeRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerCreateInviteCodeResponseBody> {
    return unwrapAsync(atprotoServerCreateInviteCode(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Create invite codes.
   */
  async createInviteCodes(
    request: operations.ComAtprotoServerCreateInviteCodesRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerCreateInviteCodesResponseBody> {
    return unwrapAsync(atprotoServerCreateInviteCodes(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Create an authentication session.
   */
  async createSession(
    request: operations.ComAtprotoServerCreateSessionRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerCreateSessionResponseBody> {
    return unwrapAsync(atprotoServerCreateSession(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
   */
  async deactivateAccount(
    request?:
      | operations.ComAtprotoServerDeactivateAccountRequestBody
      | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoServerDeactivateAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.
   */
  async deleteAccount(
    request: operations.ComAtprotoServerDeleteAccountRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoServerDeleteAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Delete the current session. Requires auth.
   */
  async deleteSession(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoServerDeleteSession(
      this,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Describes the server's account creation requirements and capabilities. Implemented by PDS.
   */
  async describeServer(
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerDescribeServerResponseBody> {
    return unwrapAsync(atprotoServerDescribeServer(
      this,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get all invite codes for the current account. Requires auth.
   */
  async getAccountInviteCodes(
    request?:
      | operations.ComAtprotoServerGetAccountInviteCodesRequest
      | undefined,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerGetAccountInviteCodesResponseBody> {
    return unwrapAsync(atprotoServerGetAccountInviteCodes(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get a signed token on behalf of the requesting DID for the requested service.
   */
  async getServiceAuth(
    request: operations.ComAtprotoServerGetServiceAuthRequest,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerGetServiceAuthResponseBody> {
    return unwrapAsync(atprotoServerGetServiceAuth(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Get information about the current auth session. Requires auth.
   */
  async getSession(
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerGetSessionResponseBody> {
    return unwrapAsync(atprotoServerGetSession(
      this,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * List all App Passwords.
   */
  async listAppPasswords(
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerListAppPasswordsResponseBody> {
    return unwrapAsync(atprotoServerListAppPasswords(
      this,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').
   */
  async refreshSession(
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerRefreshSessionResponseBody> {
    return unwrapAsync(atprotoServerRefreshSession(
      this,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Initiate a user account deletion via email.
   */
  async requestAccountDelete(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoServerRequestAccountDelete(
      this,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Request an email with a code to confirm ownership of email.
   */
  async requestEmailConfirmation(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoServerRequestEmailConfirmation(
      this,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Request a token in order to update email.
   */
  async requestEmailUpdate(
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerRequestEmailUpdateResponseBody> {
    return unwrapAsync(atprotoServerRequestEmailUpdate(
      this,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Initiate a user account password reset via email.
   */
  async requestPasswordReset(
    request: operations.ComAtprotoServerRequestPasswordResetRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoServerRequestPasswordReset(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.
   */
  async reserveSigningKey(
    request?:
      | operations.ComAtprotoServerReserveSigningKeyRequestBody
      | undefined,
    options?: RequestOptions,
  ): Promise<operations.ComAtprotoServerReserveSigningKeyResponseBody> {
    return unwrapAsync(atprotoServerReserveSigningKey(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Reset a user account password using a token.
   */
  async resetPassword(
    request: operations.ComAtprotoServerResetPasswordRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoServerResetPassword(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Revoke an App Password by name.
   */
  async revokeAppPassword(
    request: operations.ComAtprotoServerRevokeAppPasswordRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoServerRevokeAppPassword(
      this,
      request,
      options,
    ));
  }

  /**
   * *This endpoint is part of the atproto PDS server and account management APIs. Requests often require authentication and are made directly to the user's own PDS instance.*
   *
   * *To learn more about calling atproto API endpoints like this one, see the [API Hosts and Auth](/docs/advanced-guides/api-directory) guide.*
   *
   * Update an account's email.
   */
  async updateEmail(
    request: operations.ComAtprotoServerUpdateEmailRequestBody,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(atprotoServerUpdateEmail(
      this,
      request,
      options,
    ));
  }
}
