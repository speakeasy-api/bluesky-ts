/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoSyncGetBlobAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoSyncGetBlobAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoSyncGetBlobAuthMissingErrorData;

  constructor(
    err: ComAtprotoSyncGetBlobAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoSyncGetBlobAuthMissingError";
  }
}

export const ComAtprotoSyncGetBlobError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  BlobNotFound: "BlobNotFound",
  RepoNotFound: "RepoNotFound",
  RepoTakendown: "RepoTakendown",
  RepoSuspended: "RepoSuspended",
  RepoDeactivated: "RepoDeactivated",
} as const;
export type ComAtprotoSyncGetBlobError = ClosedEnum<
  typeof ComAtprotoSyncGetBlobError
>;

/**
 * Bad Request
 */
export type ComAtprotoSyncGetBlobBadRequestErrorData = {
  error: ComAtprotoSyncGetBlobError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoSyncGetBlobBadRequestError extends BlueskyError {
  error: ComAtprotoSyncGetBlobError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoSyncGetBlobBadRequestErrorData;

  constructor(
    err: ComAtprotoSyncGetBlobBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoSyncGetBlobBadRequestError";
  }
}

/** @internal */
export const ComAtprotoSyncGetBlobAuthMissingError$inboundSchema: z.ZodType<
  ComAtprotoSyncGetBlobAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoSyncGetBlobAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoSyncGetBlobAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoSyncGetBlobAuthMissingError$outboundSchema: z.ZodType<
  ComAtprotoSyncGetBlobAuthMissingError$Outbound,
  z.ZodTypeDef,
  ComAtprotoSyncGetBlobAuthMissingError
> = z.instanceof(ComAtprotoSyncGetBlobAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetBlobAuthMissingError$ {
  /** @deprecated use `ComAtprotoSyncGetBlobAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoSyncGetBlobAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetBlobAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoSyncGetBlobAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoSyncGetBlobAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoSyncGetBlobAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoSyncGetBlobError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncGetBlobError
> = z.nativeEnum(ComAtprotoSyncGetBlobError);

/** @internal */
export const ComAtprotoSyncGetBlobError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncGetBlobError
> = ComAtprotoSyncGetBlobError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetBlobError$ {
  /** @deprecated use `ComAtprotoSyncGetBlobError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoSyncGetBlobError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetBlobError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoSyncGetBlobError$outboundSchema;
}

/** @internal */
export const ComAtprotoSyncGetBlobBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoSyncGetBlobBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoSyncGetBlobError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoSyncGetBlobBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoSyncGetBlobBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoSyncGetBlobBadRequestError$outboundSchema: z.ZodType<
  ComAtprotoSyncGetBlobBadRequestError$Outbound,
  z.ZodTypeDef,
  ComAtprotoSyncGetBlobBadRequestError
> = z.instanceof(ComAtprotoSyncGetBlobBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoSyncGetBlobError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetBlobBadRequestError$ {
  /** @deprecated use `ComAtprotoSyncGetBlobBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoSyncGetBlobBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetBlobBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoSyncGetBlobBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoSyncGetBlobBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoSyncGetBlobBadRequestError$Outbound;
}
