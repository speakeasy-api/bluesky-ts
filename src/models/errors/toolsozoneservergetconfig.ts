/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneServerGetConfigAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneServerGetConfigAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneServerGetConfigAuthMissingErrorData;

  constructor(
    err: ToolsOzoneServerGetConfigAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneServerGetConfigAuthMissingError";
  }
}

export const ToolsOzoneServerGetConfigError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneServerGetConfigError = ClosedEnum<
  typeof ToolsOzoneServerGetConfigError
>;

/**
 * Bad Request
 */
export type ToolsOzoneServerGetConfigBadRequestErrorData = {
  error: ToolsOzoneServerGetConfigError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneServerGetConfigBadRequestError extends BlueskyError {
  error: ToolsOzoneServerGetConfigError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneServerGetConfigBadRequestErrorData;

  constructor(
    err: ToolsOzoneServerGetConfigBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneServerGetConfigBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneServerGetConfigAuthMissingError$inboundSchema: z.ZodType<
  ToolsOzoneServerGetConfigAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneServerGetConfigAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneServerGetConfigAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneServerGetConfigAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneServerGetConfigAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneServerGetConfigAuthMissingError
  > = z.instanceof(ToolsOzoneServerGetConfigAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneServerGetConfigAuthMissingError$ {
  /** @deprecated use `ToolsOzoneServerGetConfigAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneServerGetConfigAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneServerGetConfigAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneServerGetConfigAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneServerGetConfigAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneServerGetConfigAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneServerGetConfigError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneServerGetConfigError
> = z.nativeEnum(ToolsOzoneServerGetConfigError);

/** @internal */
export const ToolsOzoneServerGetConfigError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneServerGetConfigError
> = ToolsOzoneServerGetConfigError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneServerGetConfigError$ {
  /** @deprecated use `ToolsOzoneServerGetConfigError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneServerGetConfigError$inboundSchema;
  /** @deprecated use `ToolsOzoneServerGetConfigError$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneServerGetConfigError$outboundSchema;
}

/** @internal */
export const ToolsOzoneServerGetConfigBadRequestError$inboundSchema: z.ZodType<
  ToolsOzoneServerGetConfigBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ToolsOzoneServerGetConfigError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneServerGetConfigBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneServerGetConfigBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneServerGetConfigBadRequestError$outboundSchema: z.ZodType<
  ToolsOzoneServerGetConfigBadRequestError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneServerGetConfigBadRequestError
> = z.instanceof(ToolsOzoneServerGetConfigBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ToolsOzoneServerGetConfigError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneServerGetConfigBadRequestError$ {
  /** @deprecated use `ToolsOzoneServerGetConfigBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneServerGetConfigBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneServerGetConfigBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneServerGetConfigBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneServerGetConfigBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneServerGetConfigBadRequestError$Outbound;
}
