/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyModerationUpdateActorAccessAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyModerationUpdateActorAccessAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyModerationUpdateActorAccessAuthMissingErrorData;

  constructor(
    err: ChatBskyModerationUpdateActorAccessAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyModerationUpdateActorAccessAuthMissingError";
  }
}

export const ChatBskyModerationUpdateActorAccessError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyModerationUpdateActorAccessError = ClosedEnum<
  typeof ChatBskyModerationUpdateActorAccessError
>;

/**
 * Bad Request
 */
export type ChatBskyModerationUpdateActorAccessBadRequestErrorData = {
  error: ChatBskyModerationUpdateActorAccessError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyModerationUpdateActorAccessBadRequestError
  extends BlueskyError
{
  error: ChatBskyModerationUpdateActorAccessError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyModerationUpdateActorAccessBadRequestErrorData;

  constructor(
    err: ChatBskyModerationUpdateActorAccessBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyModerationUpdateActorAccessBadRequestError";
  }
}

/** @internal */
export const ChatBskyModerationUpdateActorAccessAuthMissingError$inboundSchema:
  z.ZodType<
    ChatBskyModerationUpdateActorAccessAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ChatBskyModerationUpdateActorAccessAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ChatBskyModerationUpdateActorAccessAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyModerationUpdateActorAccessAuthMissingError$outboundSchema:
  z.ZodType<
    ChatBskyModerationUpdateActorAccessAuthMissingError$Outbound,
    z.ZodTypeDef,
    ChatBskyModerationUpdateActorAccessAuthMissingError
  > = z.instanceof(ChatBskyModerationUpdateActorAccessAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyModerationUpdateActorAccessAuthMissingError$ {
  /** @deprecated use `ChatBskyModerationUpdateActorAccessAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyModerationUpdateActorAccessAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyModerationUpdateActorAccessAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyModerationUpdateActorAccessAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyModerationUpdateActorAccessAuthMissingError$Outbound` instead. */
  export type Outbound =
    ChatBskyModerationUpdateActorAccessAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyModerationUpdateActorAccessError$inboundSchema:
  z.ZodNativeEnum<typeof ChatBskyModerationUpdateActorAccessError> = z
    .nativeEnum(ChatBskyModerationUpdateActorAccessError);

/** @internal */
export const ChatBskyModerationUpdateActorAccessError$outboundSchema:
  z.ZodNativeEnum<typeof ChatBskyModerationUpdateActorAccessError> =
    ChatBskyModerationUpdateActorAccessError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyModerationUpdateActorAccessError$ {
  /** @deprecated use `ChatBskyModerationUpdateActorAccessError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyModerationUpdateActorAccessError$inboundSchema;
  /** @deprecated use `ChatBskyModerationUpdateActorAccessError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyModerationUpdateActorAccessError$outboundSchema;
}

/** @internal */
export const ChatBskyModerationUpdateActorAccessBadRequestError$inboundSchema:
  z.ZodType<
    ChatBskyModerationUpdateActorAccessBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ChatBskyModerationUpdateActorAccessError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ChatBskyModerationUpdateActorAccessBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ChatBskyModerationUpdateActorAccessBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyModerationUpdateActorAccessBadRequestError$outboundSchema:
  z.ZodType<
    ChatBskyModerationUpdateActorAccessBadRequestError$Outbound,
    z.ZodTypeDef,
    ChatBskyModerationUpdateActorAccessBadRequestError
  > = z.instanceof(ChatBskyModerationUpdateActorAccessBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ChatBskyModerationUpdateActorAccessError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyModerationUpdateActorAccessBadRequestError$ {
  /** @deprecated use `ChatBskyModerationUpdateActorAccessBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyModerationUpdateActorAccessBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyModerationUpdateActorAccessBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyModerationUpdateActorAccessBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyModerationUpdateActorAccessBadRequestError$Outbound` instead. */
  export type Outbound =
    ChatBskyModerationUpdateActorAccessBadRequestError$Outbound;
}
