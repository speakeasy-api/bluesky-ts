/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ComAtprotoAdminSendEmailAtprotoAdminResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoAdminSendEmailAtprotoAdminResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoAdminSendEmailAtprotoAdminResponseBodyData;

  constructor(err: ComAtprotoAdminSendEmailAtprotoAdminResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ComAtprotoAdminSendEmailAtprotoAdminResponseBody";
  }
}

export const ComAtprotoAdminSendEmailError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoAdminSendEmailError = ClosedEnum<
  typeof ComAtprotoAdminSendEmailError
>;

/**
 * Bad Request
 */
export type ComAtprotoAdminSendEmailResponseBodyData = {
  error: ComAtprotoAdminSendEmailError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoAdminSendEmailResponseBody extends Error {
  error: ComAtprotoAdminSendEmailError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoAdminSendEmailResponseBodyData;

  constructor(err: ComAtprotoAdminSendEmailResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ComAtprotoAdminSendEmailResponseBody";
  }
}

/** @internal */
export const ComAtprotoAdminSendEmailAtprotoAdminResponseBody$inboundSchema:
  z.ZodType<
    ComAtprotoAdminSendEmailAtprotoAdminResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoAdminSendEmailAtprotoAdminResponseBody(v);
    });

/** @internal */
export type ComAtprotoAdminSendEmailAtprotoAdminResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoAdminSendEmailAtprotoAdminResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoAdminSendEmailAtprotoAdminResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoAdminSendEmailAtprotoAdminResponseBody
  > = z.instanceof(ComAtprotoAdminSendEmailAtprotoAdminResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoAdminSendEmailAtprotoAdminResponseBody$ {
  /** @deprecated use `ComAtprotoAdminSendEmailAtprotoAdminResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoAdminSendEmailAtprotoAdminResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoAdminSendEmailAtprotoAdminResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoAdminSendEmailAtprotoAdminResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoAdminSendEmailAtprotoAdminResponseBody$Outbound` instead. */
  export type Outbound =
    ComAtprotoAdminSendEmailAtprotoAdminResponseBody$Outbound;
}

/** @internal */
export const ComAtprotoAdminSendEmailError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoAdminSendEmailError
> = z.nativeEnum(ComAtprotoAdminSendEmailError);

/** @internal */
export const ComAtprotoAdminSendEmailError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoAdminSendEmailError
> = ComAtprotoAdminSendEmailError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoAdminSendEmailError$ {
  /** @deprecated use `ComAtprotoAdminSendEmailError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoAdminSendEmailError$inboundSchema;
  /** @deprecated use `ComAtprotoAdminSendEmailError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoAdminSendEmailError$outboundSchema;
}

/** @internal */
export const ComAtprotoAdminSendEmailResponseBody$inboundSchema: z.ZodType<
  ComAtprotoAdminSendEmailResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoAdminSendEmailError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ComAtprotoAdminSendEmailResponseBody(v);
  });

/** @internal */
export type ComAtprotoAdminSendEmailResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoAdminSendEmailResponseBody$outboundSchema: z.ZodType<
  ComAtprotoAdminSendEmailResponseBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoAdminSendEmailResponseBody
> = z.instanceof(ComAtprotoAdminSendEmailResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoAdminSendEmailError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoAdminSendEmailResponseBody$ {
  /** @deprecated use `ComAtprotoAdminSendEmailResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoAdminSendEmailResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoAdminSendEmailResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoAdminSendEmailResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoAdminSendEmailResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoAdminSendEmailResponseBody$Outbound;
}
