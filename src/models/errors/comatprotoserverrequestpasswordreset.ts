/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoServerRequestPasswordResetAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoServerRequestPasswordResetAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerRequestPasswordResetAuthMissingErrorData;

  constructor(
    err: ComAtprotoServerRequestPasswordResetAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerRequestPasswordResetAuthMissingError";
  }
}

export const ComAtprotoServerRequestPasswordResetError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoServerRequestPasswordResetError = ClosedEnum<
  typeof ComAtprotoServerRequestPasswordResetError
>;

/**
 * Bad Request
 */
export type ComAtprotoServerRequestPasswordResetBadRequestErrorData = {
  error: ComAtprotoServerRequestPasswordResetError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoServerRequestPasswordResetBadRequestError
  extends BlueskyError
{
  error: ComAtprotoServerRequestPasswordResetError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerRequestPasswordResetBadRequestErrorData;

  constructor(
    err: ComAtprotoServerRequestPasswordResetBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerRequestPasswordResetBadRequestError";
  }
}

/** @internal */
export const ComAtprotoServerRequestPasswordResetAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoServerRequestPasswordResetAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerRequestPasswordResetAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerRequestPasswordResetAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoServerRequestPasswordResetAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoServerRequestPasswordResetAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerRequestPasswordResetAuthMissingError
  > = z.instanceof(ComAtprotoServerRequestPasswordResetAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerRequestPasswordResetAuthMissingError$ {
  /** @deprecated use `ComAtprotoServerRequestPasswordResetAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerRequestPasswordResetAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoServerRequestPasswordResetAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerRequestPasswordResetAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoServerRequestPasswordResetAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerRequestPasswordResetAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoServerRequestPasswordResetError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerRequestPasswordResetError> = z
    .nativeEnum(ComAtprotoServerRequestPasswordResetError);

/** @internal */
export const ComAtprotoServerRequestPasswordResetError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerRequestPasswordResetError> =
    ComAtprotoServerRequestPasswordResetError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerRequestPasswordResetError$ {
  /** @deprecated use `ComAtprotoServerRequestPasswordResetError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerRequestPasswordResetError$inboundSchema;
  /** @deprecated use `ComAtprotoServerRequestPasswordResetError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerRequestPasswordResetError$outboundSchema;
}

/** @internal */
export const ComAtprotoServerRequestPasswordResetBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoServerRequestPasswordResetBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoServerRequestPasswordResetError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerRequestPasswordResetBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerRequestPasswordResetBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoServerRequestPasswordResetBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoServerRequestPasswordResetBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerRequestPasswordResetBadRequestError
  > = z.instanceof(ComAtprotoServerRequestPasswordResetBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoServerRequestPasswordResetError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerRequestPasswordResetBadRequestError$ {
  /** @deprecated use `ComAtprotoServerRequestPasswordResetBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerRequestPasswordResetBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoServerRequestPasswordResetBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerRequestPasswordResetBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoServerRequestPasswordResetBadRequestError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerRequestPasswordResetBadRequestError$Outbound;
}
