/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoUpdateReadAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoUpdateReadAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoUpdateReadAuthMissingErrorData;

  constructor(
    err: ChatBskyConvoUpdateReadAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoUpdateReadAuthMissingError";
  }
}

export const ChatBskyConvoUpdateReadError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoUpdateReadError = ClosedEnum<
  typeof ChatBskyConvoUpdateReadError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoUpdateReadBadRequestErrorData = {
  error: ChatBskyConvoUpdateReadError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoUpdateReadBadRequestError extends BlueskyError {
  error: ChatBskyConvoUpdateReadError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoUpdateReadBadRequestErrorData;

  constructor(
    err: ChatBskyConvoUpdateReadBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoUpdateReadBadRequestError";
  }
}

/** @internal */
export const ChatBskyConvoUpdateReadAuthMissingError$inboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoUpdateReadAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoUpdateReadAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoUpdateReadAuthMissingError$outboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadAuthMissingError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUpdateReadAuthMissingError
> = z.instanceof(ChatBskyConvoUpdateReadAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUpdateReadAuthMissingError$ {
  /** @deprecated use `ChatBskyConvoUpdateReadAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoUpdateReadAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoUpdateReadAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadAuthMissingError$Outbound` instead. */
  export type Outbound = ChatBskyConvoUpdateReadAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyConvoUpdateReadError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoUpdateReadError
> = z.nativeEnum(ChatBskyConvoUpdateReadError);

/** @internal */
export const ChatBskyConvoUpdateReadError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoUpdateReadError
> = ChatBskyConvoUpdateReadError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUpdateReadError$ {
  /** @deprecated use `ChatBskyConvoUpdateReadError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoUpdateReadError$inboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoUpdateReadError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoUpdateReadBadRequestError$inboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoUpdateReadError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoUpdateReadBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoUpdateReadBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoUpdateReadBadRequestError$outboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadBadRequestError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUpdateReadBadRequestError
> = z.instanceof(ChatBskyConvoUpdateReadBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoUpdateReadError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUpdateReadBadRequestError$ {
  /** @deprecated use `ChatBskyConvoUpdateReadBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoUpdateReadBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoUpdateReadBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadBadRequestError$Outbound` instead. */
  export type Outbound = ChatBskyConvoUpdateReadBadRequestError$Outbound;
}
