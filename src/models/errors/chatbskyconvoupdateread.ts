/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoUpdateReadChatBskyConvoResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoUpdateReadChatBskyConvoResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoUpdateReadChatBskyConvoResponseBodyData;

  constructor(err: ChatBskyConvoUpdateReadChatBskyConvoResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoUpdateReadChatBskyConvoResponseBody";
  }
}

export const ChatBskyConvoUpdateReadError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoUpdateReadError = ClosedEnum<
  typeof ChatBskyConvoUpdateReadError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoUpdateReadResponseBodyData = {
  error: ChatBskyConvoUpdateReadError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoUpdateReadResponseBody extends Error {
  error: ChatBskyConvoUpdateReadError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoUpdateReadResponseBodyData;

  constructor(err: ChatBskyConvoUpdateReadResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoUpdateReadResponseBody";
  }
}

/** @internal */
export const ChatBskyConvoUpdateReadChatBskyConvoResponseBody$inboundSchema:
  z.ZodType<
    ChatBskyConvoUpdateReadChatBskyConvoResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ChatBskyConvoUpdateReadChatBskyConvoResponseBody(v);
    });

/** @internal */
export type ChatBskyConvoUpdateReadChatBskyConvoResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoUpdateReadChatBskyConvoResponseBody$outboundSchema:
  z.ZodType<
    ChatBskyConvoUpdateReadChatBskyConvoResponseBody$Outbound,
    z.ZodTypeDef,
    ChatBskyConvoUpdateReadChatBskyConvoResponseBody
  > = z.instanceof(ChatBskyConvoUpdateReadChatBskyConvoResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUpdateReadChatBskyConvoResponseBody$ {
  /** @deprecated use `ChatBskyConvoUpdateReadChatBskyConvoResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoUpdateReadChatBskyConvoResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadChatBskyConvoResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoUpdateReadChatBskyConvoResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadChatBskyConvoResponseBody$Outbound` instead. */
  export type Outbound =
    ChatBskyConvoUpdateReadChatBskyConvoResponseBody$Outbound;
}

/** @internal */
export const ChatBskyConvoUpdateReadError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoUpdateReadError
> = z.nativeEnum(ChatBskyConvoUpdateReadError);

/** @internal */
export const ChatBskyConvoUpdateReadError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoUpdateReadError
> = ChatBskyConvoUpdateReadError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUpdateReadError$ {
  /** @deprecated use `ChatBskyConvoUpdateReadError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoUpdateReadError$inboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoUpdateReadError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoUpdateReadResponseBody$inboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoUpdateReadError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoUpdateReadResponseBody(v);
  });

/** @internal */
export type ChatBskyConvoUpdateReadResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoUpdateReadResponseBody$outboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadResponseBody$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUpdateReadResponseBody
> = z.instanceof(ChatBskyConvoUpdateReadResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoUpdateReadError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUpdateReadResponseBody$ {
  /** @deprecated use `ChatBskyConvoUpdateReadResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoUpdateReadResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoUpdateReadResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoUpdateReadResponseBody$Outbound;
}
