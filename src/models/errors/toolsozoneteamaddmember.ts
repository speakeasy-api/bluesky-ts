/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ToolsOzoneTeamAddMemberOzoneResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneTeamAddMemberOzoneResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneTeamAddMemberOzoneResponseBodyData;

  constructor(err: ToolsOzoneTeamAddMemberOzoneResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ToolsOzoneTeamAddMemberOzoneResponseBody";
  }
}

export const ToolsOzoneTeamAddMemberError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  MemberAlreadyExists: "MemberAlreadyExists",
} as const;
export type ToolsOzoneTeamAddMemberError = ClosedEnum<
  typeof ToolsOzoneTeamAddMemberError
>;

/**
 * Bad Request
 */
export type ToolsOzoneTeamAddMemberResponseBodyData = {
  error: ToolsOzoneTeamAddMemberError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneTeamAddMemberResponseBody extends Error {
  error: ToolsOzoneTeamAddMemberError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneTeamAddMemberResponseBodyData;

  constructor(err: ToolsOzoneTeamAddMemberResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ToolsOzoneTeamAddMemberResponseBody";
  }
}

/** @internal */
export const ToolsOzoneTeamAddMemberOzoneResponseBody$inboundSchema: z.ZodType<
  ToolsOzoneTeamAddMemberOzoneResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing"),
  message: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneTeamAddMemberOzoneResponseBody(v);
  });

/** @internal */
export type ToolsOzoneTeamAddMemberOzoneResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneTeamAddMemberOzoneResponseBody$outboundSchema: z.ZodType<
  ToolsOzoneTeamAddMemberOzoneResponseBody$Outbound,
  z.ZodTypeDef,
  ToolsOzoneTeamAddMemberOzoneResponseBody
> = z.instanceof(ToolsOzoneTeamAddMemberOzoneResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneTeamAddMemberOzoneResponseBody$ {
  /** @deprecated use `ToolsOzoneTeamAddMemberOzoneResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneTeamAddMemberOzoneResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneTeamAddMemberOzoneResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneTeamAddMemberOzoneResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneTeamAddMemberOzoneResponseBody$Outbound` instead. */
  export type Outbound = ToolsOzoneTeamAddMemberOzoneResponseBody$Outbound;
}

/** @internal */
export const ToolsOzoneTeamAddMemberError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneTeamAddMemberError
> = z.nativeEnum(ToolsOzoneTeamAddMemberError);

/** @internal */
export const ToolsOzoneTeamAddMemberError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneTeamAddMemberError
> = ToolsOzoneTeamAddMemberError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneTeamAddMemberError$ {
  /** @deprecated use `ToolsOzoneTeamAddMemberError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneTeamAddMemberError$inboundSchema;
  /** @deprecated use `ToolsOzoneTeamAddMemberError$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneTeamAddMemberError$outboundSchema;
}

/** @internal */
export const ToolsOzoneTeamAddMemberResponseBody$inboundSchema: z.ZodType<
  ToolsOzoneTeamAddMemberResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ToolsOzoneTeamAddMemberError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneTeamAddMemberResponseBody(v);
  });

/** @internal */
export type ToolsOzoneTeamAddMemberResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneTeamAddMemberResponseBody$outboundSchema: z.ZodType<
  ToolsOzoneTeamAddMemberResponseBody$Outbound,
  z.ZodTypeDef,
  ToolsOzoneTeamAddMemberResponseBody
> = z.instanceof(ToolsOzoneTeamAddMemberResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ToolsOzoneTeamAddMemberError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneTeamAddMemberResponseBody$ {
  /** @deprecated use `ToolsOzoneTeamAddMemberResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneTeamAddMemberResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneTeamAddMemberResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneTeamAddMemberResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneTeamAddMemberResponseBody$Outbound` instead. */
  export type Outbound = ToolsOzoneTeamAddMemberResponseBody$Outbound;
}
