/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSetAddValuesAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSetAddValuesAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetAddValuesAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSetAddValuesAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetAddValuesAuthMissingError";
  }
}

export const ToolsOzoneSetAddValuesError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSetAddValuesError = ClosedEnum<
  typeof ToolsOzoneSetAddValuesError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSetAddValuesBadRequestErrorData = {
  error: ToolsOzoneSetAddValuesError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSetAddValuesBadRequestError extends BlueskyError {
  error: ToolsOzoneSetAddValuesError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetAddValuesBadRequestErrorData;

  constructor(
    err: ToolsOzoneSetAddValuesBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetAddValuesBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSetAddValuesAuthMissingError$inboundSchema: z.ZodType<
  ToolsOzoneSetAddValuesAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetAddValuesAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetAddValuesAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSetAddValuesAuthMissingError$outboundSchema: z.ZodType<
  ToolsOzoneSetAddValuesAuthMissingError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSetAddValuesAuthMissingError
> = z.instanceof(ToolsOzoneSetAddValuesAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetAddValuesAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSetAddValuesAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetAddValuesAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetAddValuesAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetAddValuesAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetAddValuesAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetAddValuesAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSetAddValuesError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetAddValuesError
> = z.nativeEnum(ToolsOzoneSetAddValuesError);

/** @internal */
export const ToolsOzoneSetAddValuesError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetAddValuesError
> = ToolsOzoneSetAddValuesError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetAddValuesError$ {
  /** @deprecated use `ToolsOzoneSetAddValuesError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSetAddValuesError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetAddValuesError$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneSetAddValuesError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSetAddValuesBadRequestError$inboundSchema: z.ZodType<
  ToolsOzoneSetAddValuesBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ToolsOzoneSetAddValuesError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetAddValuesBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetAddValuesBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSetAddValuesBadRequestError$outboundSchema: z.ZodType<
  ToolsOzoneSetAddValuesBadRequestError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSetAddValuesBadRequestError
> = z.instanceof(ToolsOzoneSetAddValuesBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ToolsOzoneSetAddValuesError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetAddValuesBadRequestError$ {
  /** @deprecated use `ToolsOzoneSetAddValuesBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetAddValuesBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetAddValuesBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetAddValuesBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetAddValuesBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetAddValuesBadRequestError$Outbound;
}
