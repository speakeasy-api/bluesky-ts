/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyModerationGetMessageContextAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyModerationGetMessageContextAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyModerationGetMessageContextAuthMissingErrorData;

  constructor(
    err: ChatBskyModerationGetMessageContextAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyModerationGetMessageContextAuthMissingError";
  }
}

export const ChatBskyModerationGetMessageContextError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyModerationGetMessageContextError = ClosedEnum<
  typeof ChatBskyModerationGetMessageContextError
>;

/**
 * Bad Request
 */
export type ChatBskyModerationGetMessageContextBadRequestErrorData = {
  error: ChatBskyModerationGetMessageContextError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyModerationGetMessageContextBadRequestError
  extends BlueskyError
{
  error: ChatBskyModerationGetMessageContextError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyModerationGetMessageContextBadRequestErrorData;

  constructor(
    err: ChatBskyModerationGetMessageContextBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyModerationGetMessageContextBadRequestError";
  }
}

/** @internal */
export const ChatBskyModerationGetMessageContextAuthMissingError$inboundSchema:
  z.ZodType<
    ChatBskyModerationGetMessageContextAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ChatBskyModerationGetMessageContextAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ChatBskyModerationGetMessageContextAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyModerationGetMessageContextAuthMissingError$outboundSchema:
  z.ZodType<
    ChatBskyModerationGetMessageContextAuthMissingError$Outbound,
    z.ZodTypeDef,
    ChatBskyModerationGetMessageContextAuthMissingError
  > = z.instanceof(ChatBskyModerationGetMessageContextAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyModerationGetMessageContextAuthMissingError$ {
  /** @deprecated use `ChatBskyModerationGetMessageContextAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyModerationGetMessageContextAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyModerationGetMessageContextAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyModerationGetMessageContextAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyModerationGetMessageContextAuthMissingError$Outbound` instead. */
  export type Outbound =
    ChatBskyModerationGetMessageContextAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyModerationGetMessageContextError$inboundSchema:
  z.ZodNativeEnum<typeof ChatBskyModerationGetMessageContextError> = z
    .nativeEnum(ChatBskyModerationGetMessageContextError);

/** @internal */
export const ChatBskyModerationGetMessageContextError$outboundSchema:
  z.ZodNativeEnum<typeof ChatBskyModerationGetMessageContextError> =
    ChatBskyModerationGetMessageContextError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyModerationGetMessageContextError$ {
  /** @deprecated use `ChatBskyModerationGetMessageContextError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyModerationGetMessageContextError$inboundSchema;
  /** @deprecated use `ChatBskyModerationGetMessageContextError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyModerationGetMessageContextError$outboundSchema;
}

/** @internal */
export const ChatBskyModerationGetMessageContextBadRequestError$inboundSchema:
  z.ZodType<
    ChatBskyModerationGetMessageContextBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ChatBskyModerationGetMessageContextError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ChatBskyModerationGetMessageContextBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ChatBskyModerationGetMessageContextBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyModerationGetMessageContextBadRequestError$outboundSchema:
  z.ZodType<
    ChatBskyModerationGetMessageContextBadRequestError$Outbound,
    z.ZodTypeDef,
    ChatBskyModerationGetMessageContextBadRequestError
  > = z.instanceof(ChatBskyModerationGetMessageContextBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ChatBskyModerationGetMessageContextError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyModerationGetMessageContextBadRequestError$ {
  /** @deprecated use `ChatBskyModerationGetMessageContextBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyModerationGetMessageContextBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyModerationGetMessageContextBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyModerationGetMessageContextBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyModerationGetMessageContextBadRequestError$Outbound` instead. */
  export type Outbound =
    ChatBskyModerationGetMessageContextBadRequestError$Outbound;
}
