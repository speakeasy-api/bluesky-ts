/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSettingListOptionsAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSettingListOptionsAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSettingListOptionsAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSettingListOptionsAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSettingListOptionsAuthMissingError";
  }
}

export const ToolsOzoneSettingListOptionsError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSettingListOptionsError = ClosedEnum<
  typeof ToolsOzoneSettingListOptionsError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSettingListOptionsBadRequestErrorData = {
  error: ToolsOzoneSettingListOptionsError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSettingListOptionsBadRequestError extends BlueskyError {
  error: ToolsOzoneSettingListOptionsError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSettingListOptionsBadRequestErrorData;

  constructor(
    err: ToolsOzoneSettingListOptionsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSettingListOptionsBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSettingListOptionsAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneSettingListOptionsAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSettingListOptionsAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSettingListOptionsAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSettingListOptionsAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneSettingListOptionsAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSettingListOptionsAuthMissingError
  > = z.instanceof(ToolsOzoneSettingListOptionsAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingListOptionsAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSettingListOptionsAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSettingListOptionsAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingListOptionsAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingListOptionsAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSettingListOptionsAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneSettingListOptionsAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSettingListOptionsError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSettingListOptionsError
> = z.nativeEnum(ToolsOzoneSettingListOptionsError);

/** @internal */
export const ToolsOzoneSettingListOptionsError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSettingListOptionsError
> = ToolsOzoneSettingListOptionsError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingListOptionsError$ {
  /** @deprecated use `ToolsOzoneSettingListOptionsError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSettingListOptionsError$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingListOptionsError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingListOptionsError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSettingListOptionsBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneSettingListOptionsBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneSettingListOptionsError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSettingListOptionsBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSettingListOptionsBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSettingListOptionsBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneSettingListOptionsBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSettingListOptionsBadRequestError
  > = z.instanceof(ToolsOzoneSettingListOptionsBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneSettingListOptionsError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingListOptionsBadRequestError$ {
  /** @deprecated use `ToolsOzoneSettingListOptionsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSettingListOptionsBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingListOptionsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingListOptionsBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSettingListOptionsBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneSettingListOptionsBadRequestError$Outbound;
}
