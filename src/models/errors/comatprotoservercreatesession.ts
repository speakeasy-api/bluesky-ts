/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ComAtprotoServerCreateSessionServerResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoServerCreateSessionServerResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerCreateSessionServerResponseBodyData;

  constructor(err: ComAtprotoServerCreateSessionServerResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ComAtprotoServerCreateSessionServerResponseBody";
  }
}

export const ComAtprotoServerCreateSessionError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  AccountTakedown: "AccountTakedown",
  AuthFactorTokenRequired: "AuthFactorTokenRequired",
} as const;
export type ComAtprotoServerCreateSessionError = ClosedEnum<
  typeof ComAtprotoServerCreateSessionError
>;

/**
 * Bad Request
 */
export type ComAtprotoServerCreateSessionResponseBodyData = {
  error: ComAtprotoServerCreateSessionError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoServerCreateSessionResponseBody extends Error {
  error: ComAtprotoServerCreateSessionError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerCreateSessionResponseBodyData;

  constructor(err: ComAtprotoServerCreateSessionResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ComAtprotoServerCreateSessionResponseBody";
  }
}

/** @internal */
export const ComAtprotoServerCreateSessionServerResponseBody$inboundSchema:
  z.ZodType<
    ComAtprotoServerCreateSessionServerResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerCreateSessionServerResponseBody(v);
    });

/** @internal */
export type ComAtprotoServerCreateSessionServerResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoServerCreateSessionServerResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoServerCreateSessionServerResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerCreateSessionServerResponseBody
  > = z.instanceof(ComAtprotoServerCreateSessionServerResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateSessionServerResponseBody$ {
  /** @deprecated use `ComAtprotoServerCreateSessionServerResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateSessionServerResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionServerResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateSessionServerResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionServerResponseBody$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerCreateSessionServerResponseBody$Outbound;
}

/** @internal */
export const ComAtprotoServerCreateSessionError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerCreateSessionError
> = z.nativeEnum(ComAtprotoServerCreateSessionError);

/** @internal */
export const ComAtprotoServerCreateSessionError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerCreateSessionError
> = ComAtprotoServerCreateSessionError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateSessionError$ {
  /** @deprecated use `ComAtprotoServerCreateSessionError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoServerCreateSessionError$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateSessionError$outboundSchema;
}

/** @internal */
export const ComAtprotoServerCreateSessionResponseBody$inboundSchema: z.ZodType<
  ComAtprotoServerCreateSessionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoServerCreateSessionError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ComAtprotoServerCreateSessionResponseBody(v);
  });

/** @internal */
export type ComAtprotoServerCreateSessionResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoServerCreateSessionResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoServerCreateSessionResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerCreateSessionResponseBody
  > = z.instanceof(ComAtprotoServerCreateSessionResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoServerCreateSessionError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateSessionResponseBody$ {
  /** @deprecated use `ComAtprotoServerCreateSessionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateSessionResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateSessionResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateSessionResponseBody$Outbound;
}
