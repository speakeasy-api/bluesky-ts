/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSignatureSearchAccountsAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSignatureSearchAccountsAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSignatureSearchAccountsAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSignatureSearchAccountsAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSignatureSearchAccountsAuthMissingError";
  }
}

export const ToolsOzoneSignatureSearchAccountsError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSignatureSearchAccountsError = ClosedEnum<
  typeof ToolsOzoneSignatureSearchAccountsError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSignatureSearchAccountsBadRequestErrorData = {
  error: ToolsOzoneSignatureSearchAccountsError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSignatureSearchAccountsBadRequestError
  extends BlueskyError
{
  error: ToolsOzoneSignatureSearchAccountsError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSignatureSearchAccountsBadRequestErrorData;

  constructor(
    err: ToolsOzoneSignatureSearchAccountsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSignatureSearchAccountsBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSignatureSearchAccountsAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneSignatureSearchAccountsAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSignatureSearchAccountsAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSignatureSearchAccountsAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSignatureSearchAccountsAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneSignatureSearchAccountsAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSignatureSearchAccountsAuthMissingError
  > = z.instanceof(ToolsOzoneSignatureSearchAccountsAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureSearchAccountsAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSignatureSearchAccountsAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureSearchAccountsAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureSearchAccountsAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureSearchAccountsAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSignatureSearchAccountsAuthMissingError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneSignatureSearchAccountsAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSignatureSearchAccountsError$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneSignatureSearchAccountsError> = z.nativeEnum(
    ToolsOzoneSignatureSearchAccountsError,
  );

/** @internal */
export const ToolsOzoneSignatureSearchAccountsError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneSignatureSearchAccountsError> =
    ToolsOzoneSignatureSearchAccountsError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureSearchAccountsError$ {
  /** @deprecated use `ToolsOzoneSignatureSearchAccountsError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureSearchAccountsError$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureSearchAccountsError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureSearchAccountsError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSignatureSearchAccountsBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneSignatureSearchAccountsBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneSignatureSearchAccountsError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSignatureSearchAccountsBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSignatureSearchAccountsBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSignatureSearchAccountsBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneSignatureSearchAccountsBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSignatureSearchAccountsBadRequestError
  > = z.instanceof(ToolsOzoneSignatureSearchAccountsBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneSignatureSearchAccountsError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureSearchAccountsBadRequestError$ {
  /** @deprecated use `ToolsOzoneSignatureSearchAccountsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureSearchAccountsBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureSearchAccountsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureSearchAccountsBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSignatureSearchAccountsBadRequestError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneSignatureSearchAccountsBadRequestError$Outbound;
}
