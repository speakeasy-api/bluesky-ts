/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoUploadBlobAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoUploadBlobAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoUploadBlobAuthMissingErrorData;

  constructor(
    err: ComAtprotoRepoUploadBlobAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoUploadBlobAuthMissingError";
  }
}

export const ComAtprotoRepoUploadBlobError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoRepoUploadBlobError = ClosedEnum<
  typeof ComAtprotoRepoUploadBlobError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoUploadBlobBadRequestErrorData = {
  error: ComAtprotoRepoUploadBlobError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoUploadBlobBadRequestError extends BlueskyError {
  error: ComAtprotoRepoUploadBlobError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoUploadBlobBadRequestErrorData;

  constructor(
    err: ComAtprotoRepoUploadBlobBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoUploadBlobBadRequestError";
  }
}

/** @internal */
export const ComAtprotoRepoUploadBlobAuthMissingError$inboundSchema: z.ZodType<
  ComAtprotoRepoUploadBlobAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoUploadBlobAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoUploadBlobAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoUploadBlobAuthMissingError$outboundSchema: z.ZodType<
  ComAtprotoRepoUploadBlobAuthMissingError$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoUploadBlobAuthMissingError
> = z.instanceof(ComAtprotoRepoUploadBlobAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoUploadBlobAuthMissingError$ {
  /** @deprecated use `ComAtprotoRepoUploadBlobAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoUploadBlobAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoUploadBlobAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoUploadBlobAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoUploadBlobAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoUploadBlobAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoRepoUploadBlobError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoUploadBlobError
> = z.nativeEnum(ComAtprotoRepoUploadBlobError);

/** @internal */
export const ComAtprotoRepoUploadBlobError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoUploadBlobError
> = ComAtprotoRepoUploadBlobError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoUploadBlobError$ {
  /** @deprecated use `ComAtprotoRepoUploadBlobError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoUploadBlobError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoUploadBlobError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoUploadBlobError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoUploadBlobBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoRepoUploadBlobBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoRepoUploadBlobError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoUploadBlobBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoUploadBlobBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoUploadBlobBadRequestError$outboundSchema: z.ZodType<
  ComAtprotoRepoUploadBlobBadRequestError$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoUploadBlobBadRequestError
> = z.instanceof(ComAtprotoRepoUploadBlobBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoRepoUploadBlobError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoUploadBlobBadRequestError$ {
  /** @deprecated use `ComAtprotoRepoUploadBlobBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoUploadBlobBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoUploadBlobBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoUploadBlobBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoUploadBlobBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoUploadBlobBadRequestError$Outbound;
}
