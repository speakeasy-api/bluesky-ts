/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedChatBskyConvoGetLogResponseBodyErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class UnauthorizedChatBskyConvoGetLogResponseBodyError extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedChatBskyConvoGetLogResponseBodyErrorData;

  constructor(err: UnauthorizedChatBskyConvoGetLogResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "UnauthorizedChatBskyConvoGetLogResponseBodyError";
  }
}

export const ChatBskyConvoGetLogError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoGetLogError = ClosedEnum<
  typeof ChatBskyConvoGetLogError
>;

/**
 * Bad Request
 */
export type BadRequestChatBskyConvoGetLogResponseBodyErrorData = {
  error: ChatBskyConvoGetLogError;
  message: string;
};

/**
 * Bad Request
 */
export class BadRequestChatBskyConvoGetLogResponseBodyError extends Error {
  error: ChatBskyConvoGetLogError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestChatBskyConvoGetLogResponseBodyErrorData;

  constructor(err: BadRequestChatBskyConvoGetLogResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestChatBskyConvoGetLogResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedChatBskyConvoGetLogResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedChatBskyConvoGetLogResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedChatBskyConvoGetLogResponseBodyError(v);
    });

/** @internal */
export type UnauthorizedChatBskyConvoGetLogResponseBodyError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const UnauthorizedChatBskyConvoGetLogResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedChatBskyConvoGetLogResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedChatBskyConvoGetLogResponseBodyError
  > = z.instanceof(UnauthorizedChatBskyConvoGetLogResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedChatBskyConvoGetLogResponseBodyError$ {
  /** @deprecated use `UnauthorizedChatBskyConvoGetLogResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedChatBskyConvoGetLogResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedChatBskyConvoGetLogResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedChatBskyConvoGetLogResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedChatBskyConvoGetLogResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedChatBskyConvoGetLogResponseBodyError$Outbound;
}

/** @internal */
export const ChatBskyConvoGetLogError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetLogError
> = z.nativeEnum(ChatBskyConvoGetLogError);

/** @internal */
export const ChatBskyConvoGetLogError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetLogError
> = ChatBskyConvoGetLogError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetLogError$ {
  /** @deprecated use `ChatBskyConvoGetLogError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoGetLogError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoGetLogError$outboundSchema;
}

/** @internal */
export const BadRequestChatBskyConvoGetLogResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestChatBskyConvoGetLogResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ChatBskyConvoGetLogError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestChatBskyConvoGetLogResponseBodyError(v);
    });

/** @internal */
export type BadRequestChatBskyConvoGetLogResponseBodyError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const BadRequestChatBskyConvoGetLogResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestChatBskyConvoGetLogResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestChatBskyConvoGetLogResponseBodyError
  > = z.instanceof(BadRequestChatBskyConvoGetLogResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ChatBskyConvoGetLogError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestChatBskyConvoGetLogResponseBodyError$ {
  /** @deprecated use `BadRequestChatBskyConvoGetLogResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestChatBskyConvoGetLogResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestChatBskyConvoGetLogResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestChatBskyConvoGetLogResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestChatBskyConvoGetLogResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestChatBskyConvoGetLogResponseBodyError$Outbound;
}
