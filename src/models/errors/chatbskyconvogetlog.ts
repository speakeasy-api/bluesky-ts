/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoGetLogChatBskyConvoResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoGetLogChatBskyConvoResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoGetLogChatBskyConvoResponseBodyData;

  constructor(err: ChatBskyConvoGetLogChatBskyConvoResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoGetLogChatBskyConvoResponseBody";
  }
}

export const ChatBskyConvoGetLogError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoGetLogError = ClosedEnum<
  typeof ChatBskyConvoGetLogError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoGetLogResponseBodyData = {
  error: ChatBskyConvoGetLogError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoGetLogResponseBody extends Error {
  error: ChatBskyConvoGetLogError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoGetLogResponseBodyData;

  constructor(err: ChatBskyConvoGetLogResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoGetLogResponseBody";
  }
}

/** @internal */
export const ChatBskyConvoGetLogChatBskyConvoResponseBody$inboundSchema:
  z.ZodType<
    ChatBskyConvoGetLogChatBskyConvoResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ChatBskyConvoGetLogChatBskyConvoResponseBody(v);
    });

/** @internal */
export type ChatBskyConvoGetLogChatBskyConvoResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoGetLogChatBskyConvoResponseBody$outboundSchema:
  z.ZodType<
    ChatBskyConvoGetLogChatBskyConvoResponseBody$Outbound,
    z.ZodTypeDef,
    ChatBskyConvoGetLogChatBskyConvoResponseBody
  > = z.instanceof(ChatBskyConvoGetLogChatBskyConvoResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetLogChatBskyConvoResponseBody$ {
  /** @deprecated use `ChatBskyConvoGetLogChatBskyConvoResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoGetLogChatBskyConvoResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogChatBskyConvoResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoGetLogChatBskyConvoResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogChatBskyConvoResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetLogChatBskyConvoResponseBody$Outbound;
}

/** @internal */
export const ChatBskyConvoGetLogError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetLogError
> = z.nativeEnum(ChatBskyConvoGetLogError);

/** @internal */
export const ChatBskyConvoGetLogError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetLogError
> = ChatBskyConvoGetLogError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetLogError$ {
  /** @deprecated use `ChatBskyConvoGetLogError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoGetLogError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoGetLogError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoGetLogResponseBody$inboundSchema: z.ZodType<
  ChatBskyConvoGetLogResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoGetLogError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoGetLogResponseBody(v);
  });

/** @internal */
export type ChatBskyConvoGetLogResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoGetLogResponseBody$outboundSchema: z.ZodType<
  ChatBskyConvoGetLogResponseBody$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoGetLogResponseBody
> = z.instanceof(ChatBskyConvoGetLogResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoGetLogError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetLogResponseBody$ {
  /** @deprecated use `ChatBskyConvoGetLogResponseBody$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoGetLogResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogResponseBody$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoGetLogResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetLogResponseBody$Outbound;
}
