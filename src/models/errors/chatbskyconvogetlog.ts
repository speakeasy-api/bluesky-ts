/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoGetLogAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoGetLogAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoGetLogAuthMissingErrorData;

  constructor(
    err: ChatBskyConvoGetLogAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoGetLogAuthMissingError";
  }
}

export const ChatBskyConvoGetLogError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoGetLogError = ClosedEnum<
  typeof ChatBskyConvoGetLogError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoGetLogBadRequestErrorData = {
  error: ChatBskyConvoGetLogError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoGetLogBadRequestError extends BlueskyError {
  error: ChatBskyConvoGetLogError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoGetLogBadRequestErrorData;

  constructor(
    err: ChatBskyConvoGetLogBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoGetLogBadRequestError";
  }
}

/** @internal */
export const ChatBskyConvoGetLogAuthMissingError$inboundSchema: z.ZodType<
  ChatBskyConvoGetLogAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoGetLogAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoGetLogAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoGetLogAuthMissingError$outboundSchema: z.ZodType<
  ChatBskyConvoGetLogAuthMissingError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoGetLogAuthMissingError
> = z.instanceof(ChatBskyConvoGetLogAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetLogAuthMissingError$ {
  /** @deprecated use `ChatBskyConvoGetLogAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoGetLogAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoGetLogAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogAuthMissingError$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetLogAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyConvoGetLogError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetLogError
> = z.nativeEnum(ChatBskyConvoGetLogError);

/** @internal */
export const ChatBskyConvoGetLogError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetLogError
> = ChatBskyConvoGetLogError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetLogError$ {
  /** @deprecated use `ChatBskyConvoGetLogError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoGetLogError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoGetLogError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoGetLogBadRequestError$inboundSchema: z.ZodType<
  ChatBskyConvoGetLogBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoGetLogError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoGetLogBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoGetLogBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoGetLogBadRequestError$outboundSchema: z.ZodType<
  ChatBskyConvoGetLogBadRequestError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoGetLogBadRequestError
> = z.instanceof(ChatBskyConvoGetLogBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoGetLogError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetLogBadRequestError$ {
  /** @deprecated use `ChatBskyConvoGetLogBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoGetLogBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoGetLogBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogBadRequestError$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetLogBadRequestError$Outbound;
}
