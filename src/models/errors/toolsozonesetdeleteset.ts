/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSetDeleteSetAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSetDeleteSetAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetDeleteSetAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSetDeleteSetAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetDeleteSetAuthMissingError";
  }
}

export const ToolsOzoneSetDeleteSetError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  SetNotFound: "SetNotFound",
} as const;
export type ToolsOzoneSetDeleteSetError = ClosedEnum<
  typeof ToolsOzoneSetDeleteSetError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSetDeleteSetBadRequestErrorData = {
  error: ToolsOzoneSetDeleteSetError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSetDeleteSetBadRequestError extends BlueskyError {
  error: ToolsOzoneSetDeleteSetError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetDeleteSetBadRequestErrorData;

  constructor(
    err: ToolsOzoneSetDeleteSetBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetDeleteSetBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSetDeleteSetAuthMissingError$inboundSchema: z.ZodType<
  ToolsOzoneSetDeleteSetAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetDeleteSetAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetDeleteSetAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSetDeleteSetAuthMissingError$outboundSchema: z.ZodType<
  ToolsOzoneSetDeleteSetAuthMissingError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSetDeleteSetAuthMissingError
> = z.instanceof(ToolsOzoneSetDeleteSetAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetDeleteSetAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSetDeleteSetAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetDeleteSetAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetDeleteSetAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetDeleteSetAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetDeleteSetAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetDeleteSetAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSetDeleteSetError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetDeleteSetError
> = z.nativeEnum(ToolsOzoneSetDeleteSetError);

/** @internal */
export const ToolsOzoneSetDeleteSetError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetDeleteSetError
> = ToolsOzoneSetDeleteSetError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetDeleteSetError$ {
  /** @deprecated use `ToolsOzoneSetDeleteSetError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSetDeleteSetError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetDeleteSetError$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneSetDeleteSetError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSetDeleteSetBadRequestError$inboundSchema: z.ZodType<
  ToolsOzoneSetDeleteSetBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ToolsOzoneSetDeleteSetError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetDeleteSetBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetDeleteSetBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSetDeleteSetBadRequestError$outboundSchema: z.ZodType<
  ToolsOzoneSetDeleteSetBadRequestError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSetDeleteSetBadRequestError
> = z.instanceof(ToolsOzoneSetDeleteSetBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ToolsOzoneSetDeleteSetError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetDeleteSetBadRequestError$ {
  /** @deprecated use `ToolsOzoneSetDeleteSetBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetDeleteSetBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetDeleteSetBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetDeleteSetBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetDeleteSetBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetDeleteSetBadRequestError$Outbound;
}
