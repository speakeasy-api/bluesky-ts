/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedToolsOzoneSetDeleteSetResponseBodyErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class UnauthorizedToolsOzoneSetDeleteSetResponseBodyError extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedToolsOzoneSetDeleteSetResponseBodyErrorData;

  constructor(err: UnauthorizedToolsOzoneSetDeleteSetResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "UnauthorizedToolsOzoneSetDeleteSetResponseBodyError";
  }
}

export const ToolsOzoneSetDeleteSetError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  SetNotFound: "SetNotFound",
} as const;
export type ToolsOzoneSetDeleteSetError = ClosedEnum<
  typeof ToolsOzoneSetDeleteSetError
>;

/**
 * Bad Request
 */
export type BadRequestToolsOzoneSetDeleteSetResponseBodyErrorData = {
  error: ToolsOzoneSetDeleteSetError;
  message: string;
};

/**
 * Bad Request
 */
export class BadRequestToolsOzoneSetDeleteSetResponseBodyError extends Error {
  error: ToolsOzoneSetDeleteSetError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestToolsOzoneSetDeleteSetResponseBodyErrorData;

  constructor(err: BadRequestToolsOzoneSetDeleteSetResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestToolsOzoneSetDeleteSetResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedToolsOzoneSetDeleteSetResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedToolsOzoneSetDeleteSetResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedToolsOzoneSetDeleteSetResponseBodyError(v);
    });

/** @internal */
export type UnauthorizedToolsOzoneSetDeleteSetResponseBodyError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const UnauthorizedToolsOzoneSetDeleteSetResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedToolsOzoneSetDeleteSetResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedToolsOzoneSetDeleteSetResponseBodyError
  > = z.instanceof(UnauthorizedToolsOzoneSetDeleteSetResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedToolsOzoneSetDeleteSetResponseBodyError$ {
  /** @deprecated use `UnauthorizedToolsOzoneSetDeleteSetResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedToolsOzoneSetDeleteSetResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedToolsOzoneSetDeleteSetResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedToolsOzoneSetDeleteSetResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedToolsOzoneSetDeleteSetResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedToolsOzoneSetDeleteSetResponseBodyError$Outbound;
}

/** @internal */
export const ToolsOzoneSetDeleteSetError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetDeleteSetError
> = z.nativeEnum(ToolsOzoneSetDeleteSetError);

/** @internal */
export const ToolsOzoneSetDeleteSetError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetDeleteSetError
> = ToolsOzoneSetDeleteSetError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetDeleteSetError$ {
  /** @deprecated use `ToolsOzoneSetDeleteSetError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSetDeleteSetError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetDeleteSetError$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneSetDeleteSetError$outboundSchema;
}

/** @internal */
export const BadRequestToolsOzoneSetDeleteSetResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestToolsOzoneSetDeleteSetResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneSetDeleteSetError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestToolsOzoneSetDeleteSetResponseBodyError(v);
    });

/** @internal */
export type BadRequestToolsOzoneSetDeleteSetResponseBodyError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const BadRequestToolsOzoneSetDeleteSetResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestToolsOzoneSetDeleteSetResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestToolsOzoneSetDeleteSetResponseBodyError
  > = z.instanceof(BadRequestToolsOzoneSetDeleteSetResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneSetDeleteSetError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestToolsOzoneSetDeleteSetResponseBodyError$ {
  /** @deprecated use `BadRequestToolsOzoneSetDeleteSetResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestToolsOzoneSetDeleteSetResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestToolsOzoneSetDeleteSetResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestToolsOzoneSetDeleteSetResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestToolsOzoneSetDeleteSetResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestToolsOzoneSetDeleteSetResponseBodyError$Outbound;
}
