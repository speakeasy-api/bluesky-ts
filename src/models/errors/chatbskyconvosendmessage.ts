/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoSendMessageAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoSendMessageAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoSendMessageAuthMissingErrorData;

  constructor(
    err: ChatBskyConvoSendMessageAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoSendMessageAuthMissingError";
  }
}

export const ChatBskyConvoSendMessageError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoSendMessageError = ClosedEnum<
  typeof ChatBskyConvoSendMessageError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoSendMessageBadRequestErrorData = {
  error: ChatBskyConvoSendMessageError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoSendMessageBadRequestError extends BlueskyError {
  error: ChatBskyConvoSendMessageError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoSendMessageBadRequestErrorData;

  constructor(
    err: ChatBskyConvoSendMessageBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoSendMessageBadRequestError";
  }
}

/** @internal */
export const ChatBskyConvoSendMessageAuthMissingError$inboundSchema: z.ZodType<
  ChatBskyConvoSendMessageAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoSendMessageAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoSendMessageAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoSendMessageAuthMissingError$outboundSchema: z.ZodType<
  ChatBskyConvoSendMessageAuthMissingError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoSendMessageAuthMissingError
> = z.instanceof(ChatBskyConvoSendMessageAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoSendMessageAuthMissingError$ {
  /** @deprecated use `ChatBskyConvoSendMessageAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoSendMessageAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyConvoSendMessageAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoSendMessageAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyConvoSendMessageAuthMissingError$Outbound` instead. */
  export type Outbound = ChatBskyConvoSendMessageAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyConvoSendMessageError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoSendMessageError
> = z.nativeEnum(ChatBskyConvoSendMessageError);

/** @internal */
export const ChatBskyConvoSendMessageError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoSendMessageError
> = ChatBskyConvoSendMessageError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoSendMessageError$ {
  /** @deprecated use `ChatBskyConvoSendMessageError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoSendMessageError$inboundSchema;
  /** @deprecated use `ChatBskyConvoSendMessageError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoSendMessageError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoSendMessageBadRequestError$inboundSchema: z.ZodType<
  ChatBskyConvoSendMessageBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoSendMessageError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoSendMessageBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoSendMessageBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoSendMessageBadRequestError$outboundSchema: z.ZodType<
  ChatBskyConvoSendMessageBadRequestError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoSendMessageBadRequestError
> = z.instanceof(ChatBskyConvoSendMessageBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoSendMessageError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoSendMessageBadRequestError$ {
  /** @deprecated use `ChatBskyConvoSendMessageBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoSendMessageBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyConvoSendMessageBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoSendMessageBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyConvoSendMessageBadRequestError$Outbound` instead. */
  export type Outbound = ChatBskyConvoSendMessageBadRequestError$Outbound;
}
