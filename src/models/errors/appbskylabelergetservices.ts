/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type AppBskyLabelerGetServicesAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class AppBskyLabelerGetServicesAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: AppBskyLabelerGetServicesAuthMissingErrorData;

  constructor(
    err: AppBskyLabelerGetServicesAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "AppBskyLabelerGetServicesAuthMissingError";
  }
}

export const AppBskyLabelerGetServicesError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type AppBskyLabelerGetServicesError = ClosedEnum<
  typeof AppBskyLabelerGetServicesError
>;

/**
 * Bad Request
 */
export type AppBskyLabelerGetServicesBadRequestErrorData = {
  error: AppBskyLabelerGetServicesError;
  message: string;
};

/**
 * Bad Request
 */
export class AppBskyLabelerGetServicesBadRequestError extends BlueskyError {
  error: AppBskyLabelerGetServicesError;

  /** The original data that was passed to this error instance. */
  data$: AppBskyLabelerGetServicesBadRequestErrorData;

  constructor(
    err: AppBskyLabelerGetServicesBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "AppBskyLabelerGetServicesBadRequestError";
  }
}

/** @internal */
export const AppBskyLabelerGetServicesAuthMissingError$inboundSchema: z.ZodType<
  AppBskyLabelerGetServicesAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AppBskyLabelerGetServicesAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AppBskyLabelerGetServicesAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const AppBskyLabelerGetServicesAuthMissingError$outboundSchema:
  z.ZodType<
    AppBskyLabelerGetServicesAuthMissingError$Outbound,
    z.ZodTypeDef,
    AppBskyLabelerGetServicesAuthMissingError
  > = z.instanceof(AppBskyLabelerGetServicesAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyLabelerGetServicesAuthMissingError$ {
  /** @deprecated use `AppBskyLabelerGetServicesAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyLabelerGetServicesAuthMissingError$inboundSchema;
  /** @deprecated use `AppBskyLabelerGetServicesAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyLabelerGetServicesAuthMissingError$outboundSchema;
  /** @deprecated use `AppBskyLabelerGetServicesAuthMissingError$Outbound` instead. */
  export type Outbound = AppBskyLabelerGetServicesAuthMissingError$Outbound;
}

/** @internal */
export const AppBskyLabelerGetServicesError$inboundSchema: z.ZodNativeEnum<
  typeof AppBskyLabelerGetServicesError
> = z.nativeEnum(AppBskyLabelerGetServicesError);

/** @internal */
export const AppBskyLabelerGetServicesError$outboundSchema: z.ZodNativeEnum<
  typeof AppBskyLabelerGetServicesError
> = AppBskyLabelerGetServicesError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyLabelerGetServicesError$ {
  /** @deprecated use `AppBskyLabelerGetServicesError$inboundSchema` instead. */
  export const inboundSchema = AppBskyLabelerGetServicesError$inboundSchema;
  /** @deprecated use `AppBskyLabelerGetServicesError$outboundSchema` instead. */
  export const outboundSchema = AppBskyLabelerGetServicesError$outboundSchema;
}

/** @internal */
export const AppBskyLabelerGetServicesBadRequestError$inboundSchema: z.ZodType<
  AppBskyLabelerGetServicesBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: AppBskyLabelerGetServicesError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AppBskyLabelerGetServicesBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AppBskyLabelerGetServicesBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const AppBskyLabelerGetServicesBadRequestError$outboundSchema: z.ZodType<
  AppBskyLabelerGetServicesBadRequestError$Outbound,
  z.ZodTypeDef,
  AppBskyLabelerGetServicesBadRequestError
> = z.instanceof(AppBskyLabelerGetServicesBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: AppBskyLabelerGetServicesError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyLabelerGetServicesBadRequestError$ {
  /** @deprecated use `AppBskyLabelerGetServicesBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyLabelerGetServicesBadRequestError$inboundSchema;
  /** @deprecated use `AppBskyLabelerGetServicesBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyLabelerGetServicesBadRequestError$outboundSchema;
  /** @deprecated use `AppBskyLabelerGetServicesBadRequestError$Outbound` instead. */
  export type Outbound = AppBskyLabelerGetServicesBadRequestError$Outbound;
}
