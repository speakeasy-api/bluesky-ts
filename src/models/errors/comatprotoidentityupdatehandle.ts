/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoIdentityUpdateHandleAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoIdentityUpdateHandleAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoIdentityUpdateHandleAuthMissingErrorData;

  constructor(
    err: ComAtprotoIdentityUpdateHandleAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoIdentityUpdateHandleAuthMissingError";
  }
}

export const ComAtprotoIdentityUpdateHandleError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoIdentityUpdateHandleError = ClosedEnum<
  typeof ComAtprotoIdentityUpdateHandleError
>;

/**
 * Bad Request
 */
export type ComAtprotoIdentityUpdateHandleBadRequestErrorData = {
  error: ComAtprotoIdentityUpdateHandleError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoIdentityUpdateHandleBadRequestError
  extends BlueskyError
{
  error: ComAtprotoIdentityUpdateHandleError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoIdentityUpdateHandleBadRequestErrorData;

  constructor(
    err: ComAtprotoIdentityUpdateHandleBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoIdentityUpdateHandleBadRequestError";
  }
}

/** @internal */
export const ComAtprotoIdentityUpdateHandleAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoIdentityUpdateHandleAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoIdentityUpdateHandleAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoIdentityUpdateHandleAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoIdentityUpdateHandleAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoIdentityUpdateHandleAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentityUpdateHandleAuthMissingError
  > = z.instanceof(ComAtprotoIdentityUpdateHandleAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityUpdateHandleAuthMissingError$ {
  /** @deprecated use `ComAtprotoIdentityUpdateHandleAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityUpdateHandleAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityUpdateHandleAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityUpdateHandleAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoIdentityUpdateHandleAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoIdentityUpdateHandleAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoIdentityUpdateHandleError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoIdentityUpdateHandleError
> = z.nativeEnum(ComAtprotoIdentityUpdateHandleError);

/** @internal */
export const ComAtprotoIdentityUpdateHandleError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentityUpdateHandleError> =
    ComAtprotoIdentityUpdateHandleError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityUpdateHandleError$ {
  /** @deprecated use `ComAtprotoIdentityUpdateHandleError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityUpdateHandleError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityUpdateHandleError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityUpdateHandleError$outboundSchema;
}

/** @internal */
export const ComAtprotoIdentityUpdateHandleBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoIdentityUpdateHandleBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoIdentityUpdateHandleError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoIdentityUpdateHandleBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoIdentityUpdateHandleBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoIdentityUpdateHandleBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoIdentityUpdateHandleBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentityUpdateHandleBadRequestError
  > = z.instanceof(ComAtprotoIdentityUpdateHandleBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoIdentityUpdateHandleError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityUpdateHandleBadRequestError$ {
  /** @deprecated use `ComAtprotoIdentityUpdateHandleBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityUpdateHandleBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityUpdateHandleBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityUpdateHandleBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoIdentityUpdateHandleBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoIdentityUpdateHandleBadRequestError$Outbound;
}
