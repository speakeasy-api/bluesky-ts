/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSetQuerySetsAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSetQuerySetsAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetQuerySetsAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSetQuerySetsAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetQuerySetsAuthMissingError";
  }
}

export const ToolsOzoneSetQuerySetsError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSetQuerySetsError = ClosedEnum<
  typeof ToolsOzoneSetQuerySetsError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSetQuerySetsBadRequestErrorData = {
  error: ToolsOzoneSetQuerySetsError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSetQuerySetsBadRequestError extends BlueskyError {
  error: ToolsOzoneSetQuerySetsError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetQuerySetsBadRequestErrorData;

  constructor(
    err: ToolsOzoneSetQuerySetsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetQuerySetsBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSetQuerySetsAuthMissingError$inboundSchema: z.ZodType<
  ToolsOzoneSetQuerySetsAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetQuerySetsAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetQuerySetsAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSetQuerySetsAuthMissingError$outboundSchema: z.ZodType<
  ToolsOzoneSetQuerySetsAuthMissingError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSetQuerySetsAuthMissingError
> = z.instanceof(ToolsOzoneSetQuerySetsAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetQuerySetsAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSetQuerySetsAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetQuerySetsAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetQuerySetsAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetQuerySetsAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetQuerySetsAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetQuerySetsAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSetQuerySetsError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetQuerySetsError
> = z.nativeEnum(ToolsOzoneSetQuerySetsError);

/** @internal */
export const ToolsOzoneSetQuerySetsError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetQuerySetsError
> = ToolsOzoneSetQuerySetsError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetQuerySetsError$ {
  /** @deprecated use `ToolsOzoneSetQuerySetsError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSetQuerySetsError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetQuerySetsError$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneSetQuerySetsError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSetQuerySetsBadRequestError$inboundSchema: z.ZodType<
  ToolsOzoneSetQuerySetsBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ToolsOzoneSetQuerySetsError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetQuerySetsBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetQuerySetsBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSetQuerySetsBadRequestError$outboundSchema: z.ZodType<
  ToolsOzoneSetQuerySetsBadRequestError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSetQuerySetsBadRequestError
> = z.instanceof(ToolsOzoneSetQuerySetsBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ToolsOzoneSetQuerySetsError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetQuerySetsBadRequestError$ {
  /** @deprecated use `ToolsOzoneSetQuerySetsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetQuerySetsBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetQuerySetsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetQuerySetsBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetQuerySetsBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetQuerySetsBadRequestError$Outbound;
}
