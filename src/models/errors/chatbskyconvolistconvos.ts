/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoListConvosAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoListConvosAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoListConvosAuthMissingErrorData;

  constructor(
    err: ChatBskyConvoListConvosAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoListConvosAuthMissingError";
  }
}

export const ChatBskyConvoListConvosError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoListConvosError = ClosedEnum<
  typeof ChatBskyConvoListConvosError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoListConvosBadRequestErrorData = {
  error: ChatBskyConvoListConvosError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoListConvosBadRequestError extends BlueskyError {
  error: ChatBskyConvoListConvosError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoListConvosBadRequestErrorData;

  constructor(
    err: ChatBskyConvoListConvosBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoListConvosBadRequestError";
  }
}

/** @internal */
export const ChatBskyConvoListConvosAuthMissingError$inboundSchema: z.ZodType<
  ChatBskyConvoListConvosAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoListConvosAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoListConvosAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoListConvosAuthMissingError$outboundSchema: z.ZodType<
  ChatBskyConvoListConvosAuthMissingError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoListConvosAuthMissingError
> = z.instanceof(ChatBskyConvoListConvosAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoListConvosAuthMissingError$ {
  /** @deprecated use `ChatBskyConvoListConvosAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoListConvosAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyConvoListConvosAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoListConvosAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyConvoListConvosAuthMissingError$Outbound` instead. */
  export type Outbound = ChatBskyConvoListConvosAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyConvoListConvosError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoListConvosError
> = z.nativeEnum(ChatBskyConvoListConvosError);

/** @internal */
export const ChatBskyConvoListConvosError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoListConvosError
> = ChatBskyConvoListConvosError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoListConvosError$ {
  /** @deprecated use `ChatBskyConvoListConvosError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoListConvosError$inboundSchema;
  /** @deprecated use `ChatBskyConvoListConvosError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoListConvosError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoListConvosBadRequestError$inboundSchema: z.ZodType<
  ChatBskyConvoListConvosBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoListConvosError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoListConvosBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoListConvosBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoListConvosBadRequestError$outboundSchema: z.ZodType<
  ChatBskyConvoListConvosBadRequestError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoListConvosBadRequestError
> = z.instanceof(ChatBskyConvoListConvosBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoListConvosError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoListConvosBadRequestError$ {
  /** @deprecated use `ChatBskyConvoListConvosBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoListConvosBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyConvoListConvosBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoListConvosBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyConvoListConvosBadRequestError$Outbound` instead. */
  export type Outbound = ChatBskyConvoListConvosBadRequestError$Outbound;
}
