/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoServerDeactivateAccountAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoServerDeactivateAccountAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerDeactivateAccountAuthMissingErrorData;

  constructor(
    err: ComAtprotoServerDeactivateAccountAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerDeactivateAccountAuthMissingError";
  }
}

export const ComAtprotoServerDeactivateAccountError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoServerDeactivateAccountError = ClosedEnum<
  typeof ComAtprotoServerDeactivateAccountError
>;

/**
 * Bad Request
 */
export type ComAtprotoServerDeactivateAccountBadRequestErrorData = {
  error: ComAtprotoServerDeactivateAccountError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoServerDeactivateAccountBadRequestError
  extends BlueskyError
{
  error: ComAtprotoServerDeactivateAccountError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerDeactivateAccountBadRequestErrorData;

  constructor(
    err: ComAtprotoServerDeactivateAccountBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerDeactivateAccountBadRequestError";
  }
}

/** @internal */
export const ComAtprotoServerDeactivateAccountAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoServerDeactivateAccountAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerDeactivateAccountAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerDeactivateAccountAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoServerDeactivateAccountAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoServerDeactivateAccountAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerDeactivateAccountAuthMissingError
  > = z.instanceof(ComAtprotoServerDeactivateAccountAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDeactivateAccountAuthMissingError$ {
  /** @deprecated use `ComAtprotoServerDeactivateAccountAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerDeactivateAccountAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoServerDeactivateAccountAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDeactivateAccountAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoServerDeactivateAccountAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerDeactivateAccountAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoServerDeactivateAccountError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerDeactivateAccountError> = z.nativeEnum(
    ComAtprotoServerDeactivateAccountError,
  );

/** @internal */
export const ComAtprotoServerDeactivateAccountError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerDeactivateAccountError> =
    ComAtprotoServerDeactivateAccountError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDeactivateAccountError$ {
  /** @deprecated use `ComAtprotoServerDeactivateAccountError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerDeactivateAccountError$inboundSchema;
  /** @deprecated use `ComAtprotoServerDeactivateAccountError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDeactivateAccountError$outboundSchema;
}

/** @internal */
export const ComAtprotoServerDeactivateAccountBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoServerDeactivateAccountBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoServerDeactivateAccountError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerDeactivateAccountBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerDeactivateAccountBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoServerDeactivateAccountBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoServerDeactivateAccountBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerDeactivateAccountBadRequestError
  > = z.instanceof(ComAtprotoServerDeactivateAccountBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoServerDeactivateAccountError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDeactivateAccountBadRequestError$ {
  /** @deprecated use `ComAtprotoServerDeactivateAccountBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerDeactivateAccountBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoServerDeactivateAccountBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDeactivateAccountBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoServerDeactivateAccountBadRequestError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerDeactivateAccountBadRequestError$Outbound;
}
