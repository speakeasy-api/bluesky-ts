/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoGetConvoAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoGetConvoAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoGetConvoAuthMissingErrorData;

  constructor(
    err: ChatBskyConvoGetConvoAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoGetConvoAuthMissingError";
  }
}

export const ChatBskyConvoGetConvoError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoGetConvoError = ClosedEnum<
  typeof ChatBskyConvoGetConvoError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoGetConvoBadRequestErrorData = {
  error: ChatBskyConvoGetConvoError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoGetConvoBadRequestError extends BlueskyError {
  error: ChatBskyConvoGetConvoError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoGetConvoBadRequestErrorData;

  constructor(
    err: ChatBskyConvoGetConvoBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoGetConvoBadRequestError";
  }
}

/** @internal */
export const ChatBskyConvoGetConvoAuthMissingError$inboundSchema: z.ZodType<
  ChatBskyConvoGetConvoAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoGetConvoAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoGetConvoAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoGetConvoAuthMissingError$outboundSchema: z.ZodType<
  ChatBskyConvoGetConvoAuthMissingError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoGetConvoAuthMissingError
> = z.instanceof(ChatBskyConvoGetConvoAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetConvoAuthMissingError$ {
  /** @deprecated use `ChatBskyConvoGetConvoAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoGetConvoAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetConvoAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoGetConvoAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetConvoAuthMissingError$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetConvoAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyConvoGetConvoError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetConvoError
> = z.nativeEnum(ChatBskyConvoGetConvoError);

/** @internal */
export const ChatBskyConvoGetConvoError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetConvoError
> = ChatBskyConvoGetConvoError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetConvoError$ {
  /** @deprecated use `ChatBskyConvoGetConvoError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoGetConvoError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetConvoError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoGetConvoError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoGetConvoBadRequestError$inboundSchema: z.ZodType<
  ChatBskyConvoGetConvoBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoGetConvoError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoGetConvoBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoGetConvoBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoGetConvoBadRequestError$outboundSchema: z.ZodType<
  ChatBskyConvoGetConvoBadRequestError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoGetConvoBadRequestError
> = z.instanceof(ChatBskyConvoGetConvoBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoGetConvoError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetConvoBadRequestError$ {
  /** @deprecated use `ChatBskyConvoGetConvoBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoGetConvoBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetConvoBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoGetConvoBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetConvoBadRequestError$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetConvoBadRequestError$Outbound;
}
