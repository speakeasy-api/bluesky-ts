/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoServerRequestAccountDeleteAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoServerRequestAccountDeleteAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerRequestAccountDeleteAuthMissingErrorData;

  constructor(
    err: ComAtprotoServerRequestAccountDeleteAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerRequestAccountDeleteAuthMissingError";
  }
}

export const ComAtprotoServerRequestAccountDeleteError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoServerRequestAccountDeleteError = ClosedEnum<
  typeof ComAtprotoServerRequestAccountDeleteError
>;

/**
 * Bad Request
 */
export type ComAtprotoServerRequestAccountDeleteBadRequestErrorData = {
  error: ComAtprotoServerRequestAccountDeleteError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoServerRequestAccountDeleteBadRequestError
  extends BlueskyError
{
  error: ComAtprotoServerRequestAccountDeleteError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerRequestAccountDeleteBadRequestErrorData;

  constructor(
    err: ComAtprotoServerRequestAccountDeleteBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerRequestAccountDeleteBadRequestError";
  }
}

/** @internal */
export const ComAtprotoServerRequestAccountDeleteAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoServerRequestAccountDeleteAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerRequestAccountDeleteAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerRequestAccountDeleteAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoServerRequestAccountDeleteAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoServerRequestAccountDeleteAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerRequestAccountDeleteAuthMissingError
  > = z.instanceof(ComAtprotoServerRequestAccountDeleteAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerRequestAccountDeleteAuthMissingError$ {
  /** @deprecated use `ComAtprotoServerRequestAccountDeleteAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerRequestAccountDeleteAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoServerRequestAccountDeleteAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerRequestAccountDeleteAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoServerRequestAccountDeleteAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerRequestAccountDeleteAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoServerRequestAccountDeleteError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerRequestAccountDeleteError> = z
    .nativeEnum(ComAtprotoServerRequestAccountDeleteError);

/** @internal */
export const ComAtprotoServerRequestAccountDeleteError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerRequestAccountDeleteError> =
    ComAtprotoServerRequestAccountDeleteError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerRequestAccountDeleteError$ {
  /** @deprecated use `ComAtprotoServerRequestAccountDeleteError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerRequestAccountDeleteError$inboundSchema;
  /** @deprecated use `ComAtprotoServerRequestAccountDeleteError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerRequestAccountDeleteError$outboundSchema;
}

/** @internal */
export const ComAtprotoServerRequestAccountDeleteBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoServerRequestAccountDeleteBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoServerRequestAccountDeleteError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerRequestAccountDeleteBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerRequestAccountDeleteBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoServerRequestAccountDeleteBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoServerRequestAccountDeleteBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerRequestAccountDeleteBadRequestError
  > = z.instanceof(ComAtprotoServerRequestAccountDeleteBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoServerRequestAccountDeleteError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerRequestAccountDeleteBadRequestError$ {
  /** @deprecated use `ComAtprotoServerRequestAccountDeleteBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerRequestAccountDeleteBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoServerRequestAccountDeleteBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerRequestAccountDeleteBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoServerRequestAccountDeleteBadRequestError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerRequestAccountDeleteBadRequestError$Outbound;
}
