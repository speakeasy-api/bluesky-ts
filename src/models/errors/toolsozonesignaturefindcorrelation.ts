/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyErrorData =
  {
    error: "AuthMissing";
    message: string;
  };

/**
 * Unauthorized
 */
export class UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyErrorData;

  constructor(
    err: UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name =
      "UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError";
  }
}

export const ToolsOzoneSignatureFindCorrelationError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSignatureFindCorrelationError = ClosedEnum<
  typeof ToolsOzoneSignatureFindCorrelationError
>;

/**
 * Bad Request
 */
export type BadRequestToolsOzoneSignatureFindCorrelationResponseBodyErrorData =
  {
    error: ToolsOzoneSignatureFindCorrelationError;
    message: string;
  };

/**
 * Bad Request
 */
export class BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError
  extends Error
{
  error: ToolsOzoneSignatureFindCorrelationError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestToolsOzoneSignatureFindCorrelationResponseBodyErrorData;

  constructor(
    err: BadRequestToolsOzoneSignatureFindCorrelationResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError(
        v,
      );
    });

/** @internal */
export type UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError$Outbound =
  {
    error: "AuthMissing";
    message: string;
  };

/** @internal */
export const UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError
  > = z.instanceof(
    UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError$ {
  /** @deprecated use `UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedToolsOzoneSignatureFindCorrelationResponseBodyError$Outbound;
}

/** @internal */
export const ToolsOzoneSignatureFindCorrelationError$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneSignatureFindCorrelationError> = z
    .nativeEnum(ToolsOzoneSignatureFindCorrelationError);

/** @internal */
export const ToolsOzoneSignatureFindCorrelationError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneSignatureFindCorrelationError> =
    ToolsOzoneSignatureFindCorrelationError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureFindCorrelationError$ {
  /** @deprecated use `ToolsOzoneSignatureFindCorrelationError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureFindCorrelationError$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindCorrelationError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureFindCorrelationError$outboundSchema;
}

/** @internal */
export const BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneSignatureFindCorrelationError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError(
        v,
      );
    });

/** @internal */
export type BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError$Outbound =
  {
    error: string;
    message: string;
  };

/** @internal */
export const BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError
  > = z.instanceof(
    BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneSignatureFindCorrelationError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError$ {
  /** @deprecated use `BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestToolsOzoneSignatureFindCorrelationResponseBodyError$Outbound;
}
