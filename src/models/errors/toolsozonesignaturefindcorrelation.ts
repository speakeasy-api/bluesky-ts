/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSignatureFindCorrelationAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSignatureFindCorrelationAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSignatureFindCorrelationAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSignatureFindCorrelationAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSignatureFindCorrelationAuthMissingError";
  }
}

export const ToolsOzoneSignatureFindCorrelationError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSignatureFindCorrelationError = ClosedEnum<
  typeof ToolsOzoneSignatureFindCorrelationError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSignatureFindCorrelationBadRequestErrorData = {
  error: ToolsOzoneSignatureFindCorrelationError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSignatureFindCorrelationBadRequestError
  extends BlueskyError
{
  error: ToolsOzoneSignatureFindCorrelationError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSignatureFindCorrelationBadRequestErrorData;

  constructor(
    err: ToolsOzoneSignatureFindCorrelationBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSignatureFindCorrelationBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSignatureFindCorrelationAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindCorrelationAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSignatureFindCorrelationAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSignatureFindCorrelationAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSignatureFindCorrelationAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindCorrelationAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSignatureFindCorrelationAuthMissingError
  > = z.instanceof(ToolsOzoneSignatureFindCorrelationAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureFindCorrelationAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSignatureFindCorrelationAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureFindCorrelationAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindCorrelationAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureFindCorrelationAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindCorrelationAuthMissingError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneSignatureFindCorrelationAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSignatureFindCorrelationError$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneSignatureFindCorrelationError> = z
    .nativeEnum(ToolsOzoneSignatureFindCorrelationError);

/** @internal */
export const ToolsOzoneSignatureFindCorrelationError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneSignatureFindCorrelationError> =
    ToolsOzoneSignatureFindCorrelationError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureFindCorrelationError$ {
  /** @deprecated use `ToolsOzoneSignatureFindCorrelationError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureFindCorrelationError$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindCorrelationError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureFindCorrelationError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSignatureFindCorrelationBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindCorrelationBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneSignatureFindCorrelationError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSignatureFindCorrelationBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSignatureFindCorrelationBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSignatureFindCorrelationBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindCorrelationBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSignatureFindCorrelationBadRequestError
  > = z.instanceof(ToolsOzoneSignatureFindCorrelationBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneSignatureFindCorrelationError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureFindCorrelationBadRequestError$ {
  /** @deprecated use `ToolsOzoneSignatureFindCorrelationBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureFindCorrelationBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindCorrelationBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureFindCorrelationBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindCorrelationBadRequestError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneSignatureFindCorrelationBadRequestError$Outbound;
}
