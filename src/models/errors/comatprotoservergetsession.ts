/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedComAtprotoServerGetSessionResponseBodyErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class UnauthorizedComAtprotoServerGetSessionResponseBodyError
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedComAtprotoServerGetSessionResponseBodyErrorData;

  constructor(
    err: UnauthorizedComAtprotoServerGetSessionResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "UnauthorizedComAtprotoServerGetSessionResponseBodyError";
  }
}

export const ComAtprotoServerGetSessionError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoServerGetSessionError = ClosedEnum<
  typeof ComAtprotoServerGetSessionError
>;

/**
 * Bad Request
 */
export type BadRequestComAtprotoServerGetSessionResponseBodyErrorData = {
  error: ComAtprotoServerGetSessionError;
  message: string;
};

/**
 * Bad Request
 */
export class BadRequestComAtprotoServerGetSessionResponseBodyError
  extends Error
{
  error: ComAtprotoServerGetSessionError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestComAtprotoServerGetSessionResponseBodyErrorData;

  constructor(err: BadRequestComAtprotoServerGetSessionResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestComAtprotoServerGetSessionResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedComAtprotoServerGetSessionResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoServerGetSessionResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedComAtprotoServerGetSessionResponseBodyError(v);
    });

/** @internal */
export type UnauthorizedComAtprotoServerGetSessionResponseBodyError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const UnauthorizedComAtprotoServerGetSessionResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoServerGetSessionResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedComAtprotoServerGetSessionResponseBodyError
  > = z.instanceof(UnauthorizedComAtprotoServerGetSessionResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedComAtprotoServerGetSessionResponseBodyError$ {
  /** @deprecated use `UnauthorizedComAtprotoServerGetSessionResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedComAtprotoServerGetSessionResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoServerGetSessionResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedComAtprotoServerGetSessionResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoServerGetSessionResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedComAtprotoServerGetSessionResponseBodyError$Outbound;
}

/** @internal */
export const ComAtprotoServerGetSessionError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerGetSessionError
> = z.nativeEnum(ComAtprotoServerGetSessionError);

/** @internal */
export const ComAtprotoServerGetSessionError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerGetSessionError
> = ComAtprotoServerGetSessionError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerGetSessionError$ {
  /** @deprecated use `ComAtprotoServerGetSessionError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoServerGetSessionError$inboundSchema;
  /** @deprecated use `ComAtprotoServerGetSessionError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoServerGetSessionError$outboundSchema;
}

/** @internal */
export const BadRequestComAtprotoServerGetSessionResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestComAtprotoServerGetSessionResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoServerGetSessionError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestComAtprotoServerGetSessionResponseBodyError(v);
    });

/** @internal */
export type BadRequestComAtprotoServerGetSessionResponseBodyError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const BadRequestComAtprotoServerGetSessionResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestComAtprotoServerGetSessionResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestComAtprotoServerGetSessionResponseBodyError
  > = z.instanceof(BadRequestComAtprotoServerGetSessionResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoServerGetSessionError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestComAtprotoServerGetSessionResponseBodyError$ {
  /** @deprecated use `BadRequestComAtprotoServerGetSessionResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestComAtprotoServerGetSessionResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestComAtprotoServerGetSessionResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestComAtprotoServerGetSessionResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestComAtprotoServerGetSessionResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestComAtprotoServerGetSessionResponseBodyError$Outbound;
}
