/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoListMissingBlobsAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoListMissingBlobsAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoListMissingBlobsAuthMissingErrorData;

  constructor(
    err: ComAtprotoRepoListMissingBlobsAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoListMissingBlobsAuthMissingError";
  }
}

export const ComAtprotoRepoListMissingBlobsError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoRepoListMissingBlobsError = ClosedEnum<
  typeof ComAtprotoRepoListMissingBlobsError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoListMissingBlobsBadRequestErrorData = {
  error: ComAtprotoRepoListMissingBlobsError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoListMissingBlobsBadRequestError
  extends BlueskyError
{
  error: ComAtprotoRepoListMissingBlobsError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoListMissingBlobsBadRequestErrorData;

  constructor(
    err: ComAtprotoRepoListMissingBlobsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoListMissingBlobsBadRequestError";
  }
}

/** @internal */
export const ComAtprotoRepoListMissingBlobsAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoRepoListMissingBlobsAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoRepoListMissingBlobsAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoRepoListMissingBlobsAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoListMissingBlobsAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoRepoListMissingBlobsAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoRepoListMissingBlobsAuthMissingError
  > = z.instanceof(ComAtprotoRepoListMissingBlobsAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoListMissingBlobsAuthMissingError$ {
  /** @deprecated use `ComAtprotoRepoListMissingBlobsAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoListMissingBlobsAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoListMissingBlobsAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoListMissingBlobsAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoListMissingBlobsAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoRepoListMissingBlobsAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoRepoListMissingBlobsError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoListMissingBlobsError
> = z.nativeEnum(ComAtprotoRepoListMissingBlobsError);

/** @internal */
export const ComAtprotoRepoListMissingBlobsError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoRepoListMissingBlobsError> =
    ComAtprotoRepoListMissingBlobsError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoListMissingBlobsError$ {
  /** @deprecated use `ComAtprotoRepoListMissingBlobsError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoListMissingBlobsError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoListMissingBlobsError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoListMissingBlobsError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoListMissingBlobsBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoRepoListMissingBlobsBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoRepoListMissingBlobsError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoRepoListMissingBlobsBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoRepoListMissingBlobsBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoListMissingBlobsBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoRepoListMissingBlobsBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoRepoListMissingBlobsBadRequestError
  > = z.instanceof(ComAtprotoRepoListMissingBlobsBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoRepoListMissingBlobsError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoListMissingBlobsBadRequestError$ {
  /** @deprecated use `ComAtprotoRepoListMissingBlobsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoListMissingBlobsBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoListMissingBlobsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoListMissingBlobsBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoListMissingBlobsBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoListMissingBlobsBadRequestError$Outbound;
}
