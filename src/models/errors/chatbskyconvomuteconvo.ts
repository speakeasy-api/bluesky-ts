/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoMuteConvoAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoMuteConvoAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoMuteConvoAuthMissingErrorData;

  constructor(
    err: ChatBskyConvoMuteConvoAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoMuteConvoAuthMissingError";
  }
}

export const ChatBskyConvoMuteConvoError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoMuteConvoError = ClosedEnum<
  typeof ChatBskyConvoMuteConvoError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoMuteConvoBadRequestErrorData = {
  error: ChatBskyConvoMuteConvoError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoMuteConvoBadRequestError extends BlueskyError {
  error: ChatBskyConvoMuteConvoError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoMuteConvoBadRequestErrorData;

  constructor(
    err: ChatBskyConvoMuteConvoBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoMuteConvoBadRequestError";
  }
}

/** @internal */
export const ChatBskyConvoMuteConvoAuthMissingError$inboundSchema: z.ZodType<
  ChatBskyConvoMuteConvoAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoMuteConvoAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoMuteConvoAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoMuteConvoAuthMissingError$outboundSchema: z.ZodType<
  ChatBskyConvoMuteConvoAuthMissingError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoMuteConvoAuthMissingError
> = z.instanceof(ChatBskyConvoMuteConvoAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoMuteConvoAuthMissingError$ {
  /** @deprecated use `ChatBskyConvoMuteConvoAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoMuteConvoAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyConvoMuteConvoAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoMuteConvoAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyConvoMuteConvoAuthMissingError$Outbound` instead. */
  export type Outbound = ChatBskyConvoMuteConvoAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyConvoMuteConvoError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoMuteConvoError
> = z.nativeEnum(ChatBskyConvoMuteConvoError);

/** @internal */
export const ChatBskyConvoMuteConvoError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoMuteConvoError
> = ChatBskyConvoMuteConvoError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoMuteConvoError$ {
  /** @deprecated use `ChatBskyConvoMuteConvoError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoMuteConvoError$inboundSchema;
  /** @deprecated use `ChatBskyConvoMuteConvoError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoMuteConvoError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoMuteConvoBadRequestError$inboundSchema: z.ZodType<
  ChatBskyConvoMuteConvoBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoMuteConvoError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoMuteConvoBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoMuteConvoBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoMuteConvoBadRequestError$outboundSchema: z.ZodType<
  ChatBskyConvoMuteConvoBadRequestError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoMuteConvoBadRequestError
> = z.instanceof(ChatBskyConvoMuteConvoBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoMuteConvoError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoMuteConvoBadRequestError$ {
  /** @deprecated use `ChatBskyConvoMuteConvoBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoMuteConvoBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyConvoMuteConvoBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoMuteConvoBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyConvoMuteConvoBadRequestError$Outbound` instead. */
  export type Outbound = ChatBskyConvoMuteConvoBadRequestError$Outbound;
}
