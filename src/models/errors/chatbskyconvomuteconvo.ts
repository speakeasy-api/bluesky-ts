/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoMuteConvoChatConvoResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoMuteConvoChatConvoResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoMuteConvoChatConvoResponseBodyData;

  constructor(err: ChatBskyConvoMuteConvoChatConvoResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoMuteConvoChatConvoResponseBody";
  }
}

export const ChatBskyConvoMuteConvoError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoMuteConvoError = ClosedEnum<
  typeof ChatBskyConvoMuteConvoError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoMuteConvoResponseBodyData = {
  error: ChatBskyConvoMuteConvoError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoMuteConvoResponseBody extends Error {
  error: ChatBskyConvoMuteConvoError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoMuteConvoResponseBodyData;

  constructor(err: ChatBskyConvoMuteConvoResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoMuteConvoResponseBody";
  }
}

/** @internal */
export const ChatBskyConvoMuteConvoChatConvoResponseBody$inboundSchema:
  z.ZodType<
    ChatBskyConvoMuteConvoChatConvoResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ChatBskyConvoMuteConvoChatConvoResponseBody(v);
    });

/** @internal */
export type ChatBskyConvoMuteConvoChatConvoResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoMuteConvoChatConvoResponseBody$outboundSchema:
  z.ZodType<
    ChatBskyConvoMuteConvoChatConvoResponseBody$Outbound,
    z.ZodTypeDef,
    ChatBskyConvoMuteConvoChatConvoResponseBody
  > = z.instanceof(ChatBskyConvoMuteConvoChatConvoResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoMuteConvoChatConvoResponseBody$ {
  /** @deprecated use `ChatBskyConvoMuteConvoChatConvoResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoMuteConvoChatConvoResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoMuteConvoChatConvoResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoMuteConvoChatConvoResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoMuteConvoChatConvoResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoMuteConvoChatConvoResponseBody$Outbound;
}

/** @internal */
export const ChatBskyConvoMuteConvoError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoMuteConvoError
> = z.nativeEnum(ChatBskyConvoMuteConvoError);

/** @internal */
export const ChatBskyConvoMuteConvoError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoMuteConvoError
> = ChatBskyConvoMuteConvoError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoMuteConvoError$ {
  /** @deprecated use `ChatBskyConvoMuteConvoError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoMuteConvoError$inboundSchema;
  /** @deprecated use `ChatBskyConvoMuteConvoError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoMuteConvoError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoMuteConvoResponseBody$inboundSchema: z.ZodType<
  ChatBskyConvoMuteConvoResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoMuteConvoError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoMuteConvoResponseBody(v);
  });

/** @internal */
export type ChatBskyConvoMuteConvoResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoMuteConvoResponseBody$outboundSchema: z.ZodType<
  ChatBskyConvoMuteConvoResponseBody$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoMuteConvoResponseBody
> = z.instanceof(ChatBskyConvoMuteConvoResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoMuteConvoError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoMuteConvoResponseBody$ {
  /** @deprecated use `ChatBskyConvoMuteConvoResponseBody$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoMuteConvoResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoMuteConvoResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoMuteConvoResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoMuteConvoResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoMuteConvoResponseBody$Outbound;
}
