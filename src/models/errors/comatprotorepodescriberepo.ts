/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoDescribeRepoAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoDescribeRepoAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoDescribeRepoAuthMissingErrorData;

  constructor(
    err: ComAtprotoRepoDescribeRepoAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoDescribeRepoAuthMissingError";
  }
}

export const ComAtprotoRepoDescribeRepoError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoRepoDescribeRepoError = ClosedEnum<
  typeof ComAtprotoRepoDescribeRepoError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoDescribeRepoBadRequestErrorData = {
  error: ComAtprotoRepoDescribeRepoError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoDescribeRepoBadRequestError extends BlueskyError {
  error: ComAtprotoRepoDescribeRepoError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoDescribeRepoBadRequestErrorData;

  constructor(
    err: ComAtprotoRepoDescribeRepoBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoDescribeRepoBadRequestError";
  }
}

/** @internal */
export const ComAtprotoRepoDescribeRepoAuthMissingError$inboundSchema:
  z.ZodType<ComAtprotoRepoDescribeRepoAuthMissingError, z.ZodTypeDef, unknown> =
    z.object({
      error: z.literal("AuthMissing").default("AuthMissing"),
      message: z.string(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ComAtprotoRepoDescribeRepoAuthMissingError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ComAtprotoRepoDescribeRepoAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoDescribeRepoAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoRepoDescribeRepoAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoRepoDescribeRepoAuthMissingError
  > = z.instanceof(ComAtprotoRepoDescribeRepoAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDescribeRepoAuthMissingError$ {
  /** @deprecated use `ComAtprotoRepoDescribeRepoAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoDescribeRepoAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDescribeRepoAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoDescribeRepoAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoDescribeRepoAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoDescribeRepoAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoRepoDescribeRepoError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoDescribeRepoError
> = z.nativeEnum(ComAtprotoRepoDescribeRepoError);

/** @internal */
export const ComAtprotoRepoDescribeRepoError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoDescribeRepoError
> = ComAtprotoRepoDescribeRepoError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDescribeRepoError$ {
  /** @deprecated use `ComAtprotoRepoDescribeRepoError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoDescribeRepoError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDescribeRepoError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoDescribeRepoError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoDescribeRepoBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoRepoDescribeRepoBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoRepoDescribeRepoError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoDescribeRepoBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoDescribeRepoBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoDescribeRepoBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoRepoDescribeRepoBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoRepoDescribeRepoBadRequestError
  > = z.instanceof(ComAtprotoRepoDescribeRepoBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoRepoDescribeRepoError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDescribeRepoBadRequestError$ {
  /** @deprecated use `ComAtprotoRepoDescribeRepoBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoDescribeRepoBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDescribeRepoBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoDescribeRepoBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoDescribeRepoBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoDescribeRepoBadRequestError$Outbound;
}
