/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type AppBskyGraphUnmuteThreadAppBskyGraphResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class AppBskyGraphUnmuteThreadAppBskyGraphResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: AppBskyGraphUnmuteThreadAppBskyGraphResponseBodyData;

  constructor(err: AppBskyGraphUnmuteThreadAppBskyGraphResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "AppBskyGraphUnmuteThreadAppBskyGraphResponseBody";
  }
}

export const AppBskyGraphUnmuteThreadError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type AppBskyGraphUnmuteThreadError = ClosedEnum<
  typeof AppBskyGraphUnmuteThreadError
>;

/**
 * Bad Request
 */
export type AppBskyGraphUnmuteThreadResponseBodyData = {
  error: AppBskyGraphUnmuteThreadError;
  message: string;
};

/**
 * Bad Request
 */
export class AppBskyGraphUnmuteThreadResponseBody extends Error {
  error: AppBskyGraphUnmuteThreadError;

  /** The original data that was passed to this error instance. */
  data$: AppBskyGraphUnmuteThreadResponseBodyData;

  constructor(err: AppBskyGraphUnmuteThreadResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "AppBskyGraphUnmuteThreadResponseBody";
  }
}

/** @internal */
export const AppBskyGraphUnmuteThreadAppBskyGraphResponseBody$inboundSchema:
  z.ZodType<
    AppBskyGraphUnmuteThreadAppBskyGraphResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new AppBskyGraphUnmuteThreadAppBskyGraphResponseBody(v);
    });

/** @internal */
export type AppBskyGraphUnmuteThreadAppBskyGraphResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const AppBskyGraphUnmuteThreadAppBskyGraphResponseBody$outboundSchema:
  z.ZodType<
    AppBskyGraphUnmuteThreadAppBskyGraphResponseBody$Outbound,
    z.ZodTypeDef,
    AppBskyGraphUnmuteThreadAppBskyGraphResponseBody
  > = z.instanceof(AppBskyGraphUnmuteThreadAppBskyGraphResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyGraphUnmuteThreadAppBskyGraphResponseBody$ {
  /** @deprecated use `AppBskyGraphUnmuteThreadAppBskyGraphResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyGraphUnmuteThreadAppBskyGraphResponseBody$inboundSchema;
  /** @deprecated use `AppBskyGraphUnmuteThreadAppBskyGraphResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyGraphUnmuteThreadAppBskyGraphResponseBody$outboundSchema;
  /** @deprecated use `AppBskyGraphUnmuteThreadAppBskyGraphResponseBody$Outbound` instead. */
  export type Outbound =
    AppBskyGraphUnmuteThreadAppBskyGraphResponseBody$Outbound;
}

/** @internal */
export const AppBskyGraphUnmuteThreadError$inboundSchema: z.ZodNativeEnum<
  typeof AppBskyGraphUnmuteThreadError
> = z.nativeEnum(AppBskyGraphUnmuteThreadError);

/** @internal */
export const AppBskyGraphUnmuteThreadError$outboundSchema: z.ZodNativeEnum<
  typeof AppBskyGraphUnmuteThreadError
> = AppBskyGraphUnmuteThreadError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyGraphUnmuteThreadError$ {
  /** @deprecated use `AppBskyGraphUnmuteThreadError$inboundSchema` instead. */
  export const inboundSchema = AppBskyGraphUnmuteThreadError$inboundSchema;
  /** @deprecated use `AppBskyGraphUnmuteThreadError$outboundSchema` instead. */
  export const outboundSchema = AppBskyGraphUnmuteThreadError$outboundSchema;
}

/** @internal */
export const AppBskyGraphUnmuteThreadResponseBody$inboundSchema: z.ZodType<
  AppBskyGraphUnmuteThreadResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: AppBskyGraphUnmuteThreadError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new AppBskyGraphUnmuteThreadResponseBody(v);
  });

/** @internal */
export type AppBskyGraphUnmuteThreadResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const AppBskyGraphUnmuteThreadResponseBody$outboundSchema: z.ZodType<
  AppBskyGraphUnmuteThreadResponseBody$Outbound,
  z.ZodTypeDef,
  AppBskyGraphUnmuteThreadResponseBody
> = z.instanceof(AppBskyGraphUnmuteThreadResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: AppBskyGraphUnmuteThreadError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyGraphUnmuteThreadResponseBody$ {
  /** @deprecated use `AppBskyGraphUnmuteThreadResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyGraphUnmuteThreadResponseBody$inboundSchema;
  /** @deprecated use `AppBskyGraphUnmuteThreadResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyGraphUnmuteThreadResponseBody$outboundSchema;
  /** @deprecated use `AppBskyGraphUnmuteThreadResponseBody$Outbound` instead. */
  export type Outbound = AppBskyGraphUnmuteThreadResponseBody$Outbound;
}
