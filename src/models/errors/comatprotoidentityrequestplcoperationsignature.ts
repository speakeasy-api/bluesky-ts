/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyErrorData =
  {
    error: "AuthMissing";
    message: string;
  };

/**
 * Unauthorized
 */
export class UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$:
    UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyErrorData;

  constructor(
    err:
      UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name =
      "UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError";
  }
}

export const ComAtprotoIdentityRequestPlcOperationSignatureError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoIdentityRequestPlcOperationSignatureError = ClosedEnum<
  typeof ComAtprotoIdentityRequestPlcOperationSignatureError
>;

/**
 * Bad Request
 */
export type BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyErrorData =
  {
    error: ComAtprotoIdentityRequestPlcOperationSignatureError;
    message: string;
  };

/**
 * Bad Request
 */
export class BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError
  extends Error
{
  error: ComAtprotoIdentityRequestPlcOperationSignatureError;

  /** The original data that was passed to this error instance. */
  data$:
    BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyErrorData;

  constructor(
    err:
      BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name =
      "BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError(
        v,
      );
    });

/** @internal */
export type UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$Outbound =
  {
    error: "AuthMissing";
    message: string;
  };

/** @internal */
export const UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError
  > = z.instanceof(
    UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$ {
  /** @deprecated use `UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$Outbound;
}

/** @internal */
export const ComAtprotoIdentityRequestPlcOperationSignatureError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentityRequestPlcOperationSignatureError> =
    z.nativeEnum(ComAtprotoIdentityRequestPlcOperationSignatureError);

/** @internal */
export const ComAtprotoIdentityRequestPlcOperationSignatureError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentityRequestPlcOperationSignatureError> =
    ComAtprotoIdentityRequestPlcOperationSignatureError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityRequestPlcOperationSignatureError$ {
  /** @deprecated use `ComAtprotoIdentityRequestPlcOperationSignatureError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityRequestPlcOperationSignatureError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityRequestPlcOperationSignatureError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityRequestPlcOperationSignatureError$outboundSchema;
}

/** @internal */
export const BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoIdentityRequestPlcOperationSignatureError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError(
        v,
      );
    });

/** @internal */
export type BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$Outbound =
  {
    error: string;
    message: string;
  };

/** @internal */
export const BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError
  > = z.instanceof(
    BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoIdentityRequestPlcOperationSignatureError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$ {
  /** @deprecated use `BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestComAtprotoIdentityRequestPlcOperationSignatureResponseBodyError$Outbound;
}
