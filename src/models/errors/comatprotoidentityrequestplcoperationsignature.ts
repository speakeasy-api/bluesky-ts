/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingErrorData =
  {
    error: "AuthMissing";
    message: string;
  };

/**
 * Unauthorized
 */
export class ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingErrorData;

  constructor(
    err: ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name =
      "ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError";
  }
}

export const ComAtprotoIdentityRequestPlcOperationSignatureError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoIdentityRequestPlcOperationSignatureError = ClosedEnum<
  typeof ComAtprotoIdentityRequestPlcOperationSignatureError
>;

/**
 * Bad Request
 */
export type ComAtprotoIdentityRequestPlcOperationSignatureBadRequestErrorData =
  {
    error: ComAtprotoIdentityRequestPlcOperationSignatureError;
    message: string;
  };

/**
 * Bad Request
 */
export class ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError
  extends BlueskyError
{
  error: ComAtprotoIdentityRequestPlcOperationSignatureError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoIdentityRequestPlcOperationSignatureBadRequestErrorData;

  constructor(
    err: ComAtprotoIdentityRequestPlcOperationSignatureBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError";
  }
}

/** @internal */
export const ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError$Outbound =
  {
    error: "AuthMissing";
    message: string;
  };

/** @internal */
export const ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError
  > = z.instanceof(
    ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError$ {
  /** @deprecated use `ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoIdentityRequestPlcOperationSignatureAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoIdentityRequestPlcOperationSignatureError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentityRequestPlcOperationSignatureError> =
    z.nativeEnum(ComAtprotoIdentityRequestPlcOperationSignatureError);

/** @internal */
export const ComAtprotoIdentityRequestPlcOperationSignatureError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentityRequestPlcOperationSignatureError> =
    ComAtprotoIdentityRequestPlcOperationSignatureError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityRequestPlcOperationSignatureError$ {
  /** @deprecated use `ComAtprotoIdentityRequestPlcOperationSignatureError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityRequestPlcOperationSignatureError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityRequestPlcOperationSignatureError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityRequestPlcOperationSignatureError$outboundSchema;
}

/** @internal */
export const ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoIdentityRequestPlcOperationSignatureError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError$Outbound =
  {
    error: string;
    message: string;
  };

/** @internal */
export const ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError
  > = z.instanceof(
    ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoIdentityRequestPlcOperationSignatureError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError$ {
  /** @deprecated use `ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError$Outbound` instead. */
  export type Outbound =
    ComAtprotoIdentityRequestPlcOperationSignatureBadRequestError$Outbound;
}
