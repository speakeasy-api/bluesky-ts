/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoIdentitySubmitPlcOperationAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoIdentitySubmitPlcOperationAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoIdentitySubmitPlcOperationAuthMissingErrorData;

  constructor(
    err: ComAtprotoIdentitySubmitPlcOperationAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoIdentitySubmitPlcOperationAuthMissingError";
  }
}

export const ComAtprotoIdentitySubmitPlcOperationError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoIdentitySubmitPlcOperationError = ClosedEnum<
  typeof ComAtprotoIdentitySubmitPlcOperationError
>;

/**
 * Bad Request
 */
export type ComAtprotoIdentitySubmitPlcOperationBadRequestErrorData = {
  error: ComAtprotoIdentitySubmitPlcOperationError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoIdentitySubmitPlcOperationBadRequestError
  extends BlueskyError
{
  error: ComAtprotoIdentitySubmitPlcOperationError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoIdentitySubmitPlcOperationBadRequestErrorData;

  constructor(
    err: ComAtprotoIdentitySubmitPlcOperationBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoIdentitySubmitPlcOperationBadRequestError";
  }
}

/** @internal */
export const ComAtprotoIdentitySubmitPlcOperationAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoIdentitySubmitPlcOperationAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoIdentitySubmitPlcOperationAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoIdentitySubmitPlcOperationAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoIdentitySubmitPlcOperationAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoIdentitySubmitPlcOperationAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentitySubmitPlcOperationAuthMissingError
  > = z.instanceof(ComAtprotoIdentitySubmitPlcOperationAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySubmitPlcOperationAuthMissingError$ {
  /** @deprecated use `ComAtprotoIdentitySubmitPlcOperationAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySubmitPlcOperationAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySubmitPlcOperationAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySubmitPlcOperationAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoIdentitySubmitPlcOperationAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoIdentitySubmitPlcOperationAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoIdentitySubmitPlcOperationError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentitySubmitPlcOperationError> = z
    .nativeEnum(ComAtprotoIdentitySubmitPlcOperationError);

/** @internal */
export const ComAtprotoIdentitySubmitPlcOperationError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentitySubmitPlcOperationError> =
    ComAtprotoIdentitySubmitPlcOperationError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySubmitPlcOperationError$ {
  /** @deprecated use `ComAtprotoIdentitySubmitPlcOperationError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySubmitPlcOperationError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySubmitPlcOperationError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySubmitPlcOperationError$outboundSchema;
}

/** @internal */
export const ComAtprotoIdentitySubmitPlcOperationBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoIdentitySubmitPlcOperationBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoIdentitySubmitPlcOperationError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoIdentitySubmitPlcOperationBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoIdentitySubmitPlcOperationBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoIdentitySubmitPlcOperationBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoIdentitySubmitPlcOperationBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentitySubmitPlcOperationBadRequestError
  > = z.instanceof(ComAtprotoIdentitySubmitPlcOperationBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoIdentitySubmitPlcOperationError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySubmitPlcOperationBadRequestError$ {
  /** @deprecated use `ComAtprotoIdentitySubmitPlcOperationBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySubmitPlcOperationBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySubmitPlcOperationBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySubmitPlcOperationBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoIdentitySubmitPlcOperationBadRequestError$Outbound` instead. */
  export type Outbound =
    ComAtprotoIdentitySubmitPlcOperationBadRequestError$Outbound;
}
