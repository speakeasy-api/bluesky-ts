/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoIdentitySignPlcOperationAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoIdentitySignPlcOperationAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoIdentitySignPlcOperationAuthMissingErrorData;

  constructor(
    err: ComAtprotoIdentitySignPlcOperationAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoIdentitySignPlcOperationAuthMissingError";
  }
}

export const ComAtprotoIdentitySignPlcOperationError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoIdentitySignPlcOperationError = ClosedEnum<
  typeof ComAtprotoIdentitySignPlcOperationError
>;

/**
 * Bad Request
 */
export type ComAtprotoIdentitySignPlcOperationBadRequestErrorData = {
  error: ComAtprotoIdentitySignPlcOperationError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoIdentitySignPlcOperationBadRequestError
  extends BlueskyError
{
  error: ComAtprotoIdentitySignPlcOperationError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoIdentitySignPlcOperationBadRequestErrorData;

  constructor(
    err: ComAtprotoIdentitySignPlcOperationBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoIdentitySignPlcOperationBadRequestError";
  }
}

/** @internal */
export const ComAtprotoIdentitySignPlcOperationAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoIdentitySignPlcOperationAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoIdentitySignPlcOperationAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoIdentitySignPlcOperationAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentitySignPlcOperationAuthMissingError
  > = z.instanceof(ComAtprotoIdentitySignPlcOperationAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySignPlcOperationAuthMissingError$ {
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySignPlcOperationAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySignPlcOperationAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoIdentitySignPlcOperationAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoIdentitySignPlcOperationError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentitySignPlcOperationError> = z
    .nativeEnum(ComAtprotoIdentitySignPlcOperationError);

/** @internal */
export const ComAtprotoIdentitySignPlcOperationError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentitySignPlcOperationError> =
    ComAtprotoIdentitySignPlcOperationError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySignPlcOperationError$ {
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySignPlcOperationError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySignPlcOperationError$outboundSchema;
}

/** @internal */
export const ComAtprotoIdentitySignPlcOperationBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoIdentitySignPlcOperationError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoIdentitySignPlcOperationBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoIdentitySignPlcOperationBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoIdentitySignPlcOperationBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentitySignPlcOperationBadRequestError
  > = z.instanceof(ComAtprotoIdentitySignPlcOperationBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoIdentitySignPlcOperationError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySignPlcOperationBadRequestError$ {
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySignPlcOperationBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySignPlcOperationBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationBadRequestError$Outbound` instead. */
  export type Outbound =
    ComAtprotoIdentitySignPlcOperationBadRequestError$Outbound;
}
