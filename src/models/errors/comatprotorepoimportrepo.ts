/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoImportRepoAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoImportRepoAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoImportRepoAuthMissingErrorData;

  constructor(
    err: ComAtprotoRepoImportRepoAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoImportRepoAuthMissingError";
  }
}

export const ComAtprotoRepoImportRepoError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoRepoImportRepoError = ClosedEnum<
  typeof ComAtprotoRepoImportRepoError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoImportRepoBadRequestErrorData = {
  error: ComAtprotoRepoImportRepoError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoImportRepoBadRequestError extends BlueskyError {
  error: ComAtprotoRepoImportRepoError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoImportRepoBadRequestErrorData;

  constructor(
    err: ComAtprotoRepoImportRepoBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoImportRepoBadRequestError";
  }
}

/** @internal */
export const ComAtprotoRepoImportRepoAuthMissingError$inboundSchema: z.ZodType<
  ComAtprotoRepoImportRepoAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoImportRepoAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoImportRepoAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoImportRepoAuthMissingError$outboundSchema: z.ZodType<
  ComAtprotoRepoImportRepoAuthMissingError$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoImportRepoAuthMissingError
> = z.instanceof(ComAtprotoRepoImportRepoAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoImportRepoAuthMissingError$ {
  /** @deprecated use `ComAtprotoRepoImportRepoAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoImportRepoAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoImportRepoAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoImportRepoAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoImportRepoAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoImportRepoAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoRepoImportRepoError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoImportRepoError
> = z.nativeEnum(ComAtprotoRepoImportRepoError);

/** @internal */
export const ComAtprotoRepoImportRepoError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoImportRepoError
> = ComAtprotoRepoImportRepoError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoImportRepoError$ {
  /** @deprecated use `ComAtprotoRepoImportRepoError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoImportRepoError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoImportRepoError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoImportRepoError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoImportRepoBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoRepoImportRepoBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoRepoImportRepoError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoImportRepoBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoImportRepoBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoImportRepoBadRequestError$outboundSchema: z.ZodType<
  ComAtprotoRepoImportRepoBadRequestError$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoImportRepoBadRequestError
> = z.instanceof(ComAtprotoRepoImportRepoBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoRepoImportRepoError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoImportRepoBadRequestError$ {
  /** @deprecated use `ComAtprotoRepoImportRepoBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoImportRepoBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoImportRepoBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoImportRepoBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoImportRepoBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoImportRepoBadRequestError$Outbound;
}
