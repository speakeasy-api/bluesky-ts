/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneModerationGetRecordAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneModerationGetRecordAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationGetRecordAuthMissingErrorData;

  constructor(
    err: ToolsOzoneModerationGetRecordAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneModerationGetRecordAuthMissingError";
  }
}

export const ToolsOzoneModerationGetRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  RecordNotFound: "RecordNotFound",
} as const;
export type ToolsOzoneModerationGetRecordError = ClosedEnum<
  typeof ToolsOzoneModerationGetRecordError
>;

/**
 * Bad Request
 */
export type ToolsOzoneModerationGetRecordBadRequestErrorData = {
  error: ToolsOzoneModerationGetRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneModerationGetRecordBadRequestError extends BlueskyError {
  error: ToolsOzoneModerationGetRecordError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationGetRecordBadRequestErrorData;

  constructor(
    err: ToolsOzoneModerationGetRecordBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneModerationGetRecordBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneModerationGetRecordAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetRecordAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneModerationGetRecordAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneModerationGetRecordAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneModerationGetRecordAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetRecordAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationGetRecordAuthMissingError
  > = z.instanceof(ToolsOzoneModerationGetRecordAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetRecordAuthMissingError$ {
  /** @deprecated use `ToolsOzoneModerationGetRecordAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetRecordAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetRecordAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetRecordAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneModerationGetRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationGetRecordError
> = z.nativeEnum(ToolsOzoneModerationGetRecordError);

/** @internal */
export const ToolsOzoneModerationGetRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationGetRecordError
> = ToolsOzoneModerationGetRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetRecordError$ {
  /** @deprecated use `ToolsOzoneModerationGetRecordError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneModerationGetRecordError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetRecordError$outboundSchema;
}

/** @internal */
export const ToolsOzoneModerationGetRecordBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetRecordBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneModerationGetRecordError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneModerationGetRecordBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneModerationGetRecordBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneModerationGetRecordBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetRecordBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationGetRecordBadRequestError
  > = z.instanceof(ToolsOzoneModerationGetRecordBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneModerationGetRecordError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetRecordBadRequestError$ {
  /** @deprecated use `ToolsOzoneModerationGetRecordBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetRecordBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetRecordBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetRecordBadRequestError$Outbound;
}
