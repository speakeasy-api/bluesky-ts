/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ToolsOzoneModerationGetRecordOzoneModerationResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneModerationGetRecordOzoneModerationResponseBody
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationGetRecordOzoneModerationResponseBodyData;

  constructor(
    err: ToolsOzoneModerationGetRecordOzoneModerationResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ToolsOzoneModerationGetRecordOzoneModerationResponseBody";
  }
}

export const ToolsOzoneModerationGetRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  RecordNotFound: "RecordNotFound",
} as const;
export type ToolsOzoneModerationGetRecordError = ClosedEnum<
  typeof ToolsOzoneModerationGetRecordError
>;

/**
 * Bad Request
 */
export type ToolsOzoneModerationGetRecordResponseBodyData = {
  error: ToolsOzoneModerationGetRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneModerationGetRecordResponseBody extends Error {
  error: ToolsOzoneModerationGetRecordError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationGetRecordResponseBodyData;

  constructor(err: ToolsOzoneModerationGetRecordResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ToolsOzoneModerationGetRecordResponseBody";
  }
}

/** @internal */
export const ToolsOzoneModerationGetRecordOzoneModerationResponseBody$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetRecordOzoneModerationResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneModerationGetRecordOzoneModerationResponseBody(v);
    });

/** @internal */
export type ToolsOzoneModerationGetRecordOzoneModerationResponseBody$Outbound =
  {
    error: "AuthMissing";
    message: string;
  };

/** @internal */
export const ToolsOzoneModerationGetRecordOzoneModerationResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetRecordOzoneModerationResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationGetRecordOzoneModerationResponseBody
  > = z.instanceof(ToolsOzoneModerationGetRecordOzoneModerationResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetRecordOzoneModerationResponseBody$ {
  /** @deprecated use `ToolsOzoneModerationGetRecordOzoneModerationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetRecordOzoneModerationResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordOzoneModerationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetRecordOzoneModerationResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordOzoneModerationResponseBody$Outbound` instead. */
  export type Outbound =
    ToolsOzoneModerationGetRecordOzoneModerationResponseBody$Outbound;
}

/** @internal */
export const ToolsOzoneModerationGetRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationGetRecordError
> = z.nativeEnum(ToolsOzoneModerationGetRecordError);

/** @internal */
export const ToolsOzoneModerationGetRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationGetRecordError
> = ToolsOzoneModerationGetRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetRecordError$ {
  /** @deprecated use `ToolsOzoneModerationGetRecordError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneModerationGetRecordError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetRecordError$outboundSchema;
}

/** @internal */
export const ToolsOzoneModerationGetRecordResponseBody$inboundSchema: z.ZodType<
  ToolsOzoneModerationGetRecordResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ToolsOzoneModerationGetRecordError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneModerationGetRecordResponseBody(v);
  });

/** @internal */
export type ToolsOzoneModerationGetRecordResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneModerationGetRecordResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetRecordResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationGetRecordResponseBody
  > = z.instanceof(ToolsOzoneModerationGetRecordResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneModerationGetRecordError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetRecordResponseBody$ {
  /** @deprecated use `ToolsOzoneModerationGetRecordResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetRecordResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetRecordResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordResponseBody$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetRecordResponseBody$Outbound;
}
