/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type AppBskyFeedGetAuthorFeedAppBskyFeedResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: AppBskyFeedGetAuthorFeedAppBskyFeedResponseBodyData;

  constructor(err: AppBskyFeedGetAuthorFeedAppBskyFeedResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody";
  }
}

export const AppBskyFeedGetAuthorFeedError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  BlockedActor: "BlockedActor",
  BlockedByActor: "BlockedByActor",
} as const;
export type AppBskyFeedGetAuthorFeedError = ClosedEnum<
  typeof AppBskyFeedGetAuthorFeedError
>;

/**
 * Bad Request
 */
export type AppBskyFeedGetAuthorFeedResponseBodyData = {
  error: AppBskyFeedGetAuthorFeedError;
  message: string;
};

/**
 * Bad Request
 */
export class AppBskyFeedGetAuthorFeedResponseBody extends Error {
  error: AppBskyFeedGetAuthorFeedError;

  /** The original data that was passed to this error instance. */
  data$: AppBskyFeedGetAuthorFeedResponseBodyData;

  constructor(err: AppBskyFeedGetAuthorFeedResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "AppBskyFeedGetAuthorFeedResponseBody";
  }
}

/** @internal */
export const AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody$inboundSchema:
  z.ZodType<
    AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody(v);
    });

/** @internal */
export type AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody$outboundSchema:
  z.ZodType<
    AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody$Outbound,
    z.ZodTypeDef,
    AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody
  > = z.instanceof(AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody$ {
  /** @deprecated use `AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody$inboundSchema;
  /** @deprecated use `AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody$outboundSchema;
  /** @deprecated use `AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody$Outbound` instead. */
  export type Outbound =
    AppBskyFeedGetAuthorFeedAppBskyFeedResponseBody$Outbound;
}

/** @internal */
export const AppBskyFeedGetAuthorFeedError$inboundSchema: z.ZodNativeEnum<
  typeof AppBskyFeedGetAuthorFeedError
> = z.nativeEnum(AppBskyFeedGetAuthorFeedError);

/** @internal */
export const AppBskyFeedGetAuthorFeedError$outboundSchema: z.ZodNativeEnum<
  typeof AppBskyFeedGetAuthorFeedError
> = AppBskyFeedGetAuthorFeedError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedGetAuthorFeedError$ {
  /** @deprecated use `AppBskyFeedGetAuthorFeedError$inboundSchema` instead. */
  export const inboundSchema = AppBskyFeedGetAuthorFeedError$inboundSchema;
  /** @deprecated use `AppBskyFeedGetAuthorFeedError$outboundSchema` instead. */
  export const outboundSchema = AppBskyFeedGetAuthorFeedError$outboundSchema;
}

/** @internal */
export const AppBskyFeedGetAuthorFeedResponseBody$inboundSchema: z.ZodType<
  AppBskyFeedGetAuthorFeedResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: AppBskyFeedGetAuthorFeedError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new AppBskyFeedGetAuthorFeedResponseBody(v);
  });

/** @internal */
export type AppBskyFeedGetAuthorFeedResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const AppBskyFeedGetAuthorFeedResponseBody$outboundSchema: z.ZodType<
  AppBskyFeedGetAuthorFeedResponseBody$Outbound,
  z.ZodTypeDef,
  AppBskyFeedGetAuthorFeedResponseBody
> = z.instanceof(AppBskyFeedGetAuthorFeedResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: AppBskyFeedGetAuthorFeedError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedGetAuthorFeedResponseBody$ {
  /** @deprecated use `AppBskyFeedGetAuthorFeedResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyFeedGetAuthorFeedResponseBody$inboundSchema;
  /** @deprecated use `AppBskyFeedGetAuthorFeedResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyFeedGetAuthorFeedResponseBody$outboundSchema;
  /** @deprecated use `AppBskyFeedGetAuthorFeedResponseBody$Outbound` instead. */
  export type Outbound = AppBskyFeedGetAuthorFeedResponseBody$Outbound;
}
