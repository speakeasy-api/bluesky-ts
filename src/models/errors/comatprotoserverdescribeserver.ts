/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoServerDescribeServerAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoServerDescribeServerAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerDescribeServerAuthMissingErrorData;

  constructor(
    err: ComAtprotoServerDescribeServerAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerDescribeServerAuthMissingError";
  }
}

export const ComAtprotoServerDescribeServerError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoServerDescribeServerError = ClosedEnum<
  typeof ComAtprotoServerDescribeServerError
>;

/**
 * Bad Request
 */
export type ComAtprotoServerDescribeServerBadRequestErrorData = {
  error: ComAtprotoServerDescribeServerError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoServerDescribeServerBadRequestError
  extends BlueskyError
{
  error: ComAtprotoServerDescribeServerError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerDescribeServerBadRequestErrorData;

  constructor(
    err: ComAtprotoServerDescribeServerBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerDescribeServerBadRequestError";
  }
}

/** @internal */
export const ComAtprotoServerDescribeServerAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoServerDescribeServerAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerDescribeServerAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerDescribeServerAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoServerDescribeServerAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoServerDescribeServerAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerDescribeServerAuthMissingError
  > = z.instanceof(ComAtprotoServerDescribeServerAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDescribeServerAuthMissingError$ {
  /** @deprecated use `ComAtprotoServerDescribeServerAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerDescribeServerAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoServerDescribeServerAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDescribeServerAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoServerDescribeServerAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerDescribeServerAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoServerDescribeServerError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerDescribeServerError
> = z.nativeEnum(ComAtprotoServerDescribeServerError);

/** @internal */
export const ComAtprotoServerDescribeServerError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerDescribeServerError> =
    ComAtprotoServerDescribeServerError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDescribeServerError$ {
  /** @deprecated use `ComAtprotoServerDescribeServerError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerDescribeServerError$inboundSchema;
  /** @deprecated use `ComAtprotoServerDescribeServerError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDescribeServerError$outboundSchema;
}

/** @internal */
export const ComAtprotoServerDescribeServerBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoServerDescribeServerBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoServerDescribeServerError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerDescribeServerBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerDescribeServerBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoServerDescribeServerBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoServerDescribeServerBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerDescribeServerBadRequestError
  > = z.instanceof(ComAtprotoServerDescribeServerBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoServerDescribeServerError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDescribeServerBadRequestError$ {
  /** @deprecated use `ComAtprotoServerDescribeServerBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerDescribeServerBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoServerDescribeServerBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDescribeServerBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoServerDescribeServerBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoServerDescribeServerBadRequestError$Outbound;
}
