/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneTeamListMembersAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneTeamListMembersAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneTeamListMembersAuthMissingErrorData;

  constructor(
    err: ToolsOzoneTeamListMembersAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneTeamListMembersAuthMissingError";
  }
}

export const ToolsOzoneTeamListMembersError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneTeamListMembersError = ClosedEnum<
  typeof ToolsOzoneTeamListMembersError
>;

/**
 * Bad Request
 */
export type ToolsOzoneTeamListMembersBadRequestErrorData = {
  error: ToolsOzoneTeamListMembersError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneTeamListMembersBadRequestError extends BlueskyError {
  error: ToolsOzoneTeamListMembersError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneTeamListMembersBadRequestErrorData;

  constructor(
    err: ToolsOzoneTeamListMembersBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneTeamListMembersBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneTeamListMembersAuthMissingError$inboundSchema: z.ZodType<
  ToolsOzoneTeamListMembersAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneTeamListMembersAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneTeamListMembersAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneTeamListMembersAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneTeamListMembersAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneTeamListMembersAuthMissingError
  > = z.instanceof(ToolsOzoneTeamListMembersAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneTeamListMembersAuthMissingError$ {
  /** @deprecated use `ToolsOzoneTeamListMembersAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneTeamListMembersAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneTeamListMembersAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneTeamListMembersAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneTeamListMembersAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneTeamListMembersAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneTeamListMembersError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneTeamListMembersError
> = z.nativeEnum(ToolsOzoneTeamListMembersError);

/** @internal */
export const ToolsOzoneTeamListMembersError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneTeamListMembersError
> = ToolsOzoneTeamListMembersError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneTeamListMembersError$ {
  /** @deprecated use `ToolsOzoneTeamListMembersError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneTeamListMembersError$inboundSchema;
  /** @deprecated use `ToolsOzoneTeamListMembersError$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneTeamListMembersError$outboundSchema;
}

/** @internal */
export const ToolsOzoneTeamListMembersBadRequestError$inboundSchema: z.ZodType<
  ToolsOzoneTeamListMembersBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ToolsOzoneTeamListMembersError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneTeamListMembersBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneTeamListMembersBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneTeamListMembersBadRequestError$outboundSchema: z.ZodType<
  ToolsOzoneTeamListMembersBadRequestError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneTeamListMembersBadRequestError
> = z.instanceof(ToolsOzoneTeamListMembersBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ToolsOzoneTeamListMembersError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneTeamListMembersBadRequestError$ {
  /** @deprecated use `ToolsOzoneTeamListMembersBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneTeamListMembersBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneTeamListMembersBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneTeamListMembersBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneTeamListMembersBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneTeamListMembersBadRequestError$Outbound;
}
