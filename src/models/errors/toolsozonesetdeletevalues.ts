/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSetDeleteValuesAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSetDeleteValuesAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetDeleteValuesAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSetDeleteValuesAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetDeleteValuesAuthMissingError";
  }
}

export const ToolsOzoneSetDeleteValuesError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  SetNotFound: "SetNotFound",
} as const;
export type ToolsOzoneSetDeleteValuesError = ClosedEnum<
  typeof ToolsOzoneSetDeleteValuesError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSetDeleteValuesBadRequestErrorData = {
  error: ToolsOzoneSetDeleteValuesError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSetDeleteValuesBadRequestError extends BlueskyError {
  error: ToolsOzoneSetDeleteValuesError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetDeleteValuesBadRequestErrorData;

  constructor(
    err: ToolsOzoneSetDeleteValuesBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetDeleteValuesBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSetDeleteValuesAuthMissingError$inboundSchema: z.ZodType<
  ToolsOzoneSetDeleteValuesAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetDeleteValuesAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetDeleteValuesAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSetDeleteValuesAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneSetDeleteValuesAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSetDeleteValuesAuthMissingError
  > = z.instanceof(ToolsOzoneSetDeleteValuesAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetDeleteValuesAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSetDeleteValuesAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetDeleteValuesAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetDeleteValuesAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetDeleteValuesAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetDeleteValuesAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetDeleteValuesAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSetDeleteValuesError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetDeleteValuesError
> = z.nativeEnum(ToolsOzoneSetDeleteValuesError);

/** @internal */
export const ToolsOzoneSetDeleteValuesError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetDeleteValuesError
> = ToolsOzoneSetDeleteValuesError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetDeleteValuesError$ {
  /** @deprecated use `ToolsOzoneSetDeleteValuesError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSetDeleteValuesError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetDeleteValuesError$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneSetDeleteValuesError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSetDeleteValuesBadRequestError$inboundSchema: z.ZodType<
  ToolsOzoneSetDeleteValuesBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ToolsOzoneSetDeleteValuesError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetDeleteValuesBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetDeleteValuesBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSetDeleteValuesBadRequestError$outboundSchema: z.ZodType<
  ToolsOzoneSetDeleteValuesBadRequestError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSetDeleteValuesBadRequestError
> = z.instanceof(ToolsOzoneSetDeleteValuesBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ToolsOzoneSetDeleteValuesError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetDeleteValuesBadRequestError$ {
  /** @deprecated use `ToolsOzoneSetDeleteValuesBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetDeleteValuesBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetDeleteValuesBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetDeleteValuesBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetDeleteValuesBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetDeleteValuesBadRequestError$Outbound;
}
