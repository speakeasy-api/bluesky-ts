/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneCommunicationDeleteTemplateAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneCommunicationDeleteTemplateAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneCommunicationDeleteTemplateAuthMissingErrorData;

  constructor(
    err: ToolsOzoneCommunicationDeleteTemplateAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneCommunicationDeleteTemplateAuthMissingError";
  }
}

export const ToolsOzoneCommunicationDeleteTemplateError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneCommunicationDeleteTemplateError = ClosedEnum<
  typeof ToolsOzoneCommunicationDeleteTemplateError
>;

/**
 * Bad Request
 */
export type ToolsOzoneCommunicationDeleteTemplateBadRequestErrorData = {
  error: ToolsOzoneCommunicationDeleteTemplateError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneCommunicationDeleteTemplateBadRequestError
  extends BlueskyError
{
  error: ToolsOzoneCommunicationDeleteTemplateError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneCommunicationDeleteTemplateBadRequestErrorData;

  constructor(
    err: ToolsOzoneCommunicationDeleteTemplateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneCommunicationDeleteTemplateBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneCommunicationDeleteTemplateAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationDeleteTemplateAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneCommunicationDeleteTemplateAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneCommunicationDeleteTemplateAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneCommunicationDeleteTemplateAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationDeleteTemplateAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationDeleteTemplateAuthMissingError
  > = z.instanceof(ToolsOzoneCommunicationDeleteTemplateAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationDeleteTemplateAuthMissingError$ {
  /** @deprecated use `ToolsOzoneCommunicationDeleteTemplateAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationDeleteTemplateAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationDeleteTemplateAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationDeleteTemplateAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationDeleteTemplateAuthMissingError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneCommunicationDeleteTemplateAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneCommunicationDeleteTemplateError$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationDeleteTemplateError> = z
    .nativeEnum(ToolsOzoneCommunicationDeleteTemplateError);

/** @internal */
export const ToolsOzoneCommunicationDeleteTemplateError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationDeleteTemplateError> =
    ToolsOzoneCommunicationDeleteTemplateError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationDeleteTemplateError$ {
  /** @deprecated use `ToolsOzoneCommunicationDeleteTemplateError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationDeleteTemplateError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationDeleteTemplateError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationDeleteTemplateError$outboundSchema;
}

/** @internal */
export const ToolsOzoneCommunicationDeleteTemplateBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationDeleteTemplateBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneCommunicationDeleteTemplateError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneCommunicationDeleteTemplateBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneCommunicationDeleteTemplateBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneCommunicationDeleteTemplateBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationDeleteTemplateBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationDeleteTemplateBadRequestError
  > = z.instanceof(ToolsOzoneCommunicationDeleteTemplateBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneCommunicationDeleteTemplateError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationDeleteTemplateBadRequestError$ {
  /** @deprecated use `ToolsOzoneCommunicationDeleteTemplateBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationDeleteTemplateBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationDeleteTemplateBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationDeleteTemplateBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationDeleteTemplateBadRequestError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneCommunicationDeleteTemplateBadRequestError$Outbound;
}
