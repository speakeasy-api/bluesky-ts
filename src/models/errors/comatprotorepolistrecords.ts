/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoListRecordsAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoListRecordsAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoListRecordsAuthMissingErrorData;

  constructor(
    err: ComAtprotoRepoListRecordsAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoListRecordsAuthMissingError";
  }
}

export const ComAtprotoRepoListRecordsError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoRepoListRecordsError = ClosedEnum<
  typeof ComAtprotoRepoListRecordsError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoListRecordsBadRequestErrorData = {
  error: ComAtprotoRepoListRecordsError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoListRecordsBadRequestError extends BlueskyError {
  error: ComAtprotoRepoListRecordsError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoListRecordsBadRequestErrorData;

  constructor(
    err: ComAtprotoRepoListRecordsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoListRecordsBadRequestError";
  }
}

/** @internal */
export const ComAtprotoRepoListRecordsAuthMissingError$inboundSchema: z.ZodType<
  ComAtprotoRepoListRecordsAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoListRecordsAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoListRecordsAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoListRecordsAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoRepoListRecordsAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoRepoListRecordsAuthMissingError
  > = z.instanceof(ComAtprotoRepoListRecordsAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoListRecordsAuthMissingError$ {
  /** @deprecated use `ComAtprotoRepoListRecordsAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoListRecordsAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoListRecordsAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoListRecordsAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoListRecordsAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoListRecordsAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoRepoListRecordsError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoListRecordsError
> = z.nativeEnum(ComAtprotoRepoListRecordsError);

/** @internal */
export const ComAtprotoRepoListRecordsError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoListRecordsError
> = ComAtprotoRepoListRecordsError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoListRecordsError$ {
  /** @deprecated use `ComAtprotoRepoListRecordsError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoListRecordsError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoListRecordsError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoListRecordsError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoListRecordsBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoRepoListRecordsBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoRepoListRecordsError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoListRecordsBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoListRecordsBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoListRecordsBadRequestError$outboundSchema: z.ZodType<
  ComAtprotoRepoListRecordsBadRequestError$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoListRecordsBadRequestError
> = z.instanceof(ComAtprotoRepoListRecordsBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoRepoListRecordsError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoListRecordsBadRequestError$ {
  /** @deprecated use `ComAtprotoRepoListRecordsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoListRecordsBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoListRecordsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoListRecordsBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoListRecordsBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoListRecordsBadRequestError$Outbound;
}
