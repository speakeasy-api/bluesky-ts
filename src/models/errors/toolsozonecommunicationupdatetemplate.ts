/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneCommunicationUpdateTemplateAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneCommunicationUpdateTemplateAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneCommunicationUpdateTemplateAuthMissingErrorData;

  constructor(
    err: ToolsOzoneCommunicationUpdateTemplateAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneCommunicationUpdateTemplateAuthMissingError";
  }
}

export const ToolsOzoneCommunicationUpdateTemplateError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  DuplicateTemplateName: "DuplicateTemplateName",
} as const;
export type ToolsOzoneCommunicationUpdateTemplateError = ClosedEnum<
  typeof ToolsOzoneCommunicationUpdateTemplateError
>;

/**
 * Bad Request
 */
export type ToolsOzoneCommunicationUpdateTemplateBadRequestErrorData = {
  error: ToolsOzoneCommunicationUpdateTemplateError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneCommunicationUpdateTemplateBadRequestError
  extends BlueskyError
{
  error: ToolsOzoneCommunicationUpdateTemplateError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneCommunicationUpdateTemplateBadRequestErrorData;

  constructor(
    err: ToolsOzoneCommunicationUpdateTemplateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneCommunicationUpdateTemplateBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationUpdateTemplateAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneCommunicationUpdateTemplateAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneCommunicationUpdateTemplateAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationUpdateTemplateAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationUpdateTemplateAuthMissingError
  > = z.instanceof(ToolsOzoneCommunicationUpdateTemplateAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationUpdateTemplateAuthMissingError$ {
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationUpdateTemplateAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationUpdateTemplateAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateAuthMissingError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneCommunicationUpdateTemplateAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateError$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationUpdateTemplateError> = z
    .nativeEnum(ToolsOzoneCommunicationUpdateTemplateError);

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationUpdateTemplateError> =
    ToolsOzoneCommunicationUpdateTemplateError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationUpdateTemplateError$ {
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationUpdateTemplateError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationUpdateTemplateError$outboundSchema;
}

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationUpdateTemplateBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneCommunicationUpdateTemplateError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneCommunicationUpdateTemplateBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneCommunicationUpdateTemplateBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationUpdateTemplateBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationUpdateTemplateBadRequestError
  > = z.instanceof(ToolsOzoneCommunicationUpdateTemplateBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneCommunicationUpdateTemplateError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationUpdateTemplateBadRequestError$ {
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationUpdateTemplateBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationUpdateTemplateBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateBadRequestError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneCommunicationUpdateTemplateBadRequestError$Outbound;
}
