/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBodyData =
  {
    error: "AuthMissing";
    message: string;
  };

/**
 * Unauthorized
 */
export class ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$:
    ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBodyData;

  constructor(
    err:
      ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name =
      "ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody";
  }
}

export const ToolsOzoneCommunicationUpdateTemplateError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  DuplicateTemplateName: "DuplicateTemplateName",
} as const;
export type ToolsOzoneCommunicationUpdateTemplateError = ClosedEnum<
  typeof ToolsOzoneCommunicationUpdateTemplateError
>;

/**
 * Bad Request
 */
export type ToolsOzoneCommunicationUpdateTemplateResponseBodyData = {
  error: ToolsOzoneCommunicationUpdateTemplateError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneCommunicationUpdateTemplateResponseBody extends Error {
  error: ToolsOzoneCommunicationUpdateTemplateError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneCommunicationUpdateTemplateResponseBodyData;

  constructor(err: ToolsOzoneCommunicationUpdateTemplateResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ToolsOzoneCommunicationUpdateTemplateResponseBody";
  }
}

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody$inboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody(
        v,
      );
    });

/** @internal */
export type ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody$Outbound =
  {
    error: "AuthMissing";
    message: string;
  };

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody
  > = z.instanceof(
    ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody$ {
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody$Outbound` instead. */
  export type Outbound =
    ToolsOzoneCommunicationUpdateTemplateOzoneCommunicationResponseBody$Outbound;
}

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateError$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationUpdateTemplateError> = z
    .nativeEnum(ToolsOzoneCommunicationUpdateTemplateError);

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationUpdateTemplateError> =
    ToolsOzoneCommunicationUpdateTemplateError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationUpdateTemplateError$ {
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationUpdateTemplateError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationUpdateTemplateError$outboundSchema;
}

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateResponseBody$inboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationUpdateTemplateResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneCommunicationUpdateTemplateError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneCommunicationUpdateTemplateResponseBody(v);
    });

/** @internal */
export type ToolsOzoneCommunicationUpdateTemplateResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationUpdateTemplateResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationUpdateTemplateResponseBody
  > = z.instanceof(ToolsOzoneCommunicationUpdateTemplateResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneCommunicationUpdateTemplateError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationUpdateTemplateResponseBody$ {
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationUpdateTemplateResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationUpdateTemplateResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateResponseBody$Outbound` instead. */
  export type Outbound =
    ToolsOzoneCommunicationUpdateTemplateResponseBody$Outbound;
}
