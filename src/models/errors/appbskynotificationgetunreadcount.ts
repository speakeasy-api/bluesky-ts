/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type AppBskyNotificationGetUnreadCountAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class AppBskyNotificationGetUnreadCountAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: AppBskyNotificationGetUnreadCountAuthMissingErrorData;

  constructor(
    err: AppBskyNotificationGetUnreadCountAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "AppBskyNotificationGetUnreadCountAuthMissingError";
  }
}

export const AppBskyNotificationGetUnreadCountError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type AppBskyNotificationGetUnreadCountError = ClosedEnum<
  typeof AppBskyNotificationGetUnreadCountError
>;

/**
 * Bad Request
 */
export type AppBskyNotificationGetUnreadCountBadRequestErrorData = {
  error: AppBskyNotificationGetUnreadCountError;
  message: string;
};

/**
 * Bad Request
 */
export class AppBskyNotificationGetUnreadCountBadRequestError
  extends BlueskyError
{
  error: AppBskyNotificationGetUnreadCountError;

  /** The original data that was passed to this error instance. */
  data$: AppBskyNotificationGetUnreadCountBadRequestErrorData;

  constructor(
    err: AppBskyNotificationGetUnreadCountBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "AppBskyNotificationGetUnreadCountBadRequestError";
  }
}

/** @internal */
export const AppBskyNotificationGetUnreadCountAuthMissingError$inboundSchema:
  z.ZodType<
    AppBskyNotificationGetUnreadCountAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AppBskyNotificationGetUnreadCountAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AppBskyNotificationGetUnreadCountAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const AppBskyNotificationGetUnreadCountAuthMissingError$outboundSchema:
  z.ZodType<
    AppBskyNotificationGetUnreadCountAuthMissingError$Outbound,
    z.ZodTypeDef,
    AppBskyNotificationGetUnreadCountAuthMissingError
  > = z.instanceof(AppBskyNotificationGetUnreadCountAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyNotificationGetUnreadCountAuthMissingError$ {
  /** @deprecated use `AppBskyNotificationGetUnreadCountAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyNotificationGetUnreadCountAuthMissingError$inboundSchema;
  /** @deprecated use `AppBskyNotificationGetUnreadCountAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyNotificationGetUnreadCountAuthMissingError$outboundSchema;
  /** @deprecated use `AppBskyNotificationGetUnreadCountAuthMissingError$Outbound` instead. */
  export type Outbound =
    AppBskyNotificationGetUnreadCountAuthMissingError$Outbound;
}

/** @internal */
export const AppBskyNotificationGetUnreadCountError$inboundSchema:
  z.ZodNativeEnum<typeof AppBskyNotificationGetUnreadCountError> = z.nativeEnum(
    AppBskyNotificationGetUnreadCountError,
  );

/** @internal */
export const AppBskyNotificationGetUnreadCountError$outboundSchema:
  z.ZodNativeEnum<typeof AppBskyNotificationGetUnreadCountError> =
    AppBskyNotificationGetUnreadCountError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyNotificationGetUnreadCountError$ {
  /** @deprecated use `AppBskyNotificationGetUnreadCountError$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyNotificationGetUnreadCountError$inboundSchema;
  /** @deprecated use `AppBskyNotificationGetUnreadCountError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyNotificationGetUnreadCountError$outboundSchema;
}

/** @internal */
export const AppBskyNotificationGetUnreadCountBadRequestError$inboundSchema:
  z.ZodType<
    AppBskyNotificationGetUnreadCountBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: AppBskyNotificationGetUnreadCountError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AppBskyNotificationGetUnreadCountBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AppBskyNotificationGetUnreadCountBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const AppBskyNotificationGetUnreadCountBadRequestError$outboundSchema:
  z.ZodType<
    AppBskyNotificationGetUnreadCountBadRequestError$Outbound,
    z.ZodTypeDef,
    AppBskyNotificationGetUnreadCountBadRequestError
  > = z.instanceof(AppBskyNotificationGetUnreadCountBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: AppBskyNotificationGetUnreadCountError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyNotificationGetUnreadCountBadRequestError$ {
  /** @deprecated use `AppBskyNotificationGetUnreadCountBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyNotificationGetUnreadCountBadRequestError$inboundSchema;
  /** @deprecated use `AppBskyNotificationGetUnreadCountBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyNotificationGetUnreadCountBadRequestError$outboundSchema;
  /** @deprecated use `AppBskyNotificationGetUnreadCountBadRequestError$Outbound` instead. */
  export type Outbound =
    AppBskyNotificationGetUnreadCountBadRequestError$Outbound;
}
