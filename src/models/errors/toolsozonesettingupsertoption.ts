/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyErrorData;

  constructor(
    err: UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError";
  }
}

export const ToolsOzoneSettingUpsertOptionError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSettingUpsertOptionError = ClosedEnum<
  typeof ToolsOzoneSettingUpsertOptionError
>;

/**
 * Bad Request
 */
export type BadRequestToolsOzoneSettingUpsertOptionResponseBodyErrorData = {
  error: ToolsOzoneSettingUpsertOptionError;
  message: string;
};

/**
 * Bad Request
 */
export class BadRequestToolsOzoneSettingUpsertOptionResponseBodyError
  extends Error
{
  error: ToolsOzoneSettingUpsertOptionError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestToolsOzoneSettingUpsertOptionResponseBodyErrorData;

  constructor(
    err: BadRequestToolsOzoneSettingUpsertOptionResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestToolsOzoneSettingUpsertOptionResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError(v);
    });

/** @internal */
export type UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError$Outbound =
  {
    error: "AuthMissing";
    message: string;
  };

/** @internal */
export const UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError
  > = z.instanceof(UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError$ {
  /** @deprecated use `UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedToolsOzoneSettingUpsertOptionResponseBodyError$Outbound;
}

/** @internal */
export const ToolsOzoneSettingUpsertOptionError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSettingUpsertOptionError
> = z.nativeEnum(ToolsOzoneSettingUpsertOptionError);

/** @internal */
export const ToolsOzoneSettingUpsertOptionError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSettingUpsertOptionError
> = ToolsOzoneSettingUpsertOptionError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingUpsertOptionError$ {
  /** @deprecated use `ToolsOzoneSettingUpsertOptionError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSettingUpsertOptionError$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingUpsertOptionError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingUpsertOptionError$outboundSchema;
}

/** @internal */
export const BadRequestToolsOzoneSettingUpsertOptionResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestToolsOzoneSettingUpsertOptionResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneSettingUpsertOptionError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestToolsOzoneSettingUpsertOptionResponseBodyError(v);
    });

/** @internal */
export type BadRequestToolsOzoneSettingUpsertOptionResponseBodyError$Outbound =
  {
    error: string;
    message: string;
  };

/** @internal */
export const BadRequestToolsOzoneSettingUpsertOptionResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestToolsOzoneSettingUpsertOptionResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestToolsOzoneSettingUpsertOptionResponseBodyError
  > = z.instanceof(BadRequestToolsOzoneSettingUpsertOptionResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneSettingUpsertOptionError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestToolsOzoneSettingUpsertOptionResponseBodyError$ {
  /** @deprecated use `BadRequestToolsOzoneSettingUpsertOptionResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestToolsOzoneSettingUpsertOptionResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestToolsOzoneSettingUpsertOptionResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestToolsOzoneSettingUpsertOptionResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestToolsOzoneSettingUpsertOptionResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestToolsOzoneSettingUpsertOptionResponseBodyError$Outbound;
}
