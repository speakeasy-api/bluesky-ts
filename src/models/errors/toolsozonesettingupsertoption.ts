/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSettingUpsertOptionAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSettingUpsertOptionAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSettingUpsertOptionAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSettingUpsertOptionAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSettingUpsertOptionAuthMissingError";
  }
}

export const ToolsOzoneSettingUpsertOptionError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSettingUpsertOptionError = ClosedEnum<
  typeof ToolsOzoneSettingUpsertOptionError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSettingUpsertOptionBadRequestErrorData = {
  error: ToolsOzoneSettingUpsertOptionError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSettingUpsertOptionBadRequestError extends BlueskyError {
  error: ToolsOzoneSettingUpsertOptionError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSettingUpsertOptionBadRequestErrorData;

  constructor(
    err: ToolsOzoneSettingUpsertOptionBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSettingUpsertOptionBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSettingUpsertOptionAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneSettingUpsertOptionAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSettingUpsertOptionAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSettingUpsertOptionAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSettingUpsertOptionAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneSettingUpsertOptionAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSettingUpsertOptionAuthMissingError
  > = z.instanceof(ToolsOzoneSettingUpsertOptionAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingUpsertOptionAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSettingUpsertOptionAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSettingUpsertOptionAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingUpsertOptionAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingUpsertOptionAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSettingUpsertOptionAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneSettingUpsertOptionAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSettingUpsertOptionError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSettingUpsertOptionError
> = z.nativeEnum(ToolsOzoneSettingUpsertOptionError);

/** @internal */
export const ToolsOzoneSettingUpsertOptionError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSettingUpsertOptionError
> = ToolsOzoneSettingUpsertOptionError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingUpsertOptionError$ {
  /** @deprecated use `ToolsOzoneSettingUpsertOptionError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSettingUpsertOptionError$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingUpsertOptionError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingUpsertOptionError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSettingUpsertOptionBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneSettingUpsertOptionBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneSettingUpsertOptionError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSettingUpsertOptionBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSettingUpsertOptionBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSettingUpsertOptionBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneSettingUpsertOptionBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSettingUpsertOptionBadRequestError
  > = z.instanceof(ToolsOzoneSettingUpsertOptionBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneSettingUpsertOptionError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingUpsertOptionBadRequestError$ {
  /** @deprecated use `ToolsOzoneSettingUpsertOptionBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSettingUpsertOptionBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingUpsertOptionBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingUpsertOptionBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSettingUpsertOptionBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneSettingUpsertOptionBadRequestError$Outbound;
}
