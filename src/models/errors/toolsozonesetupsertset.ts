/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSetUpsertSetAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSetUpsertSetAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetUpsertSetAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSetUpsertSetAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetUpsertSetAuthMissingError";
  }
}

export const ToolsOzoneSetUpsertSetError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSetUpsertSetError = ClosedEnum<
  typeof ToolsOzoneSetUpsertSetError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSetUpsertSetBadRequestErrorData = {
  error: ToolsOzoneSetUpsertSetError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSetUpsertSetBadRequestError extends BlueskyError {
  error: ToolsOzoneSetUpsertSetError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetUpsertSetBadRequestErrorData;

  constructor(
    err: ToolsOzoneSetUpsertSetBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetUpsertSetBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSetUpsertSetAuthMissingError$inboundSchema: z.ZodType<
  ToolsOzoneSetUpsertSetAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetUpsertSetAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetUpsertSetAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSetUpsertSetAuthMissingError$outboundSchema: z.ZodType<
  ToolsOzoneSetUpsertSetAuthMissingError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSetUpsertSetAuthMissingError
> = z.instanceof(ToolsOzoneSetUpsertSetAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetUpsertSetAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSetUpsertSetAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetUpsertSetAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetUpsertSetAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetUpsertSetAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetUpsertSetAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetUpsertSetAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSetUpsertSetError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetUpsertSetError
> = z.nativeEnum(ToolsOzoneSetUpsertSetError);

/** @internal */
export const ToolsOzoneSetUpsertSetError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetUpsertSetError
> = ToolsOzoneSetUpsertSetError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetUpsertSetError$ {
  /** @deprecated use `ToolsOzoneSetUpsertSetError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSetUpsertSetError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetUpsertSetError$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneSetUpsertSetError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSetUpsertSetBadRequestError$inboundSchema: z.ZodType<
  ToolsOzoneSetUpsertSetBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ToolsOzoneSetUpsertSetError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetUpsertSetBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetUpsertSetBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSetUpsertSetBadRequestError$outboundSchema: z.ZodType<
  ToolsOzoneSetUpsertSetBadRequestError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSetUpsertSetBadRequestError
> = z.instanceof(ToolsOzoneSetUpsertSetBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ToolsOzoneSetUpsertSetError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetUpsertSetBadRequestError$ {
  /** @deprecated use `ToolsOzoneSetUpsertSetBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetUpsertSetBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetUpsertSetBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetUpsertSetBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetUpsertSetBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetUpsertSetBadRequestError$Outbound;
}
