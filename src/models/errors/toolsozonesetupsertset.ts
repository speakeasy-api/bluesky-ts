/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedToolsOzoneSetUpsertSetResponseBodyErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class UnauthorizedToolsOzoneSetUpsertSetResponseBodyError extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedToolsOzoneSetUpsertSetResponseBodyErrorData;

  constructor(err: UnauthorizedToolsOzoneSetUpsertSetResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "UnauthorizedToolsOzoneSetUpsertSetResponseBodyError";
  }
}

export const ToolsOzoneSetUpsertSetError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSetUpsertSetError = ClosedEnum<
  typeof ToolsOzoneSetUpsertSetError
>;

/**
 * Bad Request
 */
export type BadRequestToolsOzoneSetUpsertSetResponseBodyErrorData = {
  error: ToolsOzoneSetUpsertSetError;
  message: string;
};

/**
 * Bad Request
 */
export class BadRequestToolsOzoneSetUpsertSetResponseBodyError extends Error {
  error: ToolsOzoneSetUpsertSetError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestToolsOzoneSetUpsertSetResponseBodyErrorData;

  constructor(err: BadRequestToolsOzoneSetUpsertSetResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestToolsOzoneSetUpsertSetResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedToolsOzoneSetUpsertSetResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedToolsOzoneSetUpsertSetResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedToolsOzoneSetUpsertSetResponseBodyError(v);
    });

/** @internal */
export type UnauthorizedToolsOzoneSetUpsertSetResponseBodyError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const UnauthorizedToolsOzoneSetUpsertSetResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedToolsOzoneSetUpsertSetResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedToolsOzoneSetUpsertSetResponseBodyError
  > = z.instanceof(UnauthorizedToolsOzoneSetUpsertSetResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedToolsOzoneSetUpsertSetResponseBodyError$ {
  /** @deprecated use `UnauthorizedToolsOzoneSetUpsertSetResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedToolsOzoneSetUpsertSetResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedToolsOzoneSetUpsertSetResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedToolsOzoneSetUpsertSetResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedToolsOzoneSetUpsertSetResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedToolsOzoneSetUpsertSetResponseBodyError$Outbound;
}

/** @internal */
export const ToolsOzoneSetUpsertSetError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetUpsertSetError
> = z.nativeEnum(ToolsOzoneSetUpsertSetError);

/** @internal */
export const ToolsOzoneSetUpsertSetError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetUpsertSetError
> = ToolsOzoneSetUpsertSetError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetUpsertSetError$ {
  /** @deprecated use `ToolsOzoneSetUpsertSetError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSetUpsertSetError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetUpsertSetError$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneSetUpsertSetError$outboundSchema;
}

/** @internal */
export const BadRequestToolsOzoneSetUpsertSetResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestToolsOzoneSetUpsertSetResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneSetUpsertSetError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestToolsOzoneSetUpsertSetResponseBodyError(v);
    });

/** @internal */
export type BadRequestToolsOzoneSetUpsertSetResponseBodyError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const BadRequestToolsOzoneSetUpsertSetResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestToolsOzoneSetUpsertSetResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestToolsOzoneSetUpsertSetResponseBodyError
  > = z.instanceof(BadRequestToolsOzoneSetUpsertSetResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneSetUpsertSetError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestToolsOzoneSetUpsertSetResponseBodyError$ {
  /** @deprecated use `BadRequestToolsOzoneSetUpsertSetResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestToolsOzoneSetUpsertSetResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestToolsOzoneSetUpsertSetResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestToolsOzoneSetUpsertSetResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestToolsOzoneSetUpsertSetResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestToolsOzoneSetUpsertSetResponseBodyError$Outbound;
}
