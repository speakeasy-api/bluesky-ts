/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoApplyWritesAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoApplyWritesAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoApplyWritesAuthMissingErrorData;

  constructor(
    err: ComAtprotoRepoApplyWritesAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoApplyWritesAuthMissingError";
  }
}

export const ComAtprotoRepoApplyWritesError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  InvalidSwap: "InvalidSwap",
} as const;
export type ComAtprotoRepoApplyWritesError = ClosedEnum<
  typeof ComAtprotoRepoApplyWritesError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoApplyWritesBadRequestErrorData = {
  error: ComAtprotoRepoApplyWritesError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoApplyWritesBadRequestError extends BlueskyError {
  error: ComAtprotoRepoApplyWritesError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoApplyWritesBadRequestErrorData;

  constructor(
    err: ComAtprotoRepoApplyWritesBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoApplyWritesBadRequestError";
  }
}

/** @internal */
export const ComAtprotoRepoApplyWritesAuthMissingError$inboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoApplyWritesAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoApplyWritesAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoApplyWritesAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoRepoApplyWritesAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoRepoApplyWritesAuthMissingError
  > = z.instanceof(ComAtprotoRepoApplyWritesAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoApplyWritesAuthMissingError$ {
  /** @deprecated use `ComAtprotoRepoApplyWritesAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoApplyWritesAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoApplyWritesAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoApplyWritesAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoRepoApplyWritesError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoApplyWritesError
> = z.nativeEnum(ComAtprotoRepoApplyWritesError);

/** @internal */
export const ComAtprotoRepoApplyWritesError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoApplyWritesError
> = ComAtprotoRepoApplyWritesError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoApplyWritesError$ {
  /** @deprecated use `ComAtprotoRepoApplyWritesError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoApplyWritesError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoApplyWritesError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoApplyWritesBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoRepoApplyWritesError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoApplyWritesBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoApplyWritesBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoApplyWritesBadRequestError$outboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesBadRequestError$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoApplyWritesBadRequestError
> = z.instanceof(ComAtprotoRepoApplyWritesBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoRepoApplyWritesError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoApplyWritesBadRequestError$ {
  /** @deprecated use `ComAtprotoRepoApplyWritesBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoApplyWritesBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoApplyWritesBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoApplyWritesBadRequestError$Outbound;
}
