/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type AppBskyFeedGetPostThreadAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class AppBskyFeedGetPostThreadAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: AppBskyFeedGetPostThreadAuthMissingErrorData;

  constructor(
    err: AppBskyFeedGetPostThreadAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "AppBskyFeedGetPostThreadAuthMissingError";
  }
}

export const AppBskyFeedGetPostThreadError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  NotFound: "NotFound",
} as const;
export type AppBskyFeedGetPostThreadError = ClosedEnum<
  typeof AppBskyFeedGetPostThreadError
>;

/**
 * Bad Request
 */
export type AppBskyFeedGetPostThreadBadRequestErrorData = {
  error: AppBskyFeedGetPostThreadError;
  message: string;
};

/**
 * Bad Request
 */
export class AppBskyFeedGetPostThreadBadRequestError extends BlueskyError {
  error: AppBskyFeedGetPostThreadError;

  /** The original data that was passed to this error instance. */
  data$: AppBskyFeedGetPostThreadBadRequestErrorData;

  constructor(
    err: AppBskyFeedGetPostThreadBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "AppBskyFeedGetPostThreadBadRequestError";
  }
}

/** @internal */
export const AppBskyFeedGetPostThreadAuthMissingError$inboundSchema: z.ZodType<
  AppBskyFeedGetPostThreadAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AppBskyFeedGetPostThreadAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AppBskyFeedGetPostThreadAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const AppBskyFeedGetPostThreadAuthMissingError$outboundSchema: z.ZodType<
  AppBskyFeedGetPostThreadAuthMissingError$Outbound,
  z.ZodTypeDef,
  AppBskyFeedGetPostThreadAuthMissingError
> = z.instanceof(AppBskyFeedGetPostThreadAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedGetPostThreadAuthMissingError$ {
  /** @deprecated use `AppBskyFeedGetPostThreadAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyFeedGetPostThreadAuthMissingError$inboundSchema;
  /** @deprecated use `AppBskyFeedGetPostThreadAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyFeedGetPostThreadAuthMissingError$outboundSchema;
  /** @deprecated use `AppBskyFeedGetPostThreadAuthMissingError$Outbound` instead. */
  export type Outbound = AppBskyFeedGetPostThreadAuthMissingError$Outbound;
}

/** @internal */
export const AppBskyFeedGetPostThreadError$inboundSchema: z.ZodNativeEnum<
  typeof AppBskyFeedGetPostThreadError
> = z.nativeEnum(AppBskyFeedGetPostThreadError);

/** @internal */
export const AppBskyFeedGetPostThreadError$outboundSchema: z.ZodNativeEnum<
  typeof AppBskyFeedGetPostThreadError
> = AppBskyFeedGetPostThreadError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedGetPostThreadError$ {
  /** @deprecated use `AppBskyFeedGetPostThreadError$inboundSchema` instead. */
  export const inboundSchema = AppBskyFeedGetPostThreadError$inboundSchema;
  /** @deprecated use `AppBskyFeedGetPostThreadError$outboundSchema` instead. */
  export const outboundSchema = AppBskyFeedGetPostThreadError$outboundSchema;
}

/** @internal */
export const AppBskyFeedGetPostThreadBadRequestError$inboundSchema: z.ZodType<
  AppBskyFeedGetPostThreadBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: AppBskyFeedGetPostThreadError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AppBskyFeedGetPostThreadBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AppBskyFeedGetPostThreadBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const AppBskyFeedGetPostThreadBadRequestError$outboundSchema: z.ZodType<
  AppBskyFeedGetPostThreadBadRequestError$Outbound,
  z.ZodTypeDef,
  AppBskyFeedGetPostThreadBadRequestError
> = z.instanceof(AppBskyFeedGetPostThreadBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: AppBskyFeedGetPostThreadError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedGetPostThreadBadRequestError$ {
  /** @deprecated use `AppBskyFeedGetPostThreadBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyFeedGetPostThreadBadRequestError$inboundSchema;
  /** @deprecated use `AppBskyFeedGetPostThreadBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyFeedGetPostThreadBadRequestError$outboundSchema;
  /** @deprecated use `AppBskyFeedGetPostThreadBadRequestError$Outbound` instead. */
  export type Outbound = AppBskyFeedGetPostThreadBadRequestError$Outbound;
}
