/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoPutRecordAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoPutRecordAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoPutRecordAuthMissingErrorData;

  constructor(
    err: ComAtprotoRepoPutRecordAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoPutRecordAuthMissingError";
  }
}

export const ComAtprotoRepoPutRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  InvalidSwap: "InvalidSwap",
} as const;
export type ComAtprotoRepoPutRecordError = ClosedEnum<
  typeof ComAtprotoRepoPutRecordError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoPutRecordBadRequestErrorData = {
  error: ComAtprotoRepoPutRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoPutRecordBadRequestError extends BlueskyError {
  error: ComAtprotoRepoPutRecordError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoPutRecordBadRequestErrorData;

  constructor(
    err: ComAtprotoRepoPutRecordBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoPutRecordBadRequestError";
  }
}

/** @internal */
export const ComAtprotoRepoPutRecordAuthMissingError$inboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoPutRecordAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoPutRecordAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoPutRecordAuthMissingError$outboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordAuthMissingError$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoPutRecordAuthMissingError
> = z.instanceof(ComAtprotoRepoPutRecordAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoPutRecordAuthMissingError$ {
  /** @deprecated use `ComAtprotoRepoPutRecordAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoPutRecordAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoPutRecordAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoPutRecordAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoRepoPutRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoPutRecordError
> = z.nativeEnum(ComAtprotoRepoPutRecordError);

/** @internal */
export const ComAtprotoRepoPutRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoPutRecordError
> = ComAtprotoRepoPutRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoPutRecordError$ {
  /** @deprecated use `ComAtprotoRepoPutRecordError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoPutRecordError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoPutRecordError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoPutRecordBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoRepoPutRecordError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoPutRecordBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoPutRecordBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoPutRecordBadRequestError$outboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordBadRequestError$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoPutRecordBadRequestError
> = z.instanceof(ComAtprotoRepoPutRecordBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoRepoPutRecordError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoPutRecordBadRequestError$ {
  /** @deprecated use `ComAtprotoRepoPutRecordBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoPutRecordBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoPutRecordBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoPutRecordBadRequestError$Outbound;
}
