/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneCommunicationListTemplatesAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneCommunicationListTemplatesAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneCommunicationListTemplatesAuthMissingErrorData;

  constructor(
    err: ToolsOzoneCommunicationListTemplatesAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneCommunicationListTemplatesAuthMissingError";
  }
}

export const ToolsOzoneCommunicationListTemplatesError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneCommunicationListTemplatesError = ClosedEnum<
  typeof ToolsOzoneCommunicationListTemplatesError
>;

/**
 * Bad Request
 */
export type ToolsOzoneCommunicationListTemplatesBadRequestErrorData = {
  error: ToolsOzoneCommunicationListTemplatesError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneCommunicationListTemplatesBadRequestError
  extends BlueskyError
{
  error: ToolsOzoneCommunicationListTemplatesError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneCommunicationListTemplatesBadRequestErrorData;

  constructor(
    err: ToolsOzoneCommunicationListTemplatesBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneCommunicationListTemplatesBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneCommunicationListTemplatesAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationListTemplatesAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneCommunicationListTemplatesAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneCommunicationListTemplatesAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneCommunicationListTemplatesAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationListTemplatesAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationListTemplatesAuthMissingError
  > = z.instanceof(ToolsOzoneCommunicationListTemplatesAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationListTemplatesAuthMissingError$ {
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationListTemplatesAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationListTemplatesAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesAuthMissingError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneCommunicationListTemplatesAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneCommunicationListTemplatesError$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationListTemplatesError> = z
    .nativeEnum(ToolsOzoneCommunicationListTemplatesError);

/** @internal */
export const ToolsOzoneCommunicationListTemplatesError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationListTemplatesError> =
    ToolsOzoneCommunicationListTemplatesError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationListTemplatesError$ {
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationListTemplatesError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationListTemplatesError$outboundSchema;
}

/** @internal */
export const ToolsOzoneCommunicationListTemplatesBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationListTemplatesBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneCommunicationListTemplatesError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneCommunicationListTemplatesBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneCommunicationListTemplatesBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneCommunicationListTemplatesBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationListTemplatesBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationListTemplatesBadRequestError
  > = z.instanceof(ToolsOzoneCommunicationListTemplatesBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneCommunicationListTemplatesError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationListTemplatesBadRequestError$ {
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationListTemplatesBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationListTemplatesBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesBadRequestError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneCommunicationListTemplatesBadRequestError$Outbound;
}
