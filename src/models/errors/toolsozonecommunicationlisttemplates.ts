/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyErrorData =
  {
    error: "AuthMissing";
    message: string;
  };

/**
 * Unauthorized
 */
export class UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyErrorData;

  constructor(
    err: UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name =
      "UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError";
  }
}

export const ToolsOzoneCommunicationListTemplatesError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneCommunicationListTemplatesError = ClosedEnum<
  typeof ToolsOzoneCommunicationListTemplatesError
>;

/**
 * Bad Request
 */
export type BadRequestToolsOzoneCommunicationListTemplatesResponseBodyErrorData =
  {
    error: ToolsOzoneCommunicationListTemplatesError;
    message: string;
  };

/**
 * Bad Request
 */
export class BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError
  extends Error
{
  error: ToolsOzoneCommunicationListTemplatesError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestToolsOzoneCommunicationListTemplatesResponseBodyErrorData;

  constructor(
    err: BadRequestToolsOzoneCommunicationListTemplatesResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name =
      "BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError(
        v,
      );
    });

/** @internal */
export type UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError$Outbound =
  {
    error: "AuthMissing";
    message: string;
  };

/** @internal */
export const UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError
  > = z.instanceof(
    UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError$ {
  /** @deprecated use `UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedToolsOzoneCommunicationListTemplatesResponseBodyError$Outbound;
}

/** @internal */
export const ToolsOzoneCommunicationListTemplatesError$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationListTemplatesError> = z
    .nativeEnum(ToolsOzoneCommunicationListTemplatesError);

/** @internal */
export const ToolsOzoneCommunicationListTemplatesError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationListTemplatesError> =
    ToolsOzoneCommunicationListTemplatesError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationListTemplatesError$ {
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationListTemplatesError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationListTemplatesError$outboundSchema;
}

/** @internal */
export const BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneCommunicationListTemplatesError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError(
        v,
      );
    });

/** @internal */
export type BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError$Outbound =
  {
    error: string;
    message: string;
  };

/** @internal */
export const BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError
  > = z.instanceof(
    BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneCommunicationListTemplatesError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError$ {
  /** @deprecated use `BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestToolsOzoneCommunicationListTemplatesResponseBodyError$Outbound;
}
