/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBodyData =
  {
    error: "AuthMissing";
    message: string;
  };

/**
 * Unauthorized
 */
export class ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBodyData;

  constructor(
    err: ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name =
      "ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody";
  }
}

export const ToolsOzoneCommunicationListTemplatesError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneCommunicationListTemplatesError = ClosedEnum<
  typeof ToolsOzoneCommunicationListTemplatesError
>;

/**
 * Bad Request
 */
export type ToolsOzoneCommunicationListTemplatesResponseBodyData = {
  error: ToolsOzoneCommunicationListTemplatesError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneCommunicationListTemplatesResponseBody extends Error {
  error: ToolsOzoneCommunicationListTemplatesError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneCommunicationListTemplatesResponseBodyData;

  constructor(err: ToolsOzoneCommunicationListTemplatesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ToolsOzoneCommunicationListTemplatesResponseBody";
  }
}

/** @internal */
export const ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody$inboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody(
        v,
      );
    });

/** @internal */
export type ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody$Outbound =
  {
    error: "AuthMissing";
    message: string;
  };

/** @internal */
export const ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody
  > = z.instanceof(
    ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody$ {
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody$Outbound` instead. */
  export type Outbound =
    ToolsOzoneCommunicationListTemplatesOzoneCommunicationResponseBody$Outbound;
}

/** @internal */
export const ToolsOzoneCommunicationListTemplatesError$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationListTemplatesError> = z
    .nativeEnum(ToolsOzoneCommunicationListTemplatesError);

/** @internal */
export const ToolsOzoneCommunicationListTemplatesError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneCommunicationListTemplatesError> =
    ToolsOzoneCommunicationListTemplatesError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationListTemplatesError$ {
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationListTemplatesError$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationListTemplatesError$outboundSchema;
}

/** @internal */
export const ToolsOzoneCommunicationListTemplatesResponseBody$inboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationListTemplatesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneCommunicationListTemplatesError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneCommunicationListTemplatesResponseBody(v);
    });

/** @internal */
export type ToolsOzoneCommunicationListTemplatesResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneCommunicationListTemplatesResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationListTemplatesResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationListTemplatesResponseBody
  > = z.instanceof(ToolsOzoneCommunicationListTemplatesResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneCommunicationListTemplatesError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationListTemplatesResponseBody$ {
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationListTemplatesResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationListTemplatesResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationListTemplatesResponseBody$Outbound` instead. */
  export type Outbound =
    ToolsOzoneCommunicationListTemplatesResponseBody$Outbound;
}
