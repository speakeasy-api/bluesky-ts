/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoServerCheckAccountStatusAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoServerCheckAccountStatusAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerCheckAccountStatusAuthMissingErrorData;

  constructor(
    err: ComAtprotoServerCheckAccountStatusAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerCheckAccountStatusAuthMissingError";
  }
}

export const ComAtprotoServerCheckAccountStatusError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoServerCheckAccountStatusError = ClosedEnum<
  typeof ComAtprotoServerCheckAccountStatusError
>;

/**
 * Bad Request
 */
export type ComAtprotoServerCheckAccountStatusBadRequestErrorData = {
  error: ComAtprotoServerCheckAccountStatusError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoServerCheckAccountStatusBadRequestError
  extends BlueskyError
{
  error: ComAtprotoServerCheckAccountStatusError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerCheckAccountStatusBadRequestErrorData;

  constructor(
    err: ComAtprotoServerCheckAccountStatusBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerCheckAccountStatusBadRequestError";
  }
}

/** @internal */
export const ComAtprotoServerCheckAccountStatusAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoServerCheckAccountStatusAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerCheckAccountStatusAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerCheckAccountStatusAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoServerCheckAccountStatusAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoServerCheckAccountStatusAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerCheckAccountStatusAuthMissingError
  > = z.instanceof(ComAtprotoServerCheckAccountStatusAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCheckAccountStatusAuthMissingError$ {
  /** @deprecated use `ComAtprotoServerCheckAccountStatusAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCheckAccountStatusAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoServerCheckAccountStatusAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCheckAccountStatusAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoServerCheckAccountStatusAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerCheckAccountStatusAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoServerCheckAccountStatusError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerCheckAccountStatusError> = z
    .nativeEnum(ComAtprotoServerCheckAccountStatusError);

/** @internal */
export const ComAtprotoServerCheckAccountStatusError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerCheckAccountStatusError> =
    ComAtprotoServerCheckAccountStatusError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCheckAccountStatusError$ {
  /** @deprecated use `ComAtprotoServerCheckAccountStatusError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCheckAccountStatusError$inboundSchema;
  /** @deprecated use `ComAtprotoServerCheckAccountStatusError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCheckAccountStatusError$outboundSchema;
}

/** @internal */
export const ComAtprotoServerCheckAccountStatusBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoServerCheckAccountStatusBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoServerCheckAccountStatusError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerCheckAccountStatusBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerCheckAccountStatusBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoServerCheckAccountStatusBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoServerCheckAccountStatusBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerCheckAccountStatusBadRequestError
  > = z.instanceof(ComAtprotoServerCheckAccountStatusBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoServerCheckAccountStatusError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCheckAccountStatusBadRequestError$ {
  /** @deprecated use `ComAtprotoServerCheckAccountStatusBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCheckAccountStatusBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoServerCheckAccountStatusBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCheckAccountStatusBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoServerCheckAccountStatusBadRequestError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerCheckAccountStatusBadRequestError$Outbound;
}
