/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoUnmuteConvoAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoUnmuteConvoAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoUnmuteConvoAuthMissingErrorData;

  constructor(
    err: ChatBskyConvoUnmuteConvoAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoUnmuteConvoAuthMissingError";
  }
}

export const ChatBskyConvoUnmuteConvoError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoUnmuteConvoError = ClosedEnum<
  typeof ChatBskyConvoUnmuteConvoError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoUnmuteConvoBadRequestErrorData = {
  error: ChatBskyConvoUnmuteConvoError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoUnmuteConvoBadRequestError extends BlueskyError {
  error: ChatBskyConvoUnmuteConvoError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoUnmuteConvoBadRequestErrorData;

  constructor(
    err: ChatBskyConvoUnmuteConvoBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoUnmuteConvoBadRequestError";
  }
}

/** @internal */
export const ChatBskyConvoUnmuteConvoAuthMissingError$inboundSchema: z.ZodType<
  ChatBskyConvoUnmuteConvoAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoUnmuteConvoAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoUnmuteConvoAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoUnmuteConvoAuthMissingError$outboundSchema: z.ZodType<
  ChatBskyConvoUnmuteConvoAuthMissingError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUnmuteConvoAuthMissingError
> = z.instanceof(ChatBskyConvoUnmuteConvoAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUnmuteConvoAuthMissingError$ {
  /** @deprecated use `ChatBskyConvoUnmuteConvoAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoUnmuteConvoAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoUnmuteConvoAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoAuthMissingError$Outbound` instead. */
  export type Outbound = ChatBskyConvoUnmuteConvoAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyConvoUnmuteConvoError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoUnmuteConvoError
> = z.nativeEnum(ChatBskyConvoUnmuteConvoError);

/** @internal */
export const ChatBskyConvoUnmuteConvoError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoUnmuteConvoError
> = ChatBskyConvoUnmuteConvoError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUnmuteConvoError$ {
  /** @deprecated use `ChatBskyConvoUnmuteConvoError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoUnmuteConvoError$inboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoUnmuteConvoError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoUnmuteConvoBadRequestError$inboundSchema: z.ZodType<
  ChatBskyConvoUnmuteConvoBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoUnmuteConvoError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoUnmuteConvoBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoUnmuteConvoBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoUnmuteConvoBadRequestError$outboundSchema: z.ZodType<
  ChatBskyConvoUnmuteConvoBadRequestError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUnmuteConvoBadRequestError
> = z.instanceof(ChatBskyConvoUnmuteConvoBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoUnmuteConvoError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUnmuteConvoBadRequestError$ {
  /** @deprecated use `ChatBskyConvoUnmuteConvoBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoUnmuteConvoBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoUnmuteConvoBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoBadRequestError$Outbound` instead. */
  export type Outbound = ChatBskyConvoUnmuteConvoBadRequestError$Outbound;
}
