/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoUnmuteConvoChatConvoResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoUnmuteConvoChatConvoResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoUnmuteConvoChatConvoResponseBodyData;

  constructor(err: ChatBskyConvoUnmuteConvoChatConvoResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoUnmuteConvoChatConvoResponseBody";
  }
}

export const ChatBskyConvoUnmuteConvoError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoUnmuteConvoError = ClosedEnum<
  typeof ChatBskyConvoUnmuteConvoError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoUnmuteConvoResponseBodyData = {
  error: ChatBskyConvoUnmuteConvoError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoUnmuteConvoResponseBody extends Error {
  error: ChatBskyConvoUnmuteConvoError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoUnmuteConvoResponseBodyData;

  constructor(err: ChatBskyConvoUnmuteConvoResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoUnmuteConvoResponseBody";
  }
}

/** @internal */
export const ChatBskyConvoUnmuteConvoChatConvoResponseBody$inboundSchema:
  z.ZodType<
    ChatBskyConvoUnmuteConvoChatConvoResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ChatBskyConvoUnmuteConvoChatConvoResponseBody(v);
    });

/** @internal */
export type ChatBskyConvoUnmuteConvoChatConvoResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoUnmuteConvoChatConvoResponseBody$outboundSchema:
  z.ZodType<
    ChatBskyConvoUnmuteConvoChatConvoResponseBody$Outbound,
    z.ZodTypeDef,
    ChatBskyConvoUnmuteConvoChatConvoResponseBody
  > = z.instanceof(ChatBskyConvoUnmuteConvoChatConvoResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUnmuteConvoChatConvoResponseBody$ {
  /** @deprecated use `ChatBskyConvoUnmuteConvoChatConvoResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoUnmuteConvoChatConvoResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoChatConvoResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoUnmuteConvoChatConvoResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoChatConvoResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoUnmuteConvoChatConvoResponseBody$Outbound;
}

/** @internal */
export const ChatBskyConvoUnmuteConvoError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoUnmuteConvoError
> = z.nativeEnum(ChatBskyConvoUnmuteConvoError);

/** @internal */
export const ChatBskyConvoUnmuteConvoError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoUnmuteConvoError
> = ChatBskyConvoUnmuteConvoError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUnmuteConvoError$ {
  /** @deprecated use `ChatBskyConvoUnmuteConvoError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoUnmuteConvoError$inboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoUnmuteConvoError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoUnmuteConvoResponseBody$inboundSchema: z.ZodType<
  ChatBskyConvoUnmuteConvoResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoUnmuteConvoError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoUnmuteConvoResponseBody(v);
  });

/** @internal */
export type ChatBskyConvoUnmuteConvoResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoUnmuteConvoResponseBody$outboundSchema: z.ZodType<
  ChatBskyConvoUnmuteConvoResponseBody$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUnmuteConvoResponseBody
> = z.instanceof(ChatBskyConvoUnmuteConvoResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoUnmuteConvoError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUnmuteConvoResponseBody$ {
  /** @deprecated use `ChatBskyConvoUnmuteConvoResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoUnmuteConvoResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoUnmuteConvoResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoUnmuteConvoResponseBody$Outbound;
}
