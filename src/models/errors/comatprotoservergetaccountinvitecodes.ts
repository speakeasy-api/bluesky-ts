/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoServerGetAccountInviteCodesAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoServerGetAccountInviteCodesAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerGetAccountInviteCodesAuthMissingErrorData;

  constructor(
    err: ComAtprotoServerGetAccountInviteCodesAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerGetAccountInviteCodesAuthMissingError";
  }
}

export const ComAtprotoServerGetAccountInviteCodesError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  DuplicateCreate: "DuplicateCreate",
} as const;
export type ComAtprotoServerGetAccountInviteCodesError = ClosedEnum<
  typeof ComAtprotoServerGetAccountInviteCodesError
>;

/**
 * Bad Request
 */
export type ComAtprotoServerGetAccountInviteCodesBadRequestErrorData = {
  error: ComAtprotoServerGetAccountInviteCodesError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoServerGetAccountInviteCodesBadRequestError
  extends BlueskyError
{
  error: ComAtprotoServerGetAccountInviteCodesError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerGetAccountInviteCodesBadRequestErrorData;

  constructor(
    err: ComAtprotoServerGetAccountInviteCodesBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerGetAccountInviteCodesBadRequestError";
  }
}

/** @internal */
export const ComAtprotoServerGetAccountInviteCodesAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoServerGetAccountInviteCodesAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerGetAccountInviteCodesAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerGetAccountInviteCodesAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoServerGetAccountInviteCodesAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoServerGetAccountInviteCodesAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerGetAccountInviteCodesAuthMissingError
  > = z.instanceof(ComAtprotoServerGetAccountInviteCodesAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerGetAccountInviteCodesAuthMissingError$ {
  /** @deprecated use `ComAtprotoServerGetAccountInviteCodesAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerGetAccountInviteCodesAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoServerGetAccountInviteCodesAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerGetAccountInviteCodesAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoServerGetAccountInviteCodesAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerGetAccountInviteCodesAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoServerGetAccountInviteCodesError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerGetAccountInviteCodesError> = z
    .nativeEnum(ComAtprotoServerGetAccountInviteCodesError);

/** @internal */
export const ComAtprotoServerGetAccountInviteCodesError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerGetAccountInviteCodesError> =
    ComAtprotoServerGetAccountInviteCodesError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerGetAccountInviteCodesError$ {
  /** @deprecated use `ComAtprotoServerGetAccountInviteCodesError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerGetAccountInviteCodesError$inboundSchema;
  /** @deprecated use `ComAtprotoServerGetAccountInviteCodesError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerGetAccountInviteCodesError$outboundSchema;
}

/** @internal */
export const ComAtprotoServerGetAccountInviteCodesBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoServerGetAccountInviteCodesBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoServerGetAccountInviteCodesError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerGetAccountInviteCodesBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerGetAccountInviteCodesBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoServerGetAccountInviteCodesBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoServerGetAccountInviteCodesBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerGetAccountInviteCodesBadRequestError
  > = z.instanceof(ComAtprotoServerGetAccountInviteCodesBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoServerGetAccountInviteCodesError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerGetAccountInviteCodesBadRequestError$ {
  /** @deprecated use `ComAtprotoServerGetAccountInviteCodesBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerGetAccountInviteCodesBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoServerGetAccountInviteCodesBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerGetAccountInviteCodesBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoServerGetAccountInviteCodesBadRequestError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerGetAccountInviteCodesBadRequestError$Outbound;
}
