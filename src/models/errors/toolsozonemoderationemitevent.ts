/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneModerationEmitEventAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneModerationEmitEventAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationEmitEventAuthMissingErrorData;

  constructor(
    err: ToolsOzoneModerationEmitEventAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneModerationEmitEventAuthMissingError";
  }
}

export const ToolsOzoneModerationEmitEventError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  SubjectHasAction: "SubjectHasAction",
} as const;
export type ToolsOzoneModerationEmitEventError = ClosedEnum<
  typeof ToolsOzoneModerationEmitEventError
>;

/**
 * Bad Request
 */
export type ToolsOzoneModerationEmitEventBadRequestErrorData = {
  error: ToolsOzoneModerationEmitEventError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneModerationEmitEventBadRequestError extends BlueskyError {
  error: ToolsOzoneModerationEmitEventError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationEmitEventBadRequestErrorData;

  constructor(
    err: ToolsOzoneModerationEmitEventBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneModerationEmitEventBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneModerationEmitEventAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationEmitEventAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneModerationEmitEventAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneModerationEmitEventAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneModerationEmitEventAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationEmitEventAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationEmitEventAuthMissingError
  > = z.instanceof(ToolsOzoneModerationEmitEventAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationEmitEventAuthMissingError$ {
  /** @deprecated use `ToolsOzoneModerationEmitEventAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationEmitEventAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationEmitEventAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationEmitEventAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationEmitEventAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationEmitEventAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneModerationEmitEventError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationEmitEventError
> = z.nativeEnum(ToolsOzoneModerationEmitEventError);

/** @internal */
export const ToolsOzoneModerationEmitEventError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationEmitEventError
> = ToolsOzoneModerationEmitEventError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationEmitEventError$ {
  /** @deprecated use `ToolsOzoneModerationEmitEventError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneModerationEmitEventError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationEmitEventError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationEmitEventError$outboundSchema;
}

/** @internal */
export const ToolsOzoneModerationEmitEventBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationEmitEventBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneModerationEmitEventError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneModerationEmitEventBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneModerationEmitEventBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneModerationEmitEventBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationEmitEventBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationEmitEventBadRequestError
  > = z.instanceof(ToolsOzoneModerationEmitEventBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneModerationEmitEventError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationEmitEventBadRequestError$ {
  /** @deprecated use `ToolsOzoneModerationEmitEventBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationEmitEventBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationEmitEventBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationEmitEventBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationEmitEventBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationEmitEventBadRequestError$Outbound;
}
