/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSettingRemoveOptionsAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSettingRemoveOptionsAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSettingRemoveOptionsAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSettingRemoveOptionsAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSettingRemoveOptionsAuthMissingError";
  }
}

export const ToolsOzoneSettingRemoveOptionsError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSettingRemoveOptionsError = ClosedEnum<
  typeof ToolsOzoneSettingRemoveOptionsError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSettingRemoveOptionsBadRequestErrorData = {
  error: ToolsOzoneSettingRemoveOptionsError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSettingRemoveOptionsBadRequestError
  extends BlueskyError
{
  error: ToolsOzoneSettingRemoveOptionsError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSettingRemoveOptionsBadRequestErrorData;

  constructor(
    err: ToolsOzoneSettingRemoveOptionsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSettingRemoveOptionsBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSettingRemoveOptionsAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneSettingRemoveOptionsAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSettingRemoveOptionsAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSettingRemoveOptionsAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSettingRemoveOptionsAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneSettingRemoveOptionsAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSettingRemoveOptionsAuthMissingError
  > = z.instanceof(ToolsOzoneSettingRemoveOptionsAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingRemoveOptionsAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSettingRemoveOptionsAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSettingRemoveOptionsAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingRemoveOptionsAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingRemoveOptionsAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSettingRemoveOptionsAuthMissingError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneSettingRemoveOptionsAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSettingRemoveOptionsError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSettingRemoveOptionsError
> = z.nativeEnum(ToolsOzoneSettingRemoveOptionsError);

/** @internal */
export const ToolsOzoneSettingRemoveOptionsError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneSettingRemoveOptionsError> =
    ToolsOzoneSettingRemoveOptionsError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingRemoveOptionsError$ {
  /** @deprecated use `ToolsOzoneSettingRemoveOptionsError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSettingRemoveOptionsError$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingRemoveOptionsError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingRemoveOptionsError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSettingRemoveOptionsBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneSettingRemoveOptionsBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneSettingRemoveOptionsError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSettingRemoveOptionsBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSettingRemoveOptionsBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSettingRemoveOptionsBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneSettingRemoveOptionsBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSettingRemoveOptionsBadRequestError
  > = z.instanceof(ToolsOzoneSettingRemoveOptionsBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneSettingRemoveOptionsError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingRemoveOptionsBadRequestError$ {
  /** @deprecated use `ToolsOzoneSettingRemoveOptionsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSettingRemoveOptionsBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingRemoveOptionsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingRemoveOptionsBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSettingRemoveOptionsBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneSettingRemoveOptionsBadRequestError$Outbound;
}
