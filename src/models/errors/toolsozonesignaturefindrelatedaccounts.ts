/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBodyData =
  {
    error: "AuthMissing";
    message: string;
  };

/**
 * Unauthorized
 */
export class ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBodyData;

  constructor(
    err: ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name =
      "ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody";
  }
}

export const ToolsOzoneSignatureFindRelatedAccountsError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSignatureFindRelatedAccountsError = ClosedEnum<
  typeof ToolsOzoneSignatureFindRelatedAccountsError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSignatureFindRelatedAccountsResponseBodyData = {
  error: ToolsOzoneSignatureFindRelatedAccountsError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSignatureFindRelatedAccountsResponseBody extends Error {
  error: ToolsOzoneSignatureFindRelatedAccountsError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSignatureFindRelatedAccountsResponseBodyData;

  constructor(err: ToolsOzoneSignatureFindRelatedAccountsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ToolsOzoneSignatureFindRelatedAccountsResponseBody";
  }
}

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody$inboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody(
        v,
      );
    });

/** @internal */
export type ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody$Outbound =
  {
    error: "AuthMissing";
    message: string;
  };

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody
  > = z.instanceof(
    ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody$ {
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody$Outbound` instead. */
  export type Outbound =
    ToolsOzoneSignatureFindRelatedAccountsOzoneSignatureResponseBody$Outbound;
}

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsError$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneSignatureFindRelatedAccountsError> = z
    .nativeEnum(ToolsOzoneSignatureFindRelatedAccountsError);

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneSignatureFindRelatedAccountsError> =
    ToolsOzoneSignatureFindRelatedAccountsError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureFindRelatedAccountsError$ {
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsError$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsResponseBody$inboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindRelatedAccountsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneSignatureFindRelatedAccountsError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSignatureFindRelatedAccountsResponseBody(v);
    });

/** @internal */
export type ToolsOzoneSignatureFindRelatedAccountsResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindRelatedAccountsResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSignatureFindRelatedAccountsResponseBody
  > = z.instanceof(ToolsOzoneSignatureFindRelatedAccountsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneSignatureFindRelatedAccountsError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureFindRelatedAccountsResponseBody$ {
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsResponseBody$Outbound` instead. */
  export type Outbound =
    ToolsOzoneSignatureFindRelatedAccountsResponseBody$Outbound;
}
