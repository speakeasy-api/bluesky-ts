/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSignatureFindRelatedAccountsAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSignatureFindRelatedAccountsAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSignatureFindRelatedAccountsAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSignatureFindRelatedAccountsAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSignatureFindRelatedAccountsAuthMissingError";
  }
}

export const ToolsOzoneSignatureFindRelatedAccountsError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneSignatureFindRelatedAccountsError = ClosedEnum<
  typeof ToolsOzoneSignatureFindRelatedAccountsError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSignatureFindRelatedAccountsBadRequestErrorData = {
  error: ToolsOzoneSignatureFindRelatedAccountsError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSignatureFindRelatedAccountsBadRequestError
  extends BlueskyError
{
  error: ToolsOzoneSignatureFindRelatedAccountsError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSignatureFindRelatedAccountsBadRequestErrorData;

  constructor(
    err: ToolsOzoneSignatureFindRelatedAccountsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSignatureFindRelatedAccountsBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindRelatedAccountsAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSignatureFindRelatedAccountsAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSignatureFindRelatedAccountsAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindRelatedAccountsAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSignatureFindRelatedAccountsAuthMissingError
  > = z.instanceof(ToolsOzoneSignatureFindRelatedAccountsAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureFindRelatedAccountsAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsAuthMissingError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneSignatureFindRelatedAccountsAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsError$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneSignatureFindRelatedAccountsError> = z
    .nativeEnum(ToolsOzoneSignatureFindRelatedAccountsError);

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsError$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneSignatureFindRelatedAccountsError> =
    ToolsOzoneSignatureFindRelatedAccountsError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureFindRelatedAccountsError$ {
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsError$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindRelatedAccountsBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneSignatureFindRelatedAccountsError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneSignatureFindRelatedAccountsBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneSignatureFindRelatedAccountsBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSignatureFindRelatedAccountsBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneSignatureFindRelatedAccountsBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneSignatureFindRelatedAccountsBadRequestError
  > = z.instanceof(ToolsOzoneSignatureFindRelatedAccountsBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneSignatureFindRelatedAccountsError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSignatureFindRelatedAccountsBadRequestError$ {
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSignatureFindRelatedAccountsBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSignatureFindRelatedAccountsBadRequestError$Outbound` instead. */
  export type Outbound =
    ToolsOzoneSignatureFindRelatedAccountsBadRequestError$Outbound;
}
