/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedComAtprotoIdentityResolveHandleResponseBodyErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedComAtprotoIdentityResolveHandleResponseBodyErrorData;

  constructor(
    err: UnauthorizedComAtprotoIdentityResolveHandleResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError";
  }
}

export const ComAtprotoIdentityResolveHandleError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoIdentityResolveHandleError = ClosedEnum<
  typeof ComAtprotoIdentityResolveHandleError
>;

/**
 * Bad Request
 */
export type BadRequestComAtprotoIdentityResolveHandleResponseBodyErrorData = {
  error: ComAtprotoIdentityResolveHandleError;
  message: string;
};

/**
 * Bad Request
 */
export class BadRequestComAtprotoIdentityResolveHandleResponseBodyError
  extends Error
{
  error: ComAtprotoIdentityResolveHandleError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestComAtprotoIdentityResolveHandleResponseBodyErrorData;

  constructor(
    err: BadRequestComAtprotoIdentityResolveHandleResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestComAtprotoIdentityResolveHandleResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError(
        v,
      );
    });

/** @internal */
export type UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError$Outbound =
  {
    error: "AuthMissing";
    message: string;
  };

/** @internal */
export const UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError
  > = z.instanceof(UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError$ {
  /** @deprecated use `UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedComAtprotoIdentityResolveHandleResponseBodyError$Outbound;
}

/** @internal */
export const ComAtprotoIdentityResolveHandleError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentityResolveHandleError> = z.nativeEnum(
    ComAtprotoIdentityResolveHandleError,
  );

/** @internal */
export const ComAtprotoIdentityResolveHandleError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentityResolveHandleError> =
    ComAtprotoIdentityResolveHandleError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityResolveHandleError$ {
  /** @deprecated use `ComAtprotoIdentityResolveHandleError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityResolveHandleError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityResolveHandleError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityResolveHandleError$outboundSchema;
}

/** @internal */
export const BadRequestComAtprotoIdentityResolveHandleResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestComAtprotoIdentityResolveHandleResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoIdentityResolveHandleError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestComAtprotoIdentityResolveHandleResponseBodyError(v);
    });

/** @internal */
export type BadRequestComAtprotoIdentityResolveHandleResponseBodyError$Outbound =
  {
    error: string;
    message: string;
  };

/** @internal */
export const BadRequestComAtprotoIdentityResolveHandleResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestComAtprotoIdentityResolveHandleResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestComAtprotoIdentityResolveHandleResponseBodyError
  > = z.instanceof(BadRequestComAtprotoIdentityResolveHandleResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoIdentityResolveHandleError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestComAtprotoIdentityResolveHandleResponseBodyError$ {
  /** @deprecated use `BadRequestComAtprotoIdentityResolveHandleResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestComAtprotoIdentityResolveHandleResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestComAtprotoIdentityResolveHandleResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestComAtprotoIdentityResolveHandleResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestComAtprotoIdentityResolveHandleResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestComAtprotoIdentityResolveHandleResponseBodyError$Outbound;
}
