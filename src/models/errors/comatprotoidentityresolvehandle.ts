/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoIdentityResolveHandleAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoIdentityResolveHandleAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoIdentityResolveHandleAuthMissingErrorData;

  constructor(
    err: ComAtprotoIdentityResolveHandleAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoIdentityResolveHandleAuthMissingError";
  }
}

export const ComAtprotoIdentityResolveHandleError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoIdentityResolveHandleError = ClosedEnum<
  typeof ComAtprotoIdentityResolveHandleError
>;

/**
 * Bad Request
 */
export type ComAtprotoIdentityResolveHandleBadRequestErrorData = {
  error: ComAtprotoIdentityResolveHandleError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoIdentityResolveHandleBadRequestError
  extends BlueskyError
{
  error: ComAtprotoIdentityResolveHandleError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoIdentityResolveHandleBadRequestErrorData;

  constructor(
    err: ComAtprotoIdentityResolveHandleBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoIdentityResolveHandleBadRequestError";
  }
}

/** @internal */
export const ComAtprotoIdentityResolveHandleAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoIdentityResolveHandleAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoIdentityResolveHandleAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoIdentityResolveHandleAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoIdentityResolveHandleAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoIdentityResolveHandleAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentityResolveHandleAuthMissingError
  > = z.instanceof(ComAtprotoIdentityResolveHandleAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityResolveHandleAuthMissingError$ {
  /** @deprecated use `ComAtprotoIdentityResolveHandleAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityResolveHandleAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityResolveHandleAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityResolveHandleAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoIdentityResolveHandleAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoIdentityResolveHandleAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoIdentityResolveHandleError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentityResolveHandleError> = z.nativeEnum(
    ComAtprotoIdentityResolveHandleError,
  );

/** @internal */
export const ComAtprotoIdentityResolveHandleError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoIdentityResolveHandleError> =
    ComAtprotoIdentityResolveHandleError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityResolveHandleError$ {
  /** @deprecated use `ComAtprotoIdentityResolveHandleError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityResolveHandleError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityResolveHandleError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityResolveHandleError$outboundSchema;
}

/** @internal */
export const ComAtprotoIdentityResolveHandleBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoIdentityResolveHandleBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoIdentityResolveHandleError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoIdentityResolveHandleBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoIdentityResolveHandleBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoIdentityResolveHandleBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoIdentityResolveHandleBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentityResolveHandleBadRequestError
  > = z.instanceof(ComAtprotoIdentityResolveHandleBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoIdentityResolveHandleError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityResolveHandleBadRequestError$ {
  /** @deprecated use `ComAtprotoIdentityResolveHandleBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityResolveHandleBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityResolveHandleBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityResolveHandleBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoIdentityResolveHandleBadRequestError$Outbound` instead. */
  export type Outbound =
    ComAtprotoIdentityResolveHandleBadRequestError$Outbound;
}
