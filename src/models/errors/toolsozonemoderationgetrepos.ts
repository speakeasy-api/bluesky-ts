/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneModerationGetReposAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneModerationGetReposAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationGetReposAuthMissingErrorData;

  constructor(
    err: ToolsOzoneModerationGetReposAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneModerationGetReposAuthMissingError";
  }
}

export const ToolsOzoneModerationGetReposError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneModerationGetReposError = ClosedEnum<
  typeof ToolsOzoneModerationGetReposError
>;

/**
 * Bad Request
 */
export type ToolsOzoneModerationGetReposBadRequestErrorData = {
  error: ToolsOzoneModerationGetReposError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneModerationGetReposBadRequestError extends BlueskyError {
  error: ToolsOzoneModerationGetReposError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationGetReposBadRequestErrorData;

  constructor(
    err: ToolsOzoneModerationGetReposBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneModerationGetReposBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneModerationGetReposAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetReposAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneModerationGetReposAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneModerationGetReposAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneModerationGetReposAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetReposAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationGetReposAuthMissingError
  > = z.instanceof(ToolsOzoneModerationGetReposAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetReposAuthMissingError$ {
  /** @deprecated use `ToolsOzoneModerationGetReposAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetReposAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetReposAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetReposAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneModerationGetReposError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationGetReposError
> = z.nativeEnum(ToolsOzoneModerationGetReposError);

/** @internal */
export const ToolsOzoneModerationGetReposError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationGetReposError
> = ToolsOzoneModerationGetReposError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetReposError$ {
  /** @deprecated use `ToolsOzoneModerationGetReposError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneModerationGetReposError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetReposError$outboundSchema;
}

/** @internal */
export const ToolsOzoneModerationGetReposBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetReposBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneModerationGetReposError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneModerationGetReposBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneModerationGetReposBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneModerationGetReposBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetReposBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationGetReposBadRequestError
  > = z.instanceof(ToolsOzoneModerationGetReposBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneModerationGetReposError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetReposBadRequestError$ {
  /** @deprecated use `ToolsOzoneModerationGetReposBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetReposBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetReposBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetReposBadRequestError$Outbound;
}
