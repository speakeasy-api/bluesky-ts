/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoSyncGetRecordAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoSyncGetRecordAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoSyncGetRecordAuthMissingErrorData;

  constructor(
    err: ComAtprotoSyncGetRecordAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoSyncGetRecordAuthMissingError";
  }
}

export const ComAtprotoSyncGetRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  RecordNotFound: "RecordNotFound",
  RepoNotFound: "RepoNotFound",
  RepoTakendown: "RepoTakendown",
  RepoSuspended: "RepoSuspended",
  RepoDeactivated: "RepoDeactivated",
} as const;
export type ComAtprotoSyncGetRecordError = ClosedEnum<
  typeof ComAtprotoSyncGetRecordError
>;

/**
 * Bad Request
 */
export type ComAtprotoSyncGetRecordBadRequestErrorData = {
  error: ComAtprotoSyncGetRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoSyncGetRecordBadRequestError extends BlueskyError {
  error: ComAtprotoSyncGetRecordError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoSyncGetRecordBadRequestErrorData;

  constructor(
    err: ComAtprotoSyncGetRecordBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoSyncGetRecordBadRequestError";
  }
}

/** @internal */
export const ComAtprotoSyncGetRecordAuthMissingError$inboundSchema: z.ZodType<
  ComAtprotoSyncGetRecordAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoSyncGetRecordAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoSyncGetRecordAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoSyncGetRecordAuthMissingError$outboundSchema: z.ZodType<
  ComAtprotoSyncGetRecordAuthMissingError$Outbound,
  z.ZodTypeDef,
  ComAtprotoSyncGetRecordAuthMissingError
> = z.instanceof(ComAtprotoSyncGetRecordAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetRecordAuthMissingError$ {
  /** @deprecated use `ComAtprotoSyncGetRecordAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoSyncGetRecordAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetRecordAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoSyncGetRecordAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoSyncGetRecordAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoSyncGetRecordAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoSyncGetRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncGetRecordError
> = z.nativeEnum(ComAtprotoSyncGetRecordError);

/** @internal */
export const ComAtprotoSyncGetRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncGetRecordError
> = ComAtprotoSyncGetRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetRecordError$ {
  /** @deprecated use `ComAtprotoSyncGetRecordError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoSyncGetRecordError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetRecordError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoSyncGetRecordError$outboundSchema;
}

/** @internal */
export const ComAtprotoSyncGetRecordBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoSyncGetRecordBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoSyncGetRecordError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoSyncGetRecordBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoSyncGetRecordBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoSyncGetRecordBadRequestError$outboundSchema: z.ZodType<
  ComAtprotoSyncGetRecordBadRequestError$Outbound,
  z.ZodTypeDef,
  ComAtprotoSyncGetRecordBadRequestError
> = z.instanceof(ComAtprotoSyncGetRecordBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoSyncGetRecordError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetRecordBadRequestError$ {
  /** @deprecated use `ComAtprotoSyncGetRecordBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoSyncGetRecordBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetRecordBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoSyncGetRecordBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoSyncGetRecordBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoSyncGetRecordBadRequestError$Outbound;
}
