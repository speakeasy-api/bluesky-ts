/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedComAtprotoSyncGetRecordResponseBodyErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class UnauthorizedComAtprotoSyncGetRecordResponseBodyError
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedComAtprotoSyncGetRecordResponseBodyErrorData;

  constructor(err: UnauthorizedComAtprotoSyncGetRecordResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "UnauthorizedComAtprotoSyncGetRecordResponseBodyError";
  }
}

export const ComAtprotoSyncGetRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  RecordNotFound: "RecordNotFound",
  RepoNotFound: "RepoNotFound",
  RepoTakendown: "RepoTakendown",
  RepoSuspended: "RepoSuspended",
  RepoDeactivated: "RepoDeactivated",
} as const;
export type ComAtprotoSyncGetRecordError = ClosedEnum<
  typeof ComAtprotoSyncGetRecordError
>;

/**
 * Bad Request
 */
export type BadRequestComAtprotoSyncGetRecordResponseBodyErrorData = {
  error: ComAtprotoSyncGetRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class BadRequestComAtprotoSyncGetRecordResponseBodyError extends Error {
  error: ComAtprotoSyncGetRecordError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestComAtprotoSyncGetRecordResponseBodyErrorData;

  constructor(err: BadRequestComAtprotoSyncGetRecordResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestComAtprotoSyncGetRecordResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedComAtprotoSyncGetRecordResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoSyncGetRecordResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedComAtprotoSyncGetRecordResponseBodyError(v);
    });

/** @internal */
export type UnauthorizedComAtprotoSyncGetRecordResponseBodyError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const UnauthorizedComAtprotoSyncGetRecordResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoSyncGetRecordResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedComAtprotoSyncGetRecordResponseBodyError
  > = z.instanceof(UnauthorizedComAtprotoSyncGetRecordResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedComAtprotoSyncGetRecordResponseBodyError$ {
  /** @deprecated use `UnauthorizedComAtprotoSyncGetRecordResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedComAtprotoSyncGetRecordResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoSyncGetRecordResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedComAtprotoSyncGetRecordResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoSyncGetRecordResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedComAtprotoSyncGetRecordResponseBodyError$Outbound;
}

/** @internal */
export const ComAtprotoSyncGetRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncGetRecordError
> = z.nativeEnum(ComAtprotoSyncGetRecordError);

/** @internal */
export const ComAtprotoSyncGetRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncGetRecordError
> = ComAtprotoSyncGetRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetRecordError$ {
  /** @deprecated use `ComAtprotoSyncGetRecordError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoSyncGetRecordError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetRecordError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoSyncGetRecordError$outboundSchema;
}

/** @internal */
export const BadRequestComAtprotoSyncGetRecordResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestComAtprotoSyncGetRecordResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoSyncGetRecordError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestComAtprotoSyncGetRecordResponseBodyError(v);
    });

/** @internal */
export type BadRequestComAtprotoSyncGetRecordResponseBodyError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const BadRequestComAtprotoSyncGetRecordResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestComAtprotoSyncGetRecordResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestComAtprotoSyncGetRecordResponseBodyError
  > = z.instanceof(BadRequestComAtprotoSyncGetRecordResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoSyncGetRecordError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestComAtprotoSyncGetRecordResponseBodyError$ {
  /** @deprecated use `BadRequestComAtprotoSyncGetRecordResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestComAtprotoSyncGetRecordResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestComAtprotoSyncGetRecordResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestComAtprotoSyncGetRecordResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestComAtprotoSyncGetRecordResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestComAtprotoSyncGetRecordResponseBodyError$Outbound;
}
