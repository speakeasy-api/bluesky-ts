/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoServerRequestEmailConfirmationAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoServerRequestEmailConfirmationAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerRequestEmailConfirmationAuthMissingErrorData;

  constructor(
    err: ComAtprotoServerRequestEmailConfirmationAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerRequestEmailConfirmationAuthMissingError";
  }
}

export const ComAtprotoServerRequestEmailConfirmationError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoServerRequestEmailConfirmationError = ClosedEnum<
  typeof ComAtprotoServerRequestEmailConfirmationError
>;

/**
 * Bad Request
 */
export type ComAtprotoServerRequestEmailConfirmationBadRequestErrorData = {
  error: ComAtprotoServerRequestEmailConfirmationError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoServerRequestEmailConfirmationBadRequestError
  extends BlueskyError
{
  error: ComAtprotoServerRequestEmailConfirmationError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerRequestEmailConfirmationBadRequestErrorData;

  constructor(
    err: ComAtprotoServerRequestEmailConfirmationBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerRequestEmailConfirmationBadRequestError";
  }
}

/** @internal */
export const ComAtprotoServerRequestEmailConfirmationAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoServerRequestEmailConfirmationAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerRequestEmailConfirmationAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerRequestEmailConfirmationAuthMissingError$Outbound =
  {
    error: "AuthMissing";
    message: string;
  };

/** @internal */
export const ComAtprotoServerRequestEmailConfirmationAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoServerRequestEmailConfirmationAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerRequestEmailConfirmationAuthMissingError
  > = z.instanceof(ComAtprotoServerRequestEmailConfirmationAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerRequestEmailConfirmationAuthMissingError$ {
  /** @deprecated use `ComAtprotoServerRequestEmailConfirmationAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerRequestEmailConfirmationAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoServerRequestEmailConfirmationAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerRequestEmailConfirmationAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoServerRequestEmailConfirmationAuthMissingError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerRequestEmailConfirmationAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoServerRequestEmailConfirmationError$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerRequestEmailConfirmationError> = z
    .nativeEnum(ComAtprotoServerRequestEmailConfirmationError);

/** @internal */
export const ComAtprotoServerRequestEmailConfirmationError$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerRequestEmailConfirmationError> =
    ComAtprotoServerRequestEmailConfirmationError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerRequestEmailConfirmationError$ {
  /** @deprecated use `ComAtprotoServerRequestEmailConfirmationError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerRequestEmailConfirmationError$inboundSchema;
  /** @deprecated use `ComAtprotoServerRequestEmailConfirmationError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerRequestEmailConfirmationError$outboundSchema;
}

/** @internal */
export const ComAtprotoServerRequestEmailConfirmationBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoServerRequestEmailConfirmationBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoServerRequestEmailConfirmationError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerRequestEmailConfirmationBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerRequestEmailConfirmationBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoServerRequestEmailConfirmationBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoServerRequestEmailConfirmationBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerRequestEmailConfirmationBadRequestError
  > = z.instanceof(ComAtprotoServerRequestEmailConfirmationBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoServerRequestEmailConfirmationError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerRequestEmailConfirmationBadRequestError$ {
  /** @deprecated use `ComAtprotoServerRequestEmailConfirmationBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerRequestEmailConfirmationBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoServerRequestEmailConfirmationBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerRequestEmailConfirmationBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoServerRequestEmailConfirmationBadRequestError$Outbound` instead. */
  export type Outbound =
    ComAtprotoServerRequestEmailConfirmationBadRequestError$Outbound;
}
