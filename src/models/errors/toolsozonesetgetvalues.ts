/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneSetGetValuesAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneSetGetValuesAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetGetValuesAuthMissingErrorData;

  constructor(
    err: ToolsOzoneSetGetValuesAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetGetValuesAuthMissingError";
  }
}

export const ToolsOzoneSetGetValuesError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  SetNotFound: "SetNotFound",
} as const;
export type ToolsOzoneSetGetValuesError = ClosedEnum<
  typeof ToolsOzoneSetGetValuesError
>;

/**
 * Bad Request
 */
export type ToolsOzoneSetGetValuesBadRequestErrorData = {
  error: ToolsOzoneSetGetValuesError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneSetGetValuesBadRequestError extends BlueskyError {
  error: ToolsOzoneSetGetValuesError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneSetGetValuesBadRequestErrorData;

  constructor(
    err: ToolsOzoneSetGetValuesBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneSetGetValuesBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneSetGetValuesAuthMissingError$inboundSchema: z.ZodType<
  ToolsOzoneSetGetValuesAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetGetValuesAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetGetValuesAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneSetGetValuesAuthMissingError$outboundSchema: z.ZodType<
  ToolsOzoneSetGetValuesAuthMissingError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSetGetValuesAuthMissingError
> = z.instanceof(ToolsOzoneSetGetValuesAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetGetValuesAuthMissingError$ {
  /** @deprecated use `ToolsOzoneSetGetValuesAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetGetValuesAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetGetValuesAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetGetValuesAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetGetValuesAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetGetValuesAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneSetGetValuesError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetGetValuesError
> = z.nativeEnum(ToolsOzoneSetGetValuesError);

/** @internal */
export const ToolsOzoneSetGetValuesError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSetGetValuesError
> = ToolsOzoneSetGetValuesError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetGetValuesError$ {
  /** @deprecated use `ToolsOzoneSetGetValuesError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSetGetValuesError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetGetValuesError$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneSetGetValuesError$outboundSchema;
}

/** @internal */
export const ToolsOzoneSetGetValuesBadRequestError$inboundSchema: z.ZodType<
  ToolsOzoneSetGetValuesBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ToolsOzoneSetGetValuesError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneSetGetValuesBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ToolsOzoneSetGetValuesBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneSetGetValuesBadRequestError$outboundSchema: z.ZodType<
  ToolsOzoneSetGetValuesBadRequestError$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSetGetValuesBadRequestError
> = z.instanceof(ToolsOzoneSetGetValuesBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ToolsOzoneSetGetValuesError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSetGetValuesBadRequestError$ {
  /** @deprecated use `ToolsOzoneSetGetValuesBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSetGetValuesBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneSetGetValuesBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSetGetValuesBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneSetGetValuesBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneSetGetValuesBadRequestError$Outbound;
}
