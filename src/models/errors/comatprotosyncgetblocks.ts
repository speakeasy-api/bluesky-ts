/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoSyncGetBlocksAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoSyncGetBlocksAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoSyncGetBlocksAuthMissingErrorData;

  constructor(
    err: ComAtprotoSyncGetBlocksAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoSyncGetBlocksAuthMissingError";
  }
}

export const ComAtprotoSyncGetBlocksError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  BlockNotFound: "BlockNotFound",
  RepoNotFound: "RepoNotFound",
  RepoTakendown: "RepoTakendown",
  RepoSuspended: "RepoSuspended",
  RepoDeactivated: "RepoDeactivated",
} as const;
export type ComAtprotoSyncGetBlocksError = ClosedEnum<
  typeof ComAtprotoSyncGetBlocksError
>;

/**
 * Bad Request
 */
export type ComAtprotoSyncGetBlocksBadRequestErrorData = {
  error: ComAtprotoSyncGetBlocksError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoSyncGetBlocksBadRequestError extends BlueskyError {
  error: ComAtprotoSyncGetBlocksError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoSyncGetBlocksBadRequestErrorData;

  constructor(
    err: ComAtprotoSyncGetBlocksBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoSyncGetBlocksBadRequestError";
  }
}

/** @internal */
export const ComAtprotoSyncGetBlocksAuthMissingError$inboundSchema: z.ZodType<
  ComAtprotoSyncGetBlocksAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoSyncGetBlocksAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoSyncGetBlocksAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoSyncGetBlocksAuthMissingError$outboundSchema: z.ZodType<
  ComAtprotoSyncGetBlocksAuthMissingError$Outbound,
  z.ZodTypeDef,
  ComAtprotoSyncGetBlocksAuthMissingError
> = z.instanceof(ComAtprotoSyncGetBlocksAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetBlocksAuthMissingError$ {
  /** @deprecated use `ComAtprotoSyncGetBlocksAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoSyncGetBlocksAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetBlocksAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoSyncGetBlocksAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoSyncGetBlocksAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoSyncGetBlocksAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoSyncGetBlocksError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncGetBlocksError
> = z.nativeEnum(ComAtprotoSyncGetBlocksError);

/** @internal */
export const ComAtprotoSyncGetBlocksError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncGetBlocksError
> = ComAtprotoSyncGetBlocksError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetBlocksError$ {
  /** @deprecated use `ComAtprotoSyncGetBlocksError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoSyncGetBlocksError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetBlocksError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoSyncGetBlocksError$outboundSchema;
}

/** @internal */
export const ComAtprotoSyncGetBlocksBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoSyncGetBlocksBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoSyncGetBlocksError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoSyncGetBlocksBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoSyncGetBlocksBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoSyncGetBlocksBadRequestError$outboundSchema: z.ZodType<
  ComAtprotoSyncGetBlocksBadRequestError$Outbound,
  z.ZodTypeDef,
  ComAtprotoSyncGetBlocksBadRequestError
> = z.instanceof(ComAtprotoSyncGetBlocksBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoSyncGetBlocksError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetBlocksBadRequestError$ {
  /** @deprecated use `ComAtprotoSyncGetBlocksBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoSyncGetBlocksBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetBlocksBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoSyncGetBlocksBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoSyncGetBlocksBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoSyncGetBlocksBadRequestError$Outbound;
}
