/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedComAtprotoRepoDeleteRecordResponseBodyErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedComAtprotoRepoDeleteRecordResponseBodyErrorData;

  constructor(
    err: UnauthorizedComAtprotoRepoDeleteRecordResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError";
  }
}

export const ComAtprotoRepoDeleteRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  InvalidSwap: "InvalidSwap",
} as const;
export type ComAtprotoRepoDeleteRecordError = ClosedEnum<
  typeof ComAtprotoRepoDeleteRecordError
>;

/**
 * Bad Request
 */
export type BadRequestComAtprotoRepoDeleteRecordResponseBodyErrorData = {
  error: ComAtprotoRepoDeleteRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class BadRequestComAtprotoRepoDeleteRecordResponseBodyError
  extends Error
{
  error: ComAtprotoRepoDeleteRecordError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestComAtprotoRepoDeleteRecordResponseBodyErrorData;

  constructor(err: BadRequestComAtprotoRepoDeleteRecordResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestComAtprotoRepoDeleteRecordResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError(v);
    });

/** @internal */
export type UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError
  > = z.instanceof(UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError$ {
  /** @deprecated use `UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedComAtprotoRepoDeleteRecordResponseBodyError$Outbound;
}

/** @internal */
export const ComAtprotoRepoDeleteRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoDeleteRecordError
> = z.nativeEnum(ComAtprotoRepoDeleteRecordError);

/** @internal */
export const ComAtprotoRepoDeleteRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoDeleteRecordError
> = ComAtprotoRepoDeleteRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDeleteRecordError$ {
  /** @deprecated use `ComAtprotoRepoDeleteRecordError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoDeleteRecordError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoDeleteRecordError$outboundSchema;
}

/** @internal */
export const BadRequestComAtprotoRepoDeleteRecordResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestComAtprotoRepoDeleteRecordResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoRepoDeleteRecordError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestComAtprotoRepoDeleteRecordResponseBodyError(v);
    });

/** @internal */
export type BadRequestComAtprotoRepoDeleteRecordResponseBodyError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const BadRequestComAtprotoRepoDeleteRecordResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestComAtprotoRepoDeleteRecordResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestComAtprotoRepoDeleteRecordResponseBodyError
  > = z.instanceof(BadRequestComAtprotoRepoDeleteRecordResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoRepoDeleteRecordError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestComAtprotoRepoDeleteRecordResponseBodyError$ {
  /** @deprecated use `BadRequestComAtprotoRepoDeleteRecordResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestComAtprotoRepoDeleteRecordResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestComAtprotoRepoDeleteRecordResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestComAtprotoRepoDeleteRecordResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestComAtprotoRepoDeleteRecordResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestComAtprotoRepoDeleteRecordResponseBodyError$Outbound;
}
