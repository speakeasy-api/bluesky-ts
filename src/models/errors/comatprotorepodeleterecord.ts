/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoDeleteRecordAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoDeleteRecordAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoDeleteRecordAuthMissingErrorData;

  constructor(
    err: ComAtprotoRepoDeleteRecordAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoDeleteRecordAuthMissingError";
  }
}

export const ComAtprotoRepoDeleteRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  InvalidSwap: "InvalidSwap",
} as const;
export type ComAtprotoRepoDeleteRecordError = ClosedEnum<
  typeof ComAtprotoRepoDeleteRecordError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoDeleteRecordBadRequestErrorData = {
  error: ComAtprotoRepoDeleteRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoDeleteRecordBadRequestError extends BlueskyError {
  error: ComAtprotoRepoDeleteRecordError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoDeleteRecordBadRequestErrorData;

  constructor(
    err: ComAtprotoRepoDeleteRecordBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoDeleteRecordBadRequestError";
  }
}

/** @internal */
export const ComAtprotoRepoDeleteRecordAuthMissingError$inboundSchema:
  z.ZodType<ComAtprotoRepoDeleteRecordAuthMissingError, z.ZodTypeDef, unknown> =
    z.object({
      error: z.literal("AuthMissing").default("AuthMissing"),
      message: z.string(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ComAtprotoRepoDeleteRecordAuthMissingError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ComAtprotoRepoDeleteRecordAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoDeleteRecordAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoRepoDeleteRecordAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoRepoDeleteRecordAuthMissingError
  > = z.instanceof(ComAtprotoRepoDeleteRecordAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDeleteRecordAuthMissingError$ {
  /** @deprecated use `ComAtprotoRepoDeleteRecordAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoDeleteRecordAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoDeleteRecordAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoDeleteRecordAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoRepoDeleteRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoDeleteRecordError
> = z.nativeEnum(ComAtprotoRepoDeleteRecordError);

/** @internal */
export const ComAtprotoRepoDeleteRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoDeleteRecordError
> = ComAtprotoRepoDeleteRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDeleteRecordError$ {
  /** @deprecated use `ComAtprotoRepoDeleteRecordError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoDeleteRecordError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoDeleteRecordError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoDeleteRecordBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoRepoDeleteRecordBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoRepoDeleteRecordError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoDeleteRecordBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoDeleteRecordBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoDeleteRecordBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoRepoDeleteRecordBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoRepoDeleteRecordBadRequestError
  > = z.instanceof(ComAtprotoRepoDeleteRecordBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoRepoDeleteRecordError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDeleteRecordBadRequestError$ {
  /** @deprecated use `ComAtprotoRepoDeleteRecordBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoDeleteRecordBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoDeleteRecordBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoDeleteRecordBadRequestError$Outbound;
}
