/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoDeleteRecordAtprotoRepoResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoDeleteRecordAtprotoRepoResponseBodyData;

  constructor(err: ComAtprotoRepoDeleteRecordAtprotoRepoResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody";
  }
}

export const ComAtprotoRepoDeleteRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  InvalidSwap: "InvalidSwap",
} as const;
export type ComAtprotoRepoDeleteRecordError = ClosedEnum<
  typeof ComAtprotoRepoDeleteRecordError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoDeleteRecordResponseBodyData = {
  error: ComAtprotoRepoDeleteRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoDeleteRecordResponseBody extends Error {
  error: ComAtprotoRepoDeleteRecordError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoDeleteRecordResponseBodyData;

  constructor(err: ComAtprotoRepoDeleteRecordResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ComAtprotoRepoDeleteRecordResponseBody";
  }
}

/** @internal */
export const ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody$inboundSchema:
  z.ZodType<
    ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody(v);
    });

/** @internal */
export type ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody
  > = z.instanceof(ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody$ {
  /** @deprecated use `ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody$Outbound` instead. */
  export type Outbound =
    ComAtprotoRepoDeleteRecordAtprotoRepoResponseBody$Outbound;
}

/** @internal */
export const ComAtprotoRepoDeleteRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoDeleteRecordError
> = z.nativeEnum(ComAtprotoRepoDeleteRecordError);

/** @internal */
export const ComAtprotoRepoDeleteRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoDeleteRecordError
> = ComAtprotoRepoDeleteRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDeleteRecordError$ {
  /** @deprecated use `ComAtprotoRepoDeleteRecordError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoDeleteRecordError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoDeleteRecordError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoDeleteRecordResponseBody$inboundSchema: z.ZodType<
  ComAtprotoRepoDeleteRecordResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoRepoDeleteRecordError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoDeleteRecordResponseBody(v);
  });

/** @internal */
export type ComAtprotoRepoDeleteRecordResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoDeleteRecordResponseBody$outboundSchema: z.ZodType<
  ComAtprotoRepoDeleteRecordResponseBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoDeleteRecordResponseBody
> = z.instanceof(ComAtprotoRepoDeleteRecordResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoRepoDeleteRecordError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDeleteRecordResponseBody$ {
  /** @deprecated use `ComAtprotoRepoDeleteRecordResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoDeleteRecordResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoDeleteRecordResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoRepoDeleteRecordResponseBody$Outbound;
}
