/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoSyncRequestCrawlAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoSyncRequestCrawlAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoSyncRequestCrawlAuthMissingErrorData;

  constructor(
    err: ComAtprotoSyncRequestCrawlAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoSyncRequestCrawlAuthMissingError";
  }
}

export const ComAtprotoSyncRequestCrawlError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoSyncRequestCrawlError = ClosedEnum<
  typeof ComAtprotoSyncRequestCrawlError
>;

/**
 * Bad Request
 */
export type ComAtprotoSyncRequestCrawlBadRequestErrorData = {
  error: ComAtprotoSyncRequestCrawlError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoSyncRequestCrawlBadRequestError extends BlueskyError {
  error: ComAtprotoSyncRequestCrawlError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoSyncRequestCrawlBadRequestErrorData;

  constructor(
    err: ComAtprotoSyncRequestCrawlBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoSyncRequestCrawlBadRequestError";
  }
}

/** @internal */
export const ComAtprotoSyncRequestCrawlAuthMissingError$inboundSchema:
  z.ZodType<ComAtprotoSyncRequestCrawlAuthMissingError, z.ZodTypeDef, unknown> =
    z.object({
      error: z.literal("AuthMissing").default("AuthMissing"),
      message: z.string(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ComAtprotoSyncRequestCrawlAuthMissingError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ComAtprotoSyncRequestCrawlAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoSyncRequestCrawlAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoSyncRequestCrawlAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoSyncRequestCrawlAuthMissingError
  > = z.instanceof(ComAtprotoSyncRequestCrawlAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncRequestCrawlAuthMissingError$ {
  /** @deprecated use `ComAtprotoSyncRequestCrawlAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoSyncRequestCrawlAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncRequestCrawlAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoSyncRequestCrawlAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoSyncRequestCrawlAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoSyncRequestCrawlAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoSyncRequestCrawlError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncRequestCrawlError
> = z.nativeEnum(ComAtprotoSyncRequestCrawlError);

/** @internal */
export const ComAtprotoSyncRequestCrawlError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncRequestCrawlError
> = ComAtprotoSyncRequestCrawlError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncRequestCrawlError$ {
  /** @deprecated use `ComAtprotoSyncRequestCrawlError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoSyncRequestCrawlError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncRequestCrawlError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoSyncRequestCrawlError$outboundSchema;
}

/** @internal */
export const ComAtprotoSyncRequestCrawlBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoSyncRequestCrawlBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoSyncRequestCrawlError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoSyncRequestCrawlBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoSyncRequestCrawlBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoSyncRequestCrawlBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoSyncRequestCrawlBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoSyncRequestCrawlBadRequestError
  > = z.instanceof(ComAtprotoSyncRequestCrawlBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoSyncRequestCrawlError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncRequestCrawlBadRequestError$ {
  /** @deprecated use `ComAtprotoSyncRequestCrawlBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoSyncRequestCrawlBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncRequestCrawlBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoSyncRequestCrawlBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoSyncRequestCrawlBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoSyncRequestCrawlBadRequestError$Outbound;
}
