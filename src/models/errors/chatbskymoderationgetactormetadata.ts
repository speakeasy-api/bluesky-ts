/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyModerationGetActorMetadataAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyModerationGetActorMetadataAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyModerationGetActorMetadataAuthMissingErrorData;

  constructor(
    err: ChatBskyModerationGetActorMetadataAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyModerationGetActorMetadataAuthMissingError";
  }
}

export const ChatBskyModerationGetActorMetadataError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyModerationGetActorMetadataError = ClosedEnum<
  typeof ChatBskyModerationGetActorMetadataError
>;

/**
 * Bad Request
 */
export type ChatBskyModerationGetActorMetadataBadRequestErrorData = {
  error: ChatBskyModerationGetActorMetadataError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyModerationGetActorMetadataBadRequestError
  extends BlueskyError
{
  error: ChatBskyModerationGetActorMetadataError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyModerationGetActorMetadataBadRequestErrorData;

  constructor(
    err: ChatBskyModerationGetActorMetadataBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyModerationGetActorMetadataBadRequestError";
  }
}

/** @internal */
export const ChatBskyModerationGetActorMetadataAuthMissingError$inboundSchema:
  z.ZodType<
    ChatBskyModerationGetActorMetadataAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ChatBskyModerationGetActorMetadataAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ChatBskyModerationGetActorMetadataAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyModerationGetActorMetadataAuthMissingError$outboundSchema:
  z.ZodType<
    ChatBskyModerationGetActorMetadataAuthMissingError$Outbound,
    z.ZodTypeDef,
    ChatBskyModerationGetActorMetadataAuthMissingError
  > = z.instanceof(ChatBskyModerationGetActorMetadataAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyModerationGetActorMetadataAuthMissingError$ {
  /** @deprecated use `ChatBskyModerationGetActorMetadataAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyModerationGetActorMetadataAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyModerationGetActorMetadataAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyModerationGetActorMetadataAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyModerationGetActorMetadataAuthMissingError$Outbound` instead. */
  export type Outbound =
    ChatBskyModerationGetActorMetadataAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyModerationGetActorMetadataError$inboundSchema:
  z.ZodNativeEnum<typeof ChatBskyModerationGetActorMetadataError> = z
    .nativeEnum(ChatBskyModerationGetActorMetadataError);

/** @internal */
export const ChatBskyModerationGetActorMetadataError$outboundSchema:
  z.ZodNativeEnum<typeof ChatBskyModerationGetActorMetadataError> =
    ChatBskyModerationGetActorMetadataError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyModerationGetActorMetadataError$ {
  /** @deprecated use `ChatBskyModerationGetActorMetadataError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyModerationGetActorMetadataError$inboundSchema;
  /** @deprecated use `ChatBskyModerationGetActorMetadataError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyModerationGetActorMetadataError$outboundSchema;
}

/** @internal */
export const ChatBskyModerationGetActorMetadataBadRequestError$inboundSchema:
  z.ZodType<
    ChatBskyModerationGetActorMetadataBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ChatBskyModerationGetActorMetadataError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ChatBskyModerationGetActorMetadataBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ChatBskyModerationGetActorMetadataBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyModerationGetActorMetadataBadRequestError$outboundSchema:
  z.ZodType<
    ChatBskyModerationGetActorMetadataBadRequestError$Outbound,
    z.ZodTypeDef,
    ChatBskyModerationGetActorMetadataBadRequestError
  > = z.instanceof(ChatBskyModerationGetActorMetadataBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ChatBskyModerationGetActorMetadataError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyModerationGetActorMetadataBadRequestError$ {
  /** @deprecated use `ChatBskyModerationGetActorMetadataBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyModerationGetActorMetadataBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyModerationGetActorMetadataBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyModerationGetActorMetadataBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyModerationGetActorMetadataBadRequestError$Outbound` instead. */
  export type Outbound =
    ChatBskyModerationGetActorMetadataBadRequestError$Outbound;
}
