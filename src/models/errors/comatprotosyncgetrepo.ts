/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoSyncGetRepoAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoSyncGetRepoAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoSyncGetRepoAuthMissingErrorData;

  constructor(
    err: ComAtprotoSyncGetRepoAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoSyncGetRepoAuthMissingError";
  }
}

export const ComAtprotoSyncGetRepoError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  RepoNotFound: "RepoNotFound",
  RepoTakendown: "RepoTakendown",
  RepoSuspended: "RepoSuspended",
  RepoDeactivated: "RepoDeactivated",
} as const;
export type ComAtprotoSyncGetRepoError = ClosedEnum<
  typeof ComAtprotoSyncGetRepoError
>;

/**
 * Bad Request
 */
export type ComAtprotoSyncGetRepoBadRequestErrorData = {
  error: ComAtprotoSyncGetRepoError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoSyncGetRepoBadRequestError extends BlueskyError {
  error: ComAtprotoSyncGetRepoError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoSyncGetRepoBadRequestErrorData;

  constructor(
    err: ComAtprotoSyncGetRepoBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoSyncGetRepoBadRequestError";
  }
}

/** @internal */
export const ComAtprotoSyncGetRepoAuthMissingError$inboundSchema: z.ZodType<
  ComAtprotoSyncGetRepoAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoSyncGetRepoAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoSyncGetRepoAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoSyncGetRepoAuthMissingError$outboundSchema: z.ZodType<
  ComAtprotoSyncGetRepoAuthMissingError$Outbound,
  z.ZodTypeDef,
  ComAtprotoSyncGetRepoAuthMissingError
> = z.instanceof(ComAtprotoSyncGetRepoAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetRepoAuthMissingError$ {
  /** @deprecated use `ComAtprotoSyncGetRepoAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoSyncGetRepoAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetRepoAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoSyncGetRepoAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoSyncGetRepoAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoSyncGetRepoAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoSyncGetRepoError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncGetRepoError
> = z.nativeEnum(ComAtprotoSyncGetRepoError);

/** @internal */
export const ComAtprotoSyncGetRepoError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncGetRepoError
> = ComAtprotoSyncGetRepoError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetRepoError$ {
  /** @deprecated use `ComAtprotoSyncGetRepoError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoSyncGetRepoError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetRepoError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoSyncGetRepoError$outboundSchema;
}

/** @internal */
export const ComAtprotoSyncGetRepoBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoSyncGetRepoBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoSyncGetRepoError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoSyncGetRepoBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoSyncGetRepoBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoSyncGetRepoBadRequestError$outboundSchema: z.ZodType<
  ComAtprotoSyncGetRepoBadRequestError$Outbound,
  z.ZodTypeDef,
  ComAtprotoSyncGetRepoBadRequestError
> = z.instanceof(ComAtprotoSyncGetRepoBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoSyncGetRepoError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncGetRepoBadRequestError$ {
  /** @deprecated use `ComAtprotoSyncGetRepoBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoSyncGetRepoBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoSyncGetRepoBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoSyncGetRepoBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoSyncGetRepoBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoSyncGetRepoBadRequestError$Outbound;
}
