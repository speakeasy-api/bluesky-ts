/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ToolsOzoneModerationGetEventAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneModerationGetEventAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationGetEventAuthMissingErrorData;

  constructor(
    err: ToolsOzoneModerationGetEventAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneModerationGetEventAuthMissingError";
  }
}

export const ToolsOzoneModerationGetEventError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneModerationGetEventError = ClosedEnum<
  typeof ToolsOzoneModerationGetEventError
>;

/**
 * Bad Request
 */
export type ToolsOzoneModerationGetEventBadRequestErrorData = {
  error: ToolsOzoneModerationGetEventError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneModerationGetEventBadRequestError extends BlueskyError {
  error: ToolsOzoneModerationGetEventError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationGetEventBadRequestErrorData;

  constructor(
    err: ToolsOzoneModerationGetEventBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ToolsOzoneModerationGetEventBadRequestError";
  }
}

/** @internal */
export const ToolsOzoneModerationGetEventAuthMissingError$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetEventAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneModerationGetEventAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneModerationGetEventAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneModerationGetEventAuthMissingError$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetEventAuthMissingError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationGetEventAuthMissingError
  > = z.instanceof(ToolsOzoneModerationGetEventAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetEventAuthMissingError$ {
  /** @deprecated use `ToolsOzoneModerationGetEventAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetEventAuthMissingError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetEventAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetEventAuthMissingError$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetEventAuthMissingError$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetEventAuthMissingError$Outbound;
}

/** @internal */
export const ToolsOzoneModerationGetEventError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationGetEventError
> = z.nativeEnum(ToolsOzoneModerationGetEventError);

/** @internal */
export const ToolsOzoneModerationGetEventError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationGetEventError
> = ToolsOzoneModerationGetEventError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetEventError$ {
  /** @deprecated use `ToolsOzoneModerationGetEventError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneModerationGetEventError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetEventError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetEventError$outboundSchema;
}

/** @internal */
export const ToolsOzoneModerationGetEventBadRequestError$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetEventBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ToolsOzoneModerationGetEventError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneModerationGetEventBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ToolsOzoneModerationGetEventBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneModerationGetEventBadRequestError$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetEventBadRequestError$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationGetEventBadRequestError
  > = z.instanceof(ToolsOzoneModerationGetEventBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ToolsOzoneModerationGetEventError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetEventBadRequestError$ {
  /** @deprecated use `ToolsOzoneModerationGetEventBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetEventBadRequestError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetEventBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetEventBadRequestError$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetEventBadRequestError$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetEventBadRequestError$Outbound;
}
