/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ToolsOzoneModerationGetEventOzoneModerationResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ToolsOzoneModerationGetEventOzoneModerationResponseBody
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationGetEventOzoneModerationResponseBodyData;

  constructor(
    err: ToolsOzoneModerationGetEventOzoneModerationResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ToolsOzoneModerationGetEventOzoneModerationResponseBody";
  }
}

export const ToolsOzoneModerationGetEventError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ToolsOzoneModerationGetEventError = ClosedEnum<
  typeof ToolsOzoneModerationGetEventError
>;

/**
 * Bad Request
 */
export type ToolsOzoneModerationGetEventResponseBodyData = {
  error: ToolsOzoneModerationGetEventError;
  message: string;
};

/**
 * Bad Request
 */
export class ToolsOzoneModerationGetEventResponseBody extends Error {
  error: ToolsOzoneModerationGetEventError;

  /** The original data that was passed to this error instance. */
  data$: ToolsOzoneModerationGetEventResponseBodyData;

  constructor(err: ToolsOzoneModerationGetEventResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ToolsOzoneModerationGetEventResponseBody";
  }
}

/** @internal */
export const ToolsOzoneModerationGetEventOzoneModerationResponseBody$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetEventOzoneModerationResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ToolsOzoneModerationGetEventOzoneModerationResponseBody(v);
    });

/** @internal */
export type ToolsOzoneModerationGetEventOzoneModerationResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ToolsOzoneModerationGetEventOzoneModerationResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetEventOzoneModerationResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationGetEventOzoneModerationResponseBody
  > = z.instanceof(ToolsOzoneModerationGetEventOzoneModerationResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetEventOzoneModerationResponseBody$ {
  /** @deprecated use `ToolsOzoneModerationGetEventOzoneModerationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetEventOzoneModerationResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetEventOzoneModerationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetEventOzoneModerationResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetEventOzoneModerationResponseBody$Outbound` instead. */
  export type Outbound =
    ToolsOzoneModerationGetEventOzoneModerationResponseBody$Outbound;
}

/** @internal */
export const ToolsOzoneModerationGetEventError$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationGetEventError
> = z.nativeEnum(ToolsOzoneModerationGetEventError);

/** @internal */
export const ToolsOzoneModerationGetEventError$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneModerationGetEventError
> = ToolsOzoneModerationGetEventError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetEventError$ {
  /** @deprecated use `ToolsOzoneModerationGetEventError$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneModerationGetEventError$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetEventError$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetEventError$outboundSchema;
}

/** @internal */
export const ToolsOzoneModerationGetEventResponseBody$inboundSchema: z.ZodType<
  ToolsOzoneModerationGetEventResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ToolsOzoneModerationGetEventError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ToolsOzoneModerationGetEventResponseBody(v);
  });

/** @internal */
export type ToolsOzoneModerationGetEventResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ToolsOzoneModerationGetEventResponseBody$outboundSchema: z.ZodType<
  ToolsOzoneModerationGetEventResponseBody$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationGetEventResponseBody
> = z.instanceof(ToolsOzoneModerationGetEventResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ToolsOzoneModerationGetEventError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetEventResponseBody$ {
  /** @deprecated use `ToolsOzoneModerationGetEventResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetEventResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetEventResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetEventResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetEventResponseBody$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetEventResponseBody$Outbound;
}
