/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedComAtprotoRepoGetRecordResponseBodyErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class UnauthorizedComAtprotoRepoGetRecordResponseBodyError
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedComAtprotoRepoGetRecordResponseBodyErrorData;

  constructor(err: UnauthorizedComAtprotoRepoGetRecordResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "UnauthorizedComAtprotoRepoGetRecordResponseBodyError";
  }
}

export const ComAtprotoRepoGetRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  RecordNotFound: "RecordNotFound",
} as const;
export type ComAtprotoRepoGetRecordError = ClosedEnum<
  typeof ComAtprotoRepoGetRecordError
>;

/**
 * Bad Request
 */
export type BadRequestComAtprotoRepoGetRecordResponseBodyErrorData = {
  error: ComAtprotoRepoGetRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class BadRequestComAtprotoRepoGetRecordResponseBodyError extends Error {
  error: ComAtprotoRepoGetRecordError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestComAtprotoRepoGetRecordResponseBodyErrorData;

  constructor(err: BadRequestComAtprotoRepoGetRecordResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestComAtprotoRepoGetRecordResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedComAtprotoRepoGetRecordResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoRepoGetRecordResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedComAtprotoRepoGetRecordResponseBodyError(v);
    });

/** @internal */
export type UnauthorizedComAtprotoRepoGetRecordResponseBodyError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const UnauthorizedComAtprotoRepoGetRecordResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoRepoGetRecordResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedComAtprotoRepoGetRecordResponseBodyError
  > = z.instanceof(UnauthorizedComAtprotoRepoGetRecordResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedComAtprotoRepoGetRecordResponseBodyError$ {
  /** @deprecated use `UnauthorizedComAtprotoRepoGetRecordResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedComAtprotoRepoGetRecordResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoRepoGetRecordResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedComAtprotoRepoGetRecordResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoRepoGetRecordResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedComAtprotoRepoGetRecordResponseBodyError$Outbound;
}

/** @internal */
export const ComAtprotoRepoGetRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoGetRecordError
> = z.nativeEnum(ComAtprotoRepoGetRecordError);

/** @internal */
export const ComAtprotoRepoGetRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoGetRecordError
> = ComAtprotoRepoGetRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoGetRecordError$ {
  /** @deprecated use `ComAtprotoRepoGetRecordError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoGetRecordError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoGetRecordError$outboundSchema;
}

/** @internal */
export const BadRequestComAtprotoRepoGetRecordResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestComAtprotoRepoGetRecordResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoRepoGetRecordError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestComAtprotoRepoGetRecordResponseBodyError(v);
    });

/** @internal */
export type BadRequestComAtprotoRepoGetRecordResponseBodyError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const BadRequestComAtprotoRepoGetRecordResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestComAtprotoRepoGetRecordResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestComAtprotoRepoGetRecordResponseBodyError
  > = z.instanceof(BadRequestComAtprotoRepoGetRecordResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoRepoGetRecordError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestComAtprotoRepoGetRecordResponseBodyError$ {
  /** @deprecated use `BadRequestComAtprotoRepoGetRecordResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestComAtprotoRepoGetRecordResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestComAtprotoRepoGetRecordResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestComAtprotoRepoGetRecordResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestComAtprotoRepoGetRecordResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestComAtprotoRepoGetRecordResponseBodyError$Outbound;
}
