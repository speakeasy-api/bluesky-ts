/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoGetRecordAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoGetRecordAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoGetRecordAuthMissingErrorData;

  constructor(
    err: ComAtprotoRepoGetRecordAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoGetRecordAuthMissingError";
  }
}

export const ComAtprotoRepoGetRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  RecordNotFound: "RecordNotFound",
} as const;
export type ComAtprotoRepoGetRecordError = ClosedEnum<
  typeof ComAtprotoRepoGetRecordError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoGetRecordBadRequestErrorData = {
  error: ComAtprotoRepoGetRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoGetRecordBadRequestError extends BlueskyError {
  error: ComAtprotoRepoGetRecordError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoGetRecordBadRequestErrorData;

  constructor(
    err: ComAtprotoRepoGetRecordBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoGetRecordBadRequestError";
  }
}

/** @internal */
export const ComAtprotoRepoGetRecordAuthMissingError$inboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoGetRecordAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoGetRecordAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoGetRecordAuthMissingError$outboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordAuthMissingError$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoGetRecordAuthMissingError
> = z.instanceof(ComAtprotoRepoGetRecordAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoGetRecordAuthMissingError$ {
  /** @deprecated use `ComAtprotoRepoGetRecordAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoGetRecordAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoGetRecordAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoGetRecordAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoRepoGetRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoGetRecordError
> = z.nativeEnum(ComAtprotoRepoGetRecordError);

/** @internal */
export const ComAtprotoRepoGetRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoGetRecordError
> = ComAtprotoRepoGetRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoGetRecordError$ {
  /** @deprecated use `ComAtprotoRepoGetRecordError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoGetRecordError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoGetRecordError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoGetRecordBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoRepoGetRecordError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoGetRecordBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoGetRecordBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoGetRecordBadRequestError$outboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordBadRequestError$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoGetRecordBadRequestError
> = z.instanceof(ComAtprotoRepoGetRecordBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoRepoGetRecordError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoGetRecordBadRequestError$ {
  /** @deprecated use `ComAtprotoRepoGetRecordBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoGetRecordBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoGetRecordBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoGetRecordBadRequestError$Outbound;
}
