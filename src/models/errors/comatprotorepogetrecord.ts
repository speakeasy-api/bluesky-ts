/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoGetRecordReposResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoGetRecordReposResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoGetRecordReposResponseBodyData;

  constructor(err: ComAtprotoRepoGetRecordReposResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ComAtprotoRepoGetRecordReposResponseBody";
  }
}

export const ComAtprotoRepoGetRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  RecordNotFound: "RecordNotFound",
} as const;
export type ComAtprotoRepoGetRecordError = ClosedEnum<
  typeof ComAtprotoRepoGetRecordError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoGetRecordResponseBodyData = {
  error: ComAtprotoRepoGetRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoGetRecordResponseBody extends Error {
  error: ComAtprotoRepoGetRecordError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoGetRecordResponseBodyData;

  constructor(err: ComAtprotoRepoGetRecordResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ComAtprotoRepoGetRecordResponseBody";
  }
}

/** @internal */
export const ComAtprotoRepoGetRecordReposResponseBody$inboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordReposResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing"),
  message: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoGetRecordReposResponseBody(v);
  });

/** @internal */
export type ComAtprotoRepoGetRecordReposResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoGetRecordReposResponseBody$outboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordReposResponseBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoGetRecordReposResponseBody
> = z.instanceof(ComAtprotoRepoGetRecordReposResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoGetRecordReposResponseBody$ {
  /** @deprecated use `ComAtprotoRepoGetRecordReposResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoGetRecordReposResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordReposResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoGetRecordReposResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordReposResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoRepoGetRecordReposResponseBody$Outbound;
}

/** @internal */
export const ComAtprotoRepoGetRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoGetRecordError
> = z.nativeEnum(ComAtprotoRepoGetRecordError);

/** @internal */
export const ComAtprotoRepoGetRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoGetRecordError
> = ComAtprotoRepoGetRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoGetRecordError$ {
  /** @deprecated use `ComAtprotoRepoGetRecordError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoGetRecordError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoGetRecordError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoGetRecordResponseBody$inboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoRepoGetRecordError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoGetRecordResponseBody(v);
  });

/** @internal */
export type ComAtprotoRepoGetRecordResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoGetRecordResponseBody$outboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordResponseBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoGetRecordResponseBody
> = z.instanceof(ComAtprotoRepoGetRecordResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ComAtprotoRepoGetRecordError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoGetRecordResponseBody$ {
  /** @deprecated use `ComAtprotoRepoGetRecordResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoGetRecordResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoGetRecordResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoRepoGetRecordResponseBody$Outbound;
}
