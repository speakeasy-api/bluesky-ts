/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type AppBskyNotificationListNotificationsAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class AppBskyNotificationListNotificationsAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: AppBskyNotificationListNotificationsAuthMissingErrorData;

  constructor(
    err: AppBskyNotificationListNotificationsAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "AppBskyNotificationListNotificationsAuthMissingError";
  }
}

export const AppBskyNotificationListNotificationsError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type AppBskyNotificationListNotificationsError = ClosedEnum<
  typeof AppBskyNotificationListNotificationsError
>;

/**
 * Bad Request
 */
export type AppBskyNotificationListNotificationsBadRequestErrorData = {
  error: AppBskyNotificationListNotificationsError;
  message: string;
};

/**
 * Bad Request
 */
export class AppBskyNotificationListNotificationsBadRequestError
  extends BlueskyError
{
  error: AppBskyNotificationListNotificationsError;

  /** The original data that was passed to this error instance. */
  data$: AppBskyNotificationListNotificationsBadRequestErrorData;

  constructor(
    err: AppBskyNotificationListNotificationsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "AppBskyNotificationListNotificationsBadRequestError";
  }
}

/** @internal */
export const AppBskyNotificationListNotificationsAuthMissingError$inboundSchema:
  z.ZodType<
    AppBskyNotificationListNotificationsAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AppBskyNotificationListNotificationsAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AppBskyNotificationListNotificationsAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const AppBskyNotificationListNotificationsAuthMissingError$outboundSchema:
  z.ZodType<
    AppBskyNotificationListNotificationsAuthMissingError$Outbound,
    z.ZodTypeDef,
    AppBskyNotificationListNotificationsAuthMissingError
  > = z.instanceof(AppBskyNotificationListNotificationsAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyNotificationListNotificationsAuthMissingError$ {
  /** @deprecated use `AppBskyNotificationListNotificationsAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyNotificationListNotificationsAuthMissingError$inboundSchema;
  /** @deprecated use `AppBskyNotificationListNotificationsAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyNotificationListNotificationsAuthMissingError$outboundSchema;
  /** @deprecated use `AppBskyNotificationListNotificationsAuthMissingError$Outbound` instead. */
  export type Outbound =
    AppBskyNotificationListNotificationsAuthMissingError$Outbound;
}

/** @internal */
export const AppBskyNotificationListNotificationsError$inboundSchema:
  z.ZodNativeEnum<typeof AppBskyNotificationListNotificationsError> = z
    .nativeEnum(AppBskyNotificationListNotificationsError);

/** @internal */
export const AppBskyNotificationListNotificationsError$outboundSchema:
  z.ZodNativeEnum<typeof AppBskyNotificationListNotificationsError> =
    AppBskyNotificationListNotificationsError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyNotificationListNotificationsError$ {
  /** @deprecated use `AppBskyNotificationListNotificationsError$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyNotificationListNotificationsError$inboundSchema;
  /** @deprecated use `AppBskyNotificationListNotificationsError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyNotificationListNotificationsError$outboundSchema;
}

/** @internal */
export const AppBskyNotificationListNotificationsBadRequestError$inboundSchema:
  z.ZodType<
    AppBskyNotificationListNotificationsBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: AppBskyNotificationListNotificationsError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new AppBskyNotificationListNotificationsBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type AppBskyNotificationListNotificationsBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const AppBskyNotificationListNotificationsBadRequestError$outboundSchema:
  z.ZodType<
    AppBskyNotificationListNotificationsBadRequestError$Outbound,
    z.ZodTypeDef,
    AppBskyNotificationListNotificationsBadRequestError
  > = z.instanceof(AppBskyNotificationListNotificationsBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: AppBskyNotificationListNotificationsError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyNotificationListNotificationsBadRequestError$ {
  /** @deprecated use `AppBskyNotificationListNotificationsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyNotificationListNotificationsBadRequestError$inboundSchema;
  /** @deprecated use `AppBskyNotificationListNotificationsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyNotificationListNotificationsBadRequestError$outboundSchema;
  /** @deprecated use `AppBskyNotificationListNotificationsBadRequestError$Outbound` instead. */
  export type Outbound =
    AppBskyNotificationListNotificationsBadRequestError$Outbound;
}
