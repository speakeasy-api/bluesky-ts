/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoServerCreateAccountAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoServerCreateAccountAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerCreateAccountAuthMissingErrorData;

  constructor(
    err: ComAtprotoServerCreateAccountAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerCreateAccountAuthMissingError";
  }
}

export const ComAtprotoServerCreateAccountError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  InvalidHandle: "InvalidHandle",
  InvalidPassword: "InvalidPassword",
  InvalidInviteCode: "InvalidInviteCode",
  HandleNotAvailable: "HandleNotAvailable",
  UnsupportedDomain: "UnsupportedDomain",
  UnresolvableDid: "UnresolvableDid",
  IncompatibleDidDoc: "IncompatibleDidDoc",
} as const;
export type ComAtprotoServerCreateAccountError = ClosedEnum<
  typeof ComAtprotoServerCreateAccountError
>;

/**
 * Bad Request
 */
export type ComAtprotoServerCreateAccountBadRequestErrorData = {
  error: ComAtprotoServerCreateAccountError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoServerCreateAccountBadRequestError extends BlueskyError {
  error: ComAtprotoServerCreateAccountError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerCreateAccountBadRequestErrorData;

  constructor(
    err: ComAtprotoServerCreateAccountBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerCreateAccountBadRequestError";
  }
}

/** @internal */
export const ComAtprotoServerCreateAccountAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoServerCreateAccountAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerCreateAccountAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerCreateAccountAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoServerCreateAccountAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoServerCreateAccountAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerCreateAccountAuthMissingError
  > = z.instanceof(ComAtprotoServerCreateAccountAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateAccountAuthMissingError$ {
  /** @deprecated use `ComAtprotoServerCreateAccountAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateAccountAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAccountAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateAccountAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAccountAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateAccountAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoServerCreateAccountError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerCreateAccountError
> = z.nativeEnum(ComAtprotoServerCreateAccountError);

/** @internal */
export const ComAtprotoServerCreateAccountError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerCreateAccountError
> = ComAtprotoServerCreateAccountError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateAccountError$ {
  /** @deprecated use `ComAtprotoServerCreateAccountError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoServerCreateAccountError$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAccountError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateAccountError$outboundSchema;
}

/** @internal */
export const ComAtprotoServerCreateAccountBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoServerCreateAccountBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoServerCreateAccountError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerCreateAccountBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerCreateAccountBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoServerCreateAccountBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoServerCreateAccountBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerCreateAccountBadRequestError
  > = z.instanceof(ComAtprotoServerCreateAccountBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoServerCreateAccountError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateAccountBadRequestError$ {
  /** @deprecated use `ComAtprotoServerCreateAccountBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateAccountBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAccountBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateAccountBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAccountBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateAccountBadRequestError$Outbound;
}
