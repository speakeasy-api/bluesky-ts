/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoLeaveConvoConversationsResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoLeaveConvoConversationsResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoLeaveConvoConversationsResponseBodyData;

  constructor(err: ChatBskyConvoLeaveConvoConversationsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoLeaveConvoConversationsResponseBody";
  }
}

export const ChatBskyConvoLeaveConvoError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoLeaveConvoError = ClosedEnum<
  typeof ChatBskyConvoLeaveConvoError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoLeaveConvoResponseBodyData = {
  error: ChatBskyConvoLeaveConvoError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoLeaveConvoResponseBody extends Error {
  error: ChatBskyConvoLeaveConvoError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoLeaveConvoResponseBodyData;

  constructor(err: ChatBskyConvoLeaveConvoResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoLeaveConvoResponseBody";
  }
}

/** @internal */
export const ChatBskyConvoLeaveConvoConversationsResponseBody$inboundSchema:
  z.ZodType<
    ChatBskyConvoLeaveConvoConversationsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ChatBskyConvoLeaveConvoConversationsResponseBody(v);
    });

/** @internal */
export type ChatBskyConvoLeaveConvoConversationsResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoLeaveConvoConversationsResponseBody$outboundSchema:
  z.ZodType<
    ChatBskyConvoLeaveConvoConversationsResponseBody$Outbound,
    z.ZodTypeDef,
    ChatBskyConvoLeaveConvoConversationsResponseBody
  > = z.instanceof(ChatBskyConvoLeaveConvoConversationsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoLeaveConvoConversationsResponseBody$ {
  /** @deprecated use `ChatBskyConvoLeaveConvoConversationsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoLeaveConvoConversationsResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoConversationsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoLeaveConvoConversationsResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoConversationsResponseBody$Outbound` instead. */
  export type Outbound =
    ChatBskyConvoLeaveConvoConversationsResponseBody$Outbound;
}

/** @internal */
export const ChatBskyConvoLeaveConvoError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoLeaveConvoError
> = z.nativeEnum(ChatBskyConvoLeaveConvoError);

/** @internal */
export const ChatBskyConvoLeaveConvoError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoLeaveConvoError
> = ChatBskyConvoLeaveConvoError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoLeaveConvoError$ {
  /** @deprecated use `ChatBskyConvoLeaveConvoError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoLeaveConvoError$inboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoLeaveConvoError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoLeaveConvoResponseBody$inboundSchema: z.ZodType<
  ChatBskyConvoLeaveConvoResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoLeaveConvoError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoLeaveConvoResponseBody(v);
  });

/** @internal */
export type ChatBskyConvoLeaveConvoResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoLeaveConvoResponseBody$outboundSchema: z.ZodType<
  ChatBskyConvoLeaveConvoResponseBody$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoLeaveConvoResponseBody
> = z.instanceof(ChatBskyConvoLeaveConvoResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoLeaveConvoError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoLeaveConvoResponseBody$ {
  /** @deprecated use `ChatBskyConvoLeaveConvoResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoLeaveConvoResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoLeaveConvoResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoLeaveConvoResponseBody$Outbound;
}
