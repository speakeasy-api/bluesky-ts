/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoLeaveConvoAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoLeaveConvoAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoLeaveConvoAuthMissingErrorData;

  constructor(
    err: ChatBskyConvoLeaveConvoAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoLeaveConvoAuthMissingError";
  }
}

export const ChatBskyConvoLeaveConvoError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoLeaveConvoError = ClosedEnum<
  typeof ChatBskyConvoLeaveConvoError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoLeaveConvoBadRequestErrorData = {
  error: ChatBskyConvoLeaveConvoError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoLeaveConvoBadRequestError extends BlueskyError {
  error: ChatBskyConvoLeaveConvoError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoLeaveConvoBadRequestErrorData;

  constructor(
    err: ChatBskyConvoLeaveConvoBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoLeaveConvoBadRequestError";
  }
}

/** @internal */
export const ChatBskyConvoLeaveConvoAuthMissingError$inboundSchema: z.ZodType<
  ChatBskyConvoLeaveConvoAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoLeaveConvoAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoLeaveConvoAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoLeaveConvoAuthMissingError$outboundSchema: z.ZodType<
  ChatBskyConvoLeaveConvoAuthMissingError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoLeaveConvoAuthMissingError
> = z.instanceof(ChatBskyConvoLeaveConvoAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoLeaveConvoAuthMissingError$ {
  /** @deprecated use `ChatBskyConvoLeaveConvoAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoLeaveConvoAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoLeaveConvoAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoAuthMissingError$Outbound` instead. */
  export type Outbound = ChatBskyConvoLeaveConvoAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyConvoLeaveConvoError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoLeaveConvoError
> = z.nativeEnum(ChatBskyConvoLeaveConvoError);

/** @internal */
export const ChatBskyConvoLeaveConvoError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoLeaveConvoError
> = ChatBskyConvoLeaveConvoError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoLeaveConvoError$ {
  /** @deprecated use `ChatBskyConvoLeaveConvoError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoLeaveConvoError$inboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoLeaveConvoError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoLeaveConvoBadRequestError$inboundSchema: z.ZodType<
  ChatBskyConvoLeaveConvoBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoLeaveConvoError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoLeaveConvoBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoLeaveConvoBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoLeaveConvoBadRequestError$outboundSchema: z.ZodType<
  ChatBskyConvoLeaveConvoBadRequestError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoLeaveConvoBadRequestError
> = z.instanceof(ChatBskyConvoLeaveConvoBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoLeaveConvoError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoLeaveConvoBadRequestError$ {
  /** @deprecated use `ChatBskyConvoLeaveConvoBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoLeaveConvoBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoLeaveConvoBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoBadRequestError$Outbound` instead. */
  export type Outbound = ChatBskyConvoLeaveConvoBadRequestError$Outbound;
}
