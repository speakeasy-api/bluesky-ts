/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoServerDeleteSessionAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoServerDeleteSessionAuthMissingError
  extends BlueskyError
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerDeleteSessionAuthMissingErrorData;

  constructor(
    err: ComAtprotoServerDeleteSessionAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerDeleteSessionAuthMissingError";
  }
}

export const ComAtprotoServerDeleteSessionError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ComAtprotoServerDeleteSessionError = ClosedEnum<
  typeof ComAtprotoServerDeleteSessionError
>;

/**
 * Bad Request
 */
export type ComAtprotoServerDeleteSessionBadRequestErrorData = {
  error: ComAtprotoServerDeleteSessionError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoServerDeleteSessionBadRequestError extends BlueskyError {
  error: ComAtprotoServerDeleteSessionError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoServerDeleteSessionBadRequestErrorData;

  constructor(
    err: ComAtprotoServerDeleteSessionBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoServerDeleteSessionBadRequestError";
  }
}

/** @internal */
export const ComAtprotoServerDeleteSessionAuthMissingError$inboundSchema:
  z.ZodType<
    ComAtprotoServerDeleteSessionAuthMissingError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing").default("AuthMissing"),
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerDeleteSessionAuthMissingError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerDeleteSessionAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoServerDeleteSessionAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoServerDeleteSessionAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerDeleteSessionAuthMissingError
  > = z.instanceof(ComAtprotoServerDeleteSessionAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDeleteSessionAuthMissingError$ {
  /** @deprecated use `ComAtprotoServerDeleteSessionAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerDeleteSessionAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoServerDeleteSessionAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDeleteSessionAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoServerDeleteSessionAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoServerDeleteSessionAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoServerDeleteSessionError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerDeleteSessionError
> = z.nativeEnum(ComAtprotoServerDeleteSessionError);

/** @internal */
export const ComAtprotoServerDeleteSessionError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerDeleteSessionError
> = ComAtprotoServerDeleteSessionError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDeleteSessionError$ {
  /** @deprecated use `ComAtprotoServerDeleteSessionError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoServerDeleteSessionError$inboundSchema;
  /** @deprecated use `ComAtprotoServerDeleteSessionError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDeleteSessionError$outboundSchema;
}

/** @internal */
export const ComAtprotoServerDeleteSessionBadRequestError$inboundSchema:
  z.ZodType<
    ComAtprotoServerDeleteSessionBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoServerDeleteSessionError$inboundSchema,
    message: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new ComAtprotoServerDeleteSessionBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type ComAtprotoServerDeleteSessionBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoServerDeleteSessionBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoServerDeleteSessionBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerDeleteSessionBadRequestError
  > = z.instanceof(ComAtprotoServerDeleteSessionBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoServerDeleteSessionError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDeleteSessionBadRequestError$ {
  /** @deprecated use `ComAtprotoServerDeleteSessionBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerDeleteSessionBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoServerDeleteSessionBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDeleteSessionBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoServerDeleteSessionBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoServerDeleteSessionBadRequestError$Outbound;
}
