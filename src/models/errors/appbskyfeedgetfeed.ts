/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type AppBskyFeedGetFeedAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class AppBskyFeedGetFeedAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: AppBskyFeedGetFeedAuthMissingErrorData;

  constructor(
    err: AppBskyFeedGetFeedAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "AppBskyFeedGetFeedAuthMissingError";
  }
}

export const AppBskyFeedGetFeedError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  UnknownFeed: "UnknownFeed",
} as const;
export type AppBskyFeedGetFeedError = ClosedEnum<
  typeof AppBskyFeedGetFeedError
>;

/**
 * Bad Request
 */
export type AppBskyFeedGetFeedBadRequestErrorData = {
  error: AppBskyFeedGetFeedError;
  message: string;
};

/**
 * Bad Request
 */
export class AppBskyFeedGetFeedBadRequestError extends BlueskyError {
  error: AppBskyFeedGetFeedError;

  /** The original data that was passed to this error instance. */
  data$: AppBskyFeedGetFeedBadRequestErrorData;

  constructor(
    err: AppBskyFeedGetFeedBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "AppBskyFeedGetFeedBadRequestError";
  }
}

/** @internal */
export const AppBskyFeedGetFeedAuthMissingError$inboundSchema: z.ZodType<
  AppBskyFeedGetFeedAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AppBskyFeedGetFeedAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AppBskyFeedGetFeedAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const AppBskyFeedGetFeedAuthMissingError$outboundSchema: z.ZodType<
  AppBskyFeedGetFeedAuthMissingError$Outbound,
  z.ZodTypeDef,
  AppBskyFeedGetFeedAuthMissingError
> = z.instanceof(AppBskyFeedGetFeedAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedGetFeedAuthMissingError$ {
  /** @deprecated use `AppBskyFeedGetFeedAuthMissingError$inboundSchema` instead. */
  export const inboundSchema = AppBskyFeedGetFeedAuthMissingError$inboundSchema;
  /** @deprecated use `AppBskyFeedGetFeedAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyFeedGetFeedAuthMissingError$outboundSchema;
  /** @deprecated use `AppBskyFeedGetFeedAuthMissingError$Outbound` instead. */
  export type Outbound = AppBskyFeedGetFeedAuthMissingError$Outbound;
}

/** @internal */
export const AppBskyFeedGetFeedError$inboundSchema: z.ZodNativeEnum<
  typeof AppBskyFeedGetFeedError
> = z.nativeEnum(AppBskyFeedGetFeedError);

/** @internal */
export const AppBskyFeedGetFeedError$outboundSchema: z.ZodNativeEnum<
  typeof AppBskyFeedGetFeedError
> = AppBskyFeedGetFeedError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedGetFeedError$ {
  /** @deprecated use `AppBskyFeedGetFeedError$inboundSchema` instead. */
  export const inboundSchema = AppBskyFeedGetFeedError$inboundSchema;
  /** @deprecated use `AppBskyFeedGetFeedError$outboundSchema` instead. */
  export const outboundSchema = AppBskyFeedGetFeedError$outboundSchema;
}

/** @internal */
export const AppBskyFeedGetFeedBadRequestError$inboundSchema: z.ZodType<
  AppBskyFeedGetFeedBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: AppBskyFeedGetFeedError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new AppBskyFeedGetFeedBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AppBskyFeedGetFeedBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const AppBskyFeedGetFeedBadRequestError$outboundSchema: z.ZodType<
  AppBskyFeedGetFeedBadRequestError$Outbound,
  z.ZodTypeDef,
  AppBskyFeedGetFeedBadRequestError
> = z.instanceof(AppBskyFeedGetFeedBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: AppBskyFeedGetFeedError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedGetFeedBadRequestError$ {
  /** @deprecated use `AppBskyFeedGetFeedBadRequestError$inboundSchema` instead. */
  export const inboundSchema = AppBskyFeedGetFeedBadRequestError$inboundSchema;
  /** @deprecated use `AppBskyFeedGetFeedBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyFeedGetFeedBadRequestError$outboundSchema;
  /** @deprecated use `AppBskyFeedGetFeedBadRequestError$Outbound` instead. */
  export type Outbound = AppBskyFeedGetFeedBadRequestError$Outbound;
}
