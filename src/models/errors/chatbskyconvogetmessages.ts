/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoGetMessagesAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoGetMessagesAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoGetMessagesAuthMissingErrorData;

  constructor(
    err: ChatBskyConvoGetMessagesAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoGetMessagesAuthMissingError";
  }
}

export const ChatBskyConvoGetMessagesError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoGetMessagesError = ClosedEnum<
  typeof ChatBskyConvoGetMessagesError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoGetMessagesBadRequestErrorData = {
  error: ChatBskyConvoGetMessagesError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoGetMessagesBadRequestError extends BlueskyError {
  error: ChatBskyConvoGetMessagesError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoGetMessagesBadRequestErrorData;

  constructor(
    err: ChatBskyConvoGetMessagesBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ChatBskyConvoGetMessagesBadRequestError";
  }
}

/** @internal */
export const ChatBskyConvoGetMessagesAuthMissingError$inboundSchema: z.ZodType<
  ChatBskyConvoGetMessagesAuthMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("AuthMissing").default("AuthMissing"),
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoGetMessagesAuthMissingError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoGetMessagesAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoGetMessagesAuthMissingError$outboundSchema: z.ZodType<
  ChatBskyConvoGetMessagesAuthMissingError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoGetMessagesAuthMissingError
> = z.instanceof(ChatBskyConvoGetMessagesAuthMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("AuthMissing").default("AuthMissing" as const),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetMessagesAuthMissingError$ {
  /** @deprecated use `ChatBskyConvoGetMessagesAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoGetMessagesAuthMissingError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetMessagesAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoGetMessagesAuthMissingError$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetMessagesAuthMissingError$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetMessagesAuthMissingError$Outbound;
}

/** @internal */
export const ChatBskyConvoGetMessagesError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetMessagesError
> = z.nativeEnum(ChatBskyConvoGetMessagesError);

/** @internal */
export const ChatBskyConvoGetMessagesError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetMessagesError
> = ChatBskyConvoGetMessagesError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetMessagesError$ {
  /** @deprecated use `ChatBskyConvoGetMessagesError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoGetMessagesError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetMessagesError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoGetMessagesError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoGetMessagesBadRequestError$inboundSchema: z.ZodType<
  ChatBskyConvoGetMessagesBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoGetMessagesError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoGetMessagesBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ChatBskyConvoGetMessagesBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoGetMessagesBadRequestError$outboundSchema: z.ZodType<
  ChatBskyConvoGetMessagesBadRequestError$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoGetMessagesBadRequestError
> = z.instanceof(ChatBskyConvoGetMessagesBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoGetMessagesError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetMessagesBadRequestError$ {
  /** @deprecated use `ChatBskyConvoGetMessagesBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoGetMessagesBadRequestError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetMessagesBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoGetMessagesBadRequestError$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetMessagesBadRequestError$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetMessagesBadRequestError$Outbound;
}
