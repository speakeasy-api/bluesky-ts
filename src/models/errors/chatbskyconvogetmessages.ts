/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type ChatBskyConvoGetMessagesChatConvoResponseBodyData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ChatBskyConvoGetMessagesChatConvoResponseBody extends Error {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoGetMessagesChatConvoResponseBodyData;

  constructor(err: ChatBskyConvoGetMessagesChatConvoResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoGetMessagesChatConvoResponseBody";
  }
}

export const ChatBskyConvoGetMessagesError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
} as const;
export type ChatBskyConvoGetMessagesError = ClosedEnum<
  typeof ChatBskyConvoGetMessagesError
>;

/**
 * Bad Request
 */
export type ChatBskyConvoGetMessagesResponseBodyData = {
  error: ChatBskyConvoGetMessagesError;
  message: string;
};

/**
 * Bad Request
 */
export class ChatBskyConvoGetMessagesResponseBody extends Error {
  error: ChatBskyConvoGetMessagesError;

  /** The original data that was passed to this error instance. */
  data$: ChatBskyConvoGetMessagesResponseBodyData;

  constructor(err: ChatBskyConvoGetMessagesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "ChatBskyConvoGetMessagesResponseBody";
  }
}

/** @internal */
export const ChatBskyConvoGetMessagesChatConvoResponseBody$inboundSchema:
  z.ZodType<
    ChatBskyConvoGetMessagesChatConvoResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new ChatBskyConvoGetMessagesChatConvoResponseBody(v);
    });

/** @internal */
export type ChatBskyConvoGetMessagesChatConvoResponseBody$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ChatBskyConvoGetMessagesChatConvoResponseBody$outboundSchema:
  z.ZodType<
    ChatBskyConvoGetMessagesChatConvoResponseBody$Outbound,
    z.ZodTypeDef,
    ChatBskyConvoGetMessagesChatConvoResponseBody
  > = z.instanceof(ChatBskyConvoGetMessagesChatConvoResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetMessagesChatConvoResponseBody$ {
  /** @deprecated use `ChatBskyConvoGetMessagesChatConvoResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoGetMessagesChatConvoResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetMessagesChatConvoResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoGetMessagesChatConvoResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetMessagesChatConvoResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetMessagesChatConvoResponseBody$Outbound;
}

/** @internal */
export const ChatBskyConvoGetMessagesError$inboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetMessagesError
> = z.nativeEnum(ChatBskyConvoGetMessagesError);

/** @internal */
export const ChatBskyConvoGetMessagesError$outboundSchema: z.ZodNativeEnum<
  typeof ChatBskyConvoGetMessagesError
> = ChatBskyConvoGetMessagesError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetMessagesError$ {
  /** @deprecated use `ChatBskyConvoGetMessagesError$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoGetMessagesError$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetMessagesError$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoGetMessagesError$outboundSchema;
}

/** @internal */
export const ChatBskyConvoGetMessagesResponseBody$inboundSchema: z.ZodType<
  ChatBskyConvoGetMessagesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ChatBskyConvoGetMessagesError$inboundSchema,
  message: z.string(),
})
  .transform((v) => {
    return new ChatBskyConvoGetMessagesResponseBody(v);
  });

/** @internal */
export type ChatBskyConvoGetMessagesResponseBody$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ChatBskyConvoGetMessagesResponseBody$outboundSchema: z.ZodType<
  ChatBskyConvoGetMessagesResponseBody$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoGetMessagesResponseBody
> = z.instanceof(ChatBskyConvoGetMessagesResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    error: ChatBskyConvoGetMessagesError$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetMessagesResponseBody$ {
  /** @deprecated use `ChatBskyConvoGetMessagesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoGetMessagesResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetMessagesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoGetMessagesResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetMessagesResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetMessagesResponseBody$Outbound;
}
