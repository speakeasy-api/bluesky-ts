/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { BlueskyError } from "./blueskyerror.js";

/**
 * Unauthorized
 */
export type ComAtprotoRepoCreateRecordAuthMissingErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class ComAtprotoRepoCreateRecordAuthMissingError extends BlueskyError {
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoCreateRecordAuthMissingErrorData;

  constructor(
    err: ComAtprotoRepoCreateRecordAuthMissingErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoCreateRecordAuthMissingError";
  }
}

export const ComAtprotoRepoCreateRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  InvalidSwap: "InvalidSwap",
} as const;
export type ComAtprotoRepoCreateRecordError = ClosedEnum<
  typeof ComAtprotoRepoCreateRecordError
>;

/**
 * Bad Request
 */
export type ComAtprotoRepoCreateRecordBadRequestErrorData = {
  error: ComAtprotoRepoCreateRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class ComAtprotoRepoCreateRecordBadRequestError extends BlueskyError {
  error: ComAtprotoRepoCreateRecordError;

  /** The original data that was passed to this error instance. */
  data$: ComAtprotoRepoCreateRecordBadRequestErrorData;

  constructor(
    err: ComAtprotoRepoCreateRecordBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "ComAtprotoRepoCreateRecordBadRequestError";
  }
}

/** @internal */
export const ComAtprotoRepoCreateRecordAuthMissingError$inboundSchema:
  z.ZodType<ComAtprotoRepoCreateRecordAuthMissingError, z.ZodTypeDef, unknown> =
    z.object({
      error: z.literal("AuthMissing").default("AuthMissing"),
      message: z.string(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new ComAtprotoRepoCreateRecordAuthMissingError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type ComAtprotoRepoCreateRecordAuthMissingError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const ComAtprotoRepoCreateRecordAuthMissingError$outboundSchema:
  z.ZodType<
    ComAtprotoRepoCreateRecordAuthMissingError$Outbound,
    z.ZodTypeDef,
    ComAtprotoRepoCreateRecordAuthMissingError
  > = z.instanceof(ComAtprotoRepoCreateRecordAuthMissingError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoCreateRecordAuthMissingError$ {
  /** @deprecated use `ComAtprotoRepoCreateRecordAuthMissingError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoCreateRecordAuthMissingError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoCreateRecordAuthMissingError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoCreateRecordAuthMissingError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoCreateRecordAuthMissingError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoCreateRecordAuthMissingError$Outbound;
}

/** @internal */
export const ComAtprotoRepoCreateRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoCreateRecordError
> = z.nativeEnum(ComAtprotoRepoCreateRecordError);

/** @internal */
export const ComAtprotoRepoCreateRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoCreateRecordError
> = ComAtprotoRepoCreateRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoCreateRecordError$ {
  /** @deprecated use `ComAtprotoRepoCreateRecordError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoCreateRecordError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoCreateRecordError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoCreateRecordError$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoCreateRecordBadRequestError$inboundSchema: z.ZodType<
  ComAtprotoRepoCreateRecordBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ComAtprotoRepoCreateRecordError$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ComAtprotoRepoCreateRecordBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ComAtprotoRepoCreateRecordBadRequestError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const ComAtprotoRepoCreateRecordBadRequestError$outboundSchema:
  z.ZodType<
    ComAtprotoRepoCreateRecordBadRequestError$Outbound,
    z.ZodTypeDef,
    ComAtprotoRepoCreateRecordBadRequestError
  > = z.instanceof(ComAtprotoRepoCreateRecordBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoRepoCreateRecordError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoCreateRecordBadRequestError$ {
  /** @deprecated use `ComAtprotoRepoCreateRecordBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoCreateRecordBadRequestError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoCreateRecordBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoCreateRecordBadRequestError$outboundSchema;
  /** @deprecated use `ComAtprotoRepoCreateRecordBadRequestError$Outbound` instead. */
  export type Outbound = ComAtprotoRepoCreateRecordBadRequestError$Outbound;
}
