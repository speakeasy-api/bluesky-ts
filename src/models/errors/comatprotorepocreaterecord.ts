/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Unauthorized
 */
export type UnauthorizedComAtprotoRepoCreateRecordResponseBodyErrorData = {
  error: "AuthMissing";
  message: string;
};

/**
 * Unauthorized
 */
export class UnauthorizedComAtprotoRepoCreateRecordResponseBodyError
  extends Error
{
  error: "AuthMissing";

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedComAtprotoRepoCreateRecordResponseBodyErrorData;

  constructor(
    err: UnauthorizedComAtprotoRepoCreateRecordResponseBodyErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "UnauthorizedComAtprotoRepoCreateRecordResponseBodyError";
  }
}

export const ComAtprotoRepoCreateRecordError = {
  InvalidRequest: "InvalidRequest",
  ExpiredToken: "ExpiredToken",
  InvalidToken: "InvalidToken",
  InvalidSwap: "InvalidSwap",
} as const;
export type ComAtprotoRepoCreateRecordError = ClosedEnum<
  typeof ComAtprotoRepoCreateRecordError
>;

/**
 * Bad Request
 */
export type BadRequestComAtprotoRepoCreateRecordResponseBodyErrorData = {
  error: ComAtprotoRepoCreateRecordError;
  message: string;
};

/**
 * Bad Request
 */
export class BadRequestComAtprotoRepoCreateRecordResponseBodyError
  extends Error
{
  error: ComAtprotoRepoCreateRecordError;

  /** The original data that was passed to this error instance. */
  data$: BadRequestComAtprotoRepoCreateRecordResponseBodyErrorData;

  constructor(err: BadRequestComAtprotoRepoCreateRecordResponseBodyErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;

    this.name = "BadRequestComAtprotoRepoCreateRecordResponseBodyError";
  }
}

/** @internal */
export const UnauthorizedComAtprotoRepoCreateRecordResponseBodyError$inboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoRepoCreateRecordResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.literal("AuthMissing"),
    message: z.string(),
  })
    .transform((v) => {
      return new UnauthorizedComAtprotoRepoCreateRecordResponseBodyError(v);
    });

/** @internal */
export type UnauthorizedComAtprotoRepoCreateRecordResponseBodyError$Outbound = {
  error: "AuthMissing";
  message: string;
};

/** @internal */
export const UnauthorizedComAtprotoRepoCreateRecordResponseBodyError$outboundSchema:
  z.ZodType<
    UnauthorizedComAtprotoRepoCreateRecordResponseBodyError$Outbound,
    z.ZodTypeDef,
    UnauthorizedComAtprotoRepoCreateRecordResponseBodyError
  > = z.instanceof(UnauthorizedComAtprotoRepoCreateRecordResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AuthMissing").default("AuthMissing" as const),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedComAtprotoRepoCreateRecordResponseBodyError$ {
  /** @deprecated use `UnauthorizedComAtprotoRepoCreateRecordResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedComAtprotoRepoCreateRecordResponseBodyError$inboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoRepoCreateRecordResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedComAtprotoRepoCreateRecordResponseBodyError$outboundSchema;
  /** @deprecated use `UnauthorizedComAtprotoRepoCreateRecordResponseBodyError$Outbound` instead. */
  export type Outbound =
    UnauthorizedComAtprotoRepoCreateRecordResponseBodyError$Outbound;
}

/** @internal */
export const ComAtprotoRepoCreateRecordError$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoCreateRecordError
> = z.nativeEnum(ComAtprotoRepoCreateRecordError);

/** @internal */
export const ComAtprotoRepoCreateRecordError$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoRepoCreateRecordError
> = ComAtprotoRepoCreateRecordError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoCreateRecordError$ {
  /** @deprecated use `ComAtprotoRepoCreateRecordError$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoCreateRecordError$inboundSchema;
  /** @deprecated use `ComAtprotoRepoCreateRecordError$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoCreateRecordError$outboundSchema;
}

/** @internal */
export const BadRequestComAtprotoRepoCreateRecordResponseBodyError$inboundSchema:
  z.ZodType<
    BadRequestComAtprotoRepoCreateRecordResponseBodyError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: ComAtprotoRepoCreateRecordError$inboundSchema,
    message: z.string(),
  })
    .transform((v) => {
      return new BadRequestComAtprotoRepoCreateRecordResponseBodyError(v);
    });

/** @internal */
export type BadRequestComAtprotoRepoCreateRecordResponseBodyError$Outbound = {
  error: string;
  message: string;
};

/** @internal */
export const BadRequestComAtprotoRepoCreateRecordResponseBodyError$outboundSchema:
  z.ZodType<
    BadRequestComAtprotoRepoCreateRecordResponseBodyError$Outbound,
    z.ZodTypeDef,
    BadRequestComAtprotoRepoCreateRecordResponseBodyError
  > = z.instanceof(BadRequestComAtprotoRepoCreateRecordResponseBodyError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: ComAtprotoRepoCreateRecordError$outboundSchema,
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestComAtprotoRepoCreateRecordResponseBodyError$ {
  /** @deprecated use `BadRequestComAtprotoRepoCreateRecordResponseBodyError$inboundSchema` instead. */
  export const inboundSchema =
    BadRequestComAtprotoRepoCreateRecordResponseBodyError$inboundSchema;
  /** @deprecated use `BadRequestComAtprotoRepoCreateRecordResponseBodyError$outboundSchema` instead. */
  export const outboundSchema =
    BadRequestComAtprotoRepoCreateRecordResponseBodyError$outboundSchema;
  /** @deprecated use `BadRequestComAtprotoRepoCreateRecordResponseBodyError$Outbound` instead. */
  export type Outbound =
    BadRequestComAtprotoRepoCreateRecordResponseBodyError$Outbound;
}
