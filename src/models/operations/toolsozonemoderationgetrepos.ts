/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsOzoneModerationGetReposRequest = {
  dids: Array<string>;
};

export type Repos =
  | components.ToolsOzoneModerationDefsRepoViewNotFound
  | components.ToolsOzoneModerationDefsRepoViewDetail;

/**
 * OK
 */
export type ToolsOzoneModerationGetReposResponseBody = {
  repos: Array<
    | components.ToolsOzoneModerationDefsRepoViewNotFound
    | components.ToolsOzoneModerationDefsRepoViewDetail
  >;
};

/** @internal */
export const ToolsOzoneModerationGetReposRequest$inboundSchema: z.ZodType<
  ToolsOzoneModerationGetReposRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dids: z.array(z.string()),
});

/** @internal */
export type ToolsOzoneModerationGetReposRequest$Outbound = {
  dids: Array<string>;
};

/** @internal */
export const ToolsOzoneModerationGetReposRequest$outboundSchema: z.ZodType<
  ToolsOzoneModerationGetReposRequest$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationGetReposRequest
> = z.object({
  dids: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetReposRequest$ {
  /** @deprecated use `ToolsOzoneModerationGetReposRequest$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetReposRequest$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposRequest$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetReposRequest$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposRequest$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetReposRequest$Outbound;
}

export function toolsOzoneModerationGetReposRequestToJSON(
  toolsOzoneModerationGetReposRequest: ToolsOzoneModerationGetReposRequest,
): string {
  return JSON.stringify(
    ToolsOzoneModerationGetReposRequest$outboundSchema.parse(
      toolsOzoneModerationGetReposRequest,
    ),
  );
}

export function toolsOzoneModerationGetReposRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationGetReposRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationGetReposRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationGetReposRequest' from JSON`,
  );
}

/** @internal */
export const Repos$inboundSchema: z.ZodType<Repos, z.ZodTypeDef, unknown> = z
  .union([
    components.ToolsOzoneModerationDefsRepoViewNotFound$inboundSchema,
    components.ToolsOzoneModerationDefsRepoViewDetail$inboundSchema,
  ]);

/** @internal */
export type Repos$Outbound =
  | components.ToolsOzoneModerationDefsRepoViewNotFound$Outbound
  | components.ToolsOzoneModerationDefsRepoViewDetail$Outbound;

/** @internal */
export const Repos$outboundSchema: z.ZodType<
  Repos$Outbound,
  z.ZodTypeDef,
  Repos
> = z.union([
  components.ToolsOzoneModerationDefsRepoViewNotFound$outboundSchema,
  components.ToolsOzoneModerationDefsRepoViewDetail$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Repos$ {
  /** @deprecated use `Repos$inboundSchema` instead. */
  export const inboundSchema = Repos$inboundSchema;
  /** @deprecated use `Repos$outboundSchema` instead. */
  export const outboundSchema = Repos$outboundSchema;
  /** @deprecated use `Repos$Outbound` instead. */
  export type Outbound = Repos$Outbound;
}

export function reposToJSON(repos: Repos): string {
  return JSON.stringify(Repos$outboundSchema.parse(repos));
}

export function reposFromJSON(
  jsonString: string,
): SafeParseResult<Repos, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Repos$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Repos' from JSON`,
  );
}

/** @internal */
export const ToolsOzoneModerationGetReposResponseBody$inboundSchema: z.ZodType<
  ToolsOzoneModerationGetReposResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  repos: z.array(
    z.union([
      components.ToolsOzoneModerationDefsRepoViewNotFound$inboundSchema,
      components.ToolsOzoneModerationDefsRepoViewDetail$inboundSchema,
    ]),
  ),
});

/** @internal */
export type ToolsOzoneModerationGetReposResponseBody$Outbound = {
  repos: Array<
    | components.ToolsOzoneModerationDefsRepoViewNotFound$Outbound
    | components.ToolsOzoneModerationDefsRepoViewDetail$Outbound
  >;
};

/** @internal */
export const ToolsOzoneModerationGetReposResponseBody$outboundSchema: z.ZodType<
  ToolsOzoneModerationGetReposResponseBody$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationGetReposResponseBody
> = z.object({
  repos: z.array(
    z.union([
      components.ToolsOzoneModerationDefsRepoViewNotFound$outboundSchema,
      components.ToolsOzoneModerationDefsRepoViewDetail$outboundSchema,
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetReposResponseBody$ {
  /** @deprecated use `ToolsOzoneModerationGetReposResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetReposResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetReposResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposResponseBody$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetReposResponseBody$Outbound;
}

export function toolsOzoneModerationGetReposResponseBodyToJSON(
  toolsOzoneModerationGetReposResponseBody:
    ToolsOzoneModerationGetReposResponseBody,
): string {
  return JSON.stringify(
    ToolsOzoneModerationGetReposResponseBody$outboundSchema.parse(
      toolsOzoneModerationGetReposResponseBody,
    ),
  );
}

export function toolsOzoneModerationGetReposResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ToolsOzoneModerationGetReposResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationGetReposResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ToolsOzoneModerationGetReposResponseBody' from JSON`,
  );
}
