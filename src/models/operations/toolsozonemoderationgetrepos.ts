/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsOzoneModerationGetReposRequest = {
  dids: Array<string>;
};

export type Repo =
  | components.ToolsOzoneModerationDefsRepoViewDetail
  | components.ToolsOzoneModerationDefsRepoViewNotFound;

/**
 * OK
 */
export type ToolsOzoneModerationGetReposResponse = {
  repos: Array<
    | components.ToolsOzoneModerationDefsRepoViewDetail
    | components.ToolsOzoneModerationDefsRepoViewNotFound
  >;
};

/** @internal */
export const ToolsOzoneModerationGetReposRequest$inboundSchema: z.ZodType<
  ToolsOzoneModerationGetReposRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dids: z.array(z.string()),
});

/** @internal */
export type ToolsOzoneModerationGetReposRequest$Outbound = {
  dids: Array<string>;
};

/** @internal */
export const ToolsOzoneModerationGetReposRequest$outboundSchema: z.ZodType<
  ToolsOzoneModerationGetReposRequest$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationGetReposRequest
> = z.object({
  dids: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetReposRequest$ {
  /** @deprecated use `ToolsOzoneModerationGetReposRequest$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetReposRequest$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposRequest$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetReposRequest$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposRequest$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetReposRequest$Outbound;
}

export function toolsOzoneModerationGetReposRequestToJSON(
  toolsOzoneModerationGetReposRequest: ToolsOzoneModerationGetReposRequest,
): string {
  return JSON.stringify(
    ToolsOzoneModerationGetReposRequest$outboundSchema.parse(
      toolsOzoneModerationGetReposRequest,
    ),
  );
}

export function toolsOzoneModerationGetReposRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationGetReposRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationGetReposRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationGetReposRequest' from JSON`,
  );
}

/** @internal */
export const Repo$inboundSchema: z.ZodType<Repo, z.ZodTypeDef, unknown> = z
  .union([
    components.ToolsOzoneModerationDefsRepoViewDetail$inboundSchema,
    components.ToolsOzoneModerationDefsRepoViewNotFound$inboundSchema,
  ]);

/** @internal */
export type Repo$Outbound =
  | components.ToolsOzoneModerationDefsRepoViewDetail$Outbound
  | components.ToolsOzoneModerationDefsRepoViewNotFound$Outbound;

/** @internal */
export const Repo$outboundSchema: z.ZodType<Repo$Outbound, z.ZodTypeDef, Repo> =
  z.union([
    components.ToolsOzoneModerationDefsRepoViewDetail$outboundSchema,
    components.ToolsOzoneModerationDefsRepoViewNotFound$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Repo$ {
  /** @deprecated use `Repo$inboundSchema` instead. */
  export const inboundSchema = Repo$inboundSchema;
  /** @deprecated use `Repo$outboundSchema` instead. */
  export const outboundSchema = Repo$outboundSchema;
  /** @deprecated use `Repo$Outbound` instead. */
  export type Outbound = Repo$Outbound;
}

export function repoToJSON(repo: Repo): string {
  return JSON.stringify(Repo$outboundSchema.parse(repo));
}

export function repoFromJSON(
  jsonString: string,
): SafeParseResult<Repo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Repo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Repo' from JSON`,
  );
}

/** @internal */
export const ToolsOzoneModerationGetReposResponse$inboundSchema: z.ZodType<
  ToolsOzoneModerationGetReposResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  repos: z.array(
    z.union([
      components.ToolsOzoneModerationDefsRepoViewDetail$inboundSchema,
      components.ToolsOzoneModerationDefsRepoViewNotFound$inboundSchema,
    ]),
  ),
});

/** @internal */
export type ToolsOzoneModerationGetReposResponse$Outbound = {
  repos: Array<
    | components.ToolsOzoneModerationDefsRepoViewDetail$Outbound
    | components.ToolsOzoneModerationDefsRepoViewNotFound$Outbound
  >;
};

/** @internal */
export const ToolsOzoneModerationGetReposResponse$outboundSchema: z.ZodType<
  ToolsOzoneModerationGetReposResponse$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationGetReposResponse
> = z.object({
  repos: z.array(
    z.union([
      components.ToolsOzoneModerationDefsRepoViewDetail$outboundSchema,
      components.ToolsOzoneModerationDefsRepoViewNotFound$outboundSchema,
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetReposResponse$ {
  /** @deprecated use `ToolsOzoneModerationGetReposResponse$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetReposResponse$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposResponse$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetReposResponse$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetReposResponse$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetReposResponse$Outbound;
}

export function toolsOzoneModerationGetReposResponseToJSON(
  toolsOzoneModerationGetReposResponse: ToolsOzoneModerationGetReposResponse,
): string {
  return JSON.stringify(
    ToolsOzoneModerationGetReposResponse$outboundSchema.parse(
      toolsOzoneModerationGetReposResponse,
    ),
  );
}

export function toolsOzoneModerationGetReposResponseFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationGetReposResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationGetReposResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationGetReposResponse' from JSON`,
  );
}
