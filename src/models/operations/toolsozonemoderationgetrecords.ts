/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsOzoneModerationGetRecordsRequest = {
  uris: Array<string>;
};

export type RecordT =
  | components.ToolsOzoneModerationDefsRecordViewDetail
  | components.ToolsOzoneModerationDefsRecordViewNotFound;

/**
 * OK
 */
export type ToolsOzoneModerationGetRecordsResponse = {
  records: Array<
    | components.ToolsOzoneModerationDefsRecordViewDetail
    | components.ToolsOzoneModerationDefsRecordViewNotFound
  >;
};

/** @internal */
export const ToolsOzoneModerationGetRecordsRequest$inboundSchema: z.ZodType<
  ToolsOzoneModerationGetRecordsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uris: z.array(z.string()),
});

/** @internal */
export type ToolsOzoneModerationGetRecordsRequest$Outbound = {
  uris: Array<string>;
};

/** @internal */
export const ToolsOzoneModerationGetRecordsRequest$outboundSchema: z.ZodType<
  ToolsOzoneModerationGetRecordsRequest$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationGetRecordsRequest
> = z.object({
  uris: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetRecordsRequest$ {
  /** @deprecated use `ToolsOzoneModerationGetRecordsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetRecordsRequest$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetRecordsRequest$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordsRequest$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetRecordsRequest$Outbound;
}

export function toolsOzoneModerationGetRecordsRequestToJSON(
  toolsOzoneModerationGetRecordsRequest: ToolsOzoneModerationGetRecordsRequest,
): string {
  return JSON.stringify(
    ToolsOzoneModerationGetRecordsRequest$outboundSchema.parse(
      toolsOzoneModerationGetRecordsRequest,
    ),
  );
}

export function toolsOzoneModerationGetRecordsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationGetRecordsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationGetRecordsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationGetRecordsRequest' from JSON`,
  );
}

/** @internal */
export const RecordT$inboundSchema: z.ZodType<RecordT, z.ZodTypeDef, unknown> =
  z.union([
    components.ToolsOzoneModerationDefsRecordViewDetail$inboundSchema,
    components.ToolsOzoneModerationDefsRecordViewNotFound$inboundSchema,
  ]);

/** @internal */
export type RecordT$Outbound =
  | components.ToolsOzoneModerationDefsRecordViewDetail$Outbound
  | components.ToolsOzoneModerationDefsRecordViewNotFound$Outbound;

/** @internal */
export const RecordT$outboundSchema: z.ZodType<
  RecordT$Outbound,
  z.ZodTypeDef,
  RecordT
> = z.union([
  components.ToolsOzoneModerationDefsRecordViewDetail$outboundSchema,
  components.ToolsOzoneModerationDefsRecordViewNotFound$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordT$ {
  /** @deprecated use `RecordT$inboundSchema` instead. */
  export const inboundSchema = RecordT$inboundSchema;
  /** @deprecated use `RecordT$outboundSchema` instead. */
  export const outboundSchema = RecordT$outboundSchema;
  /** @deprecated use `RecordT$Outbound` instead. */
  export type Outbound = RecordT$Outbound;
}

export function recordToJSON(recordT: RecordT): string {
  return JSON.stringify(RecordT$outboundSchema.parse(recordT));
}

export function recordFromJSON(
  jsonString: string,
): SafeParseResult<RecordT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecordT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecordT' from JSON`,
  );
}

/** @internal */
export const ToolsOzoneModerationGetRecordsResponse$inboundSchema: z.ZodType<
  ToolsOzoneModerationGetRecordsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  records: z.array(
    z.union([
      components.ToolsOzoneModerationDefsRecordViewDetail$inboundSchema,
      components.ToolsOzoneModerationDefsRecordViewNotFound$inboundSchema,
    ]),
  ),
});

/** @internal */
export type ToolsOzoneModerationGetRecordsResponse$Outbound = {
  records: Array<
    | components.ToolsOzoneModerationDefsRecordViewDetail$Outbound
    | components.ToolsOzoneModerationDefsRecordViewNotFound$Outbound
  >;
};

/** @internal */
export const ToolsOzoneModerationGetRecordsResponse$outboundSchema: z.ZodType<
  ToolsOzoneModerationGetRecordsResponse$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationGetRecordsResponse
> = z.object({
  records: z.array(
    z.union([
      components.ToolsOzoneModerationDefsRecordViewDetail$outboundSchema,
      components.ToolsOzoneModerationDefsRecordViewNotFound$outboundSchema,
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetRecordsResponse$ {
  /** @deprecated use `ToolsOzoneModerationGetRecordsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetRecordsResponse$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetRecordsResponse$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordsResponse$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetRecordsResponse$Outbound;
}

export function toolsOzoneModerationGetRecordsResponseToJSON(
  toolsOzoneModerationGetRecordsResponse:
    ToolsOzoneModerationGetRecordsResponse,
): string {
  return JSON.stringify(
    ToolsOzoneModerationGetRecordsResponse$outboundSchema.parse(
      toolsOzoneModerationGetRecordsResponse,
    ),
  );
}

export function toolsOzoneModerationGetRecordsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationGetRecordsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationGetRecordsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationGetRecordsResponse' from JSON`,
  );
}
