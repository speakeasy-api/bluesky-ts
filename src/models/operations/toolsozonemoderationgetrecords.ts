/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsOzoneModerationGetRecordsRequest = {
  uris: Array<string>;
};

export type Records =
  | components.ToolsOzoneModerationDefsRecordViewNotFound
  | components.ToolsOzoneModerationDefsRecordViewDetail;

/**
 * OK
 */
export type ToolsOzoneModerationGetRecordsResponseBody = {
  records: Array<
    | components.ToolsOzoneModerationDefsRecordViewNotFound
    | components.ToolsOzoneModerationDefsRecordViewDetail
  >;
};

/** @internal */
export const ToolsOzoneModerationGetRecordsRequest$inboundSchema: z.ZodType<
  ToolsOzoneModerationGetRecordsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uris: z.array(z.string()),
});

/** @internal */
export type ToolsOzoneModerationGetRecordsRequest$Outbound = {
  uris: Array<string>;
};

/** @internal */
export const ToolsOzoneModerationGetRecordsRequest$outboundSchema: z.ZodType<
  ToolsOzoneModerationGetRecordsRequest$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationGetRecordsRequest
> = z.object({
  uris: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetRecordsRequest$ {
  /** @deprecated use `ToolsOzoneModerationGetRecordsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetRecordsRequest$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetRecordsRequest$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordsRequest$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetRecordsRequest$Outbound;
}

export function toolsOzoneModerationGetRecordsRequestToJSON(
  toolsOzoneModerationGetRecordsRequest: ToolsOzoneModerationGetRecordsRequest,
): string {
  return JSON.stringify(
    ToolsOzoneModerationGetRecordsRequest$outboundSchema.parse(
      toolsOzoneModerationGetRecordsRequest,
    ),
  );
}

export function toolsOzoneModerationGetRecordsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationGetRecordsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationGetRecordsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationGetRecordsRequest' from JSON`,
  );
}

/** @internal */
export const Records$inboundSchema: z.ZodType<Records, z.ZodTypeDef, unknown> =
  z.union([
    components.ToolsOzoneModerationDefsRecordViewNotFound$inboundSchema,
    components.ToolsOzoneModerationDefsRecordViewDetail$inboundSchema,
  ]);

/** @internal */
export type Records$Outbound =
  | components.ToolsOzoneModerationDefsRecordViewNotFound$Outbound
  | components.ToolsOzoneModerationDefsRecordViewDetail$Outbound;

/** @internal */
export const Records$outboundSchema: z.ZodType<
  Records$Outbound,
  z.ZodTypeDef,
  Records
> = z.union([
  components.ToolsOzoneModerationDefsRecordViewNotFound$outboundSchema,
  components.ToolsOzoneModerationDefsRecordViewDetail$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Records$ {
  /** @deprecated use `Records$inboundSchema` instead. */
  export const inboundSchema = Records$inboundSchema;
  /** @deprecated use `Records$outboundSchema` instead. */
  export const outboundSchema = Records$outboundSchema;
  /** @deprecated use `Records$Outbound` instead. */
  export type Outbound = Records$Outbound;
}

export function recordsToJSON(records: Records): string {
  return JSON.stringify(Records$outboundSchema.parse(records));
}

export function recordsFromJSON(
  jsonString: string,
): SafeParseResult<Records, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Records$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Records' from JSON`,
  );
}

/** @internal */
export const ToolsOzoneModerationGetRecordsResponseBody$inboundSchema:
  z.ZodType<ToolsOzoneModerationGetRecordsResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      records: z.array(
        z.union([
          components.ToolsOzoneModerationDefsRecordViewNotFound$inboundSchema,
          components.ToolsOzoneModerationDefsRecordViewDetail$inboundSchema,
        ]),
      ),
    });

/** @internal */
export type ToolsOzoneModerationGetRecordsResponseBody$Outbound = {
  records: Array<
    | components.ToolsOzoneModerationDefsRecordViewNotFound$Outbound
    | components.ToolsOzoneModerationDefsRecordViewDetail$Outbound
  >;
};

/** @internal */
export const ToolsOzoneModerationGetRecordsResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationGetRecordsResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationGetRecordsResponseBody
  > = z.object({
    records: z.array(
      z.union([
        components.ToolsOzoneModerationDefsRecordViewNotFound$outboundSchema,
        components.ToolsOzoneModerationDefsRecordViewDetail$outboundSchema,
      ]),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetRecordsResponseBody$ {
  /** @deprecated use `ToolsOzoneModerationGetRecordsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetRecordsResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetRecordsResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordsResponseBody$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetRecordsResponseBody$Outbound;
}

export function toolsOzoneModerationGetRecordsResponseBodyToJSON(
  toolsOzoneModerationGetRecordsResponseBody:
    ToolsOzoneModerationGetRecordsResponseBody,
): string {
  return JSON.stringify(
    ToolsOzoneModerationGetRecordsResponseBody$outboundSchema.parse(
      toolsOzoneModerationGetRecordsResponseBody,
    ),
  );
}

export function toolsOzoneModerationGetRecordsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ToolsOzoneModerationGetRecordsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationGetRecordsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ToolsOzoneModerationGetRecordsResponseBody' from JSON`,
  );
}
