/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoServerCreateInviteCodeRequest = {
  useCount: number;
  forAccount?: string | undefined;
};

/**
 * OK
 */
export type ComAtprotoServerCreateInviteCodeResponse = {
  code: string;
};

/** @internal */
export const ComAtprotoServerCreateInviteCodeRequest$inboundSchema: z.ZodType<
  ComAtprotoServerCreateInviteCodeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  useCount: z.number().int(),
  forAccount: z.string().optional(),
});

/** @internal */
export type ComAtprotoServerCreateInviteCodeRequest$Outbound = {
  useCount: number;
  forAccount?: string | undefined;
};

/** @internal */
export const ComAtprotoServerCreateInviteCodeRequest$outboundSchema: z.ZodType<
  ComAtprotoServerCreateInviteCodeRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerCreateInviteCodeRequest
> = z.object({
  useCount: z.number().int(),
  forAccount: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateInviteCodeRequest$ {
  /** @deprecated use `ComAtprotoServerCreateInviteCodeRequest$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateInviteCodeRequest$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateInviteCodeRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateInviteCodeRequest$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateInviteCodeRequest$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateInviteCodeRequest$Outbound;
}

export function comAtprotoServerCreateInviteCodeRequestToJSON(
  comAtprotoServerCreateInviteCodeRequest:
    ComAtprotoServerCreateInviteCodeRequest,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateInviteCodeRequest$outboundSchema.parse(
      comAtprotoServerCreateInviteCodeRequest,
    ),
  );
}

export function comAtprotoServerCreateInviteCodeRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerCreateInviteCodeRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateInviteCodeRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerCreateInviteCodeRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoServerCreateInviteCodeResponse$inboundSchema: z.ZodType<
  ComAtprotoServerCreateInviteCodeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
});

/** @internal */
export type ComAtprotoServerCreateInviteCodeResponse$Outbound = {
  code: string;
};

/** @internal */
export const ComAtprotoServerCreateInviteCodeResponse$outboundSchema: z.ZodType<
  ComAtprotoServerCreateInviteCodeResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerCreateInviteCodeResponse
> = z.object({
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateInviteCodeResponse$ {
  /** @deprecated use `ComAtprotoServerCreateInviteCodeResponse$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateInviteCodeResponse$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateInviteCodeResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateInviteCodeResponse$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateInviteCodeResponse$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateInviteCodeResponse$Outbound;
}

export function comAtprotoServerCreateInviteCodeResponseToJSON(
  comAtprotoServerCreateInviteCodeResponse:
    ComAtprotoServerCreateInviteCodeResponse,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateInviteCodeResponse$outboundSchema.parse(
      comAtprotoServerCreateInviteCodeResponse,
    ),
  );
}

export function comAtprotoServerCreateInviteCodeResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerCreateInviteCodeResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateInviteCodeResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerCreateInviteCodeResponse' from JSON`,
  );
}
