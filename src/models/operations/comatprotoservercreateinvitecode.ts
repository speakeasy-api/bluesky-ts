/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoServerCreateInviteCodeRequestBody = {
  useCount: number;
  forAccount?: string | undefined;
};

/**
 * OK
 */
export type ComAtprotoServerCreateInviteCodeResponseBody = {
  code: string;
};

/** @internal */
export const ComAtprotoServerCreateInviteCodeRequestBody$inboundSchema:
  z.ZodType<
    ComAtprotoServerCreateInviteCodeRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    useCount: z.number().int(),
    forAccount: z.string().optional(),
  });

/** @internal */
export type ComAtprotoServerCreateInviteCodeRequestBody$Outbound = {
  useCount: number;
  forAccount?: string | undefined;
};

/** @internal */
export const ComAtprotoServerCreateInviteCodeRequestBody$outboundSchema:
  z.ZodType<
    ComAtprotoServerCreateInviteCodeRequestBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerCreateInviteCodeRequestBody
  > = z.object({
    useCount: z.number().int(),
    forAccount: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateInviteCodeRequestBody$ {
  /** @deprecated use `ComAtprotoServerCreateInviteCodeRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateInviteCodeRequestBody$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateInviteCodeRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateInviteCodeRequestBody$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateInviteCodeRequestBody$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateInviteCodeRequestBody$Outbound;
}

export function comAtprotoServerCreateInviteCodeRequestBodyToJSON(
  comAtprotoServerCreateInviteCodeRequestBody:
    ComAtprotoServerCreateInviteCodeRequestBody,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateInviteCodeRequestBody$outboundSchema.parse(
      comAtprotoServerCreateInviteCodeRequestBody,
    ),
  );
}

export function comAtprotoServerCreateInviteCodeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerCreateInviteCodeRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateInviteCodeRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerCreateInviteCodeRequestBody' from JSON`,
  );
}

/** @internal */
export const ComAtprotoServerCreateInviteCodeResponseBody$inboundSchema:
  z.ZodType<
    ComAtprotoServerCreateInviteCodeResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
  });

/** @internal */
export type ComAtprotoServerCreateInviteCodeResponseBody$Outbound = {
  code: string;
};

/** @internal */
export const ComAtprotoServerCreateInviteCodeResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoServerCreateInviteCodeResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerCreateInviteCodeResponseBody
  > = z.object({
    code: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateInviteCodeResponseBody$ {
  /** @deprecated use `ComAtprotoServerCreateInviteCodeResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateInviteCodeResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateInviteCodeResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateInviteCodeResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateInviteCodeResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateInviteCodeResponseBody$Outbound;
}

export function comAtprotoServerCreateInviteCodeResponseBodyToJSON(
  comAtprotoServerCreateInviteCodeResponseBody:
    ComAtprotoServerCreateInviteCodeResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateInviteCodeResponseBody$outboundSchema.parse(
      comAtprotoServerCreateInviteCodeResponseBody,
    ),
  );
}

export function comAtprotoServerCreateInviteCodeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerCreateInviteCodeResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateInviteCodeResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerCreateInviteCodeResponseBody' from JSON`,
  );
}
