/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsOzoneCommunicationUpdateTemplateBody = {
  /**
   * ID of the template to be updated.
   */
  id: string;
  /**
   * Name of the template.
   */
  name?: string | undefined;
  /**
   * Message language.
   */
  lang?: string | undefined;
  /**
   * Content of the template, markdown supported, can contain variable placeholders.
   */
  contentMarkdown?: string | undefined;
  /**
   * Subject of the message, used in emails.
   */
  subject?: string | undefined;
  /**
   * DID of the user who is updating the template.
   */
  updatedBy?: string | undefined;
  disabled?: boolean | undefined;
};

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateBody$inboundSchema: z.ZodType<
  ToolsOzoneCommunicationUpdateTemplateBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string().optional(),
  lang: z.string().optional(),
  contentMarkdown: z.string().optional(),
  subject: z.string().optional(),
  updatedBy: z.string().optional(),
  disabled: z.boolean().optional(),
});

/** @internal */
export type ToolsOzoneCommunicationUpdateTemplateBody$Outbound = {
  id: string;
  name?: string | undefined;
  lang?: string | undefined;
  contentMarkdown?: string | undefined;
  subject?: string | undefined;
  updatedBy?: string | undefined;
  disabled?: boolean | undefined;
};

/** @internal */
export const ToolsOzoneCommunicationUpdateTemplateBody$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationUpdateTemplateBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationUpdateTemplateBody
  > = z.object({
    id: z.string(),
    name: z.string().optional(),
    lang: z.string().optional(),
    contentMarkdown: z.string().optional(),
    subject: z.string().optional(),
    updatedBy: z.string().optional(),
    disabled: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationUpdateTemplateBody$ {
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationUpdateTemplateBody$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationUpdateTemplateBody$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationUpdateTemplateBody$Outbound` instead. */
  export type Outbound = ToolsOzoneCommunicationUpdateTemplateBody$Outbound;
}

export function toolsOzoneCommunicationUpdateTemplateBodyToJSON(
  toolsOzoneCommunicationUpdateTemplateBody:
    ToolsOzoneCommunicationUpdateTemplateBody,
): string {
  return JSON.stringify(
    ToolsOzoneCommunicationUpdateTemplateBody$outboundSchema.parse(
      toolsOzoneCommunicationUpdateTemplateBody,
    ),
  );
}

export function toolsOzoneCommunicationUpdateTemplateBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ToolsOzoneCommunicationUpdateTemplateBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneCommunicationUpdateTemplateBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ToolsOzoneCommunicationUpdateTemplateBody' from JSON`,
  );
}
