/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoServerReserveSigningKeyRequest = {
  /**
   * The DID to reserve a key for.
   */
  did?: string | undefined;
};

/**
 * OK
 */
export type ComAtprotoServerReserveSigningKeyResponse = {
  /**
   * The public key for the reserved signing key, in did:key serialization.
   */
  signingKey: string;
};

/** @internal */
export const ComAtprotoServerReserveSigningKeyRequest$inboundSchema: z.ZodType<
  ComAtprotoServerReserveSigningKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  did: z.string().optional(),
});

/** @internal */
export type ComAtprotoServerReserveSigningKeyRequest$Outbound = {
  did?: string | undefined;
};

/** @internal */
export const ComAtprotoServerReserveSigningKeyRequest$outboundSchema: z.ZodType<
  ComAtprotoServerReserveSigningKeyRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerReserveSigningKeyRequest
> = z.object({
  did: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerReserveSigningKeyRequest$ {
  /** @deprecated use `ComAtprotoServerReserveSigningKeyRequest$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerReserveSigningKeyRequest$inboundSchema;
  /** @deprecated use `ComAtprotoServerReserveSigningKeyRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerReserveSigningKeyRequest$outboundSchema;
  /** @deprecated use `ComAtprotoServerReserveSigningKeyRequest$Outbound` instead. */
  export type Outbound = ComAtprotoServerReserveSigningKeyRequest$Outbound;
}

export function comAtprotoServerReserveSigningKeyRequestToJSON(
  comAtprotoServerReserveSigningKeyRequest:
    ComAtprotoServerReserveSigningKeyRequest,
): string {
  return JSON.stringify(
    ComAtprotoServerReserveSigningKeyRequest$outboundSchema.parse(
      comAtprotoServerReserveSigningKeyRequest,
    ),
  );
}

export function comAtprotoServerReserveSigningKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerReserveSigningKeyRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerReserveSigningKeyRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerReserveSigningKeyRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoServerReserveSigningKeyResponse$inboundSchema: z.ZodType<
  ComAtprotoServerReserveSigningKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  signingKey: z.string(),
});

/** @internal */
export type ComAtprotoServerReserveSigningKeyResponse$Outbound = {
  signingKey: string;
};

/** @internal */
export const ComAtprotoServerReserveSigningKeyResponse$outboundSchema:
  z.ZodType<
    ComAtprotoServerReserveSigningKeyResponse$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerReserveSigningKeyResponse
  > = z.object({
    signingKey: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerReserveSigningKeyResponse$ {
  /** @deprecated use `ComAtprotoServerReserveSigningKeyResponse$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerReserveSigningKeyResponse$inboundSchema;
  /** @deprecated use `ComAtprotoServerReserveSigningKeyResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerReserveSigningKeyResponse$outboundSchema;
  /** @deprecated use `ComAtprotoServerReserveSigningKeyResponse$Outbound` instead. */
  export type Outbound = ComAtprotoServerReserveSigningKeyResponse$Outbound;
}

export function comAtprotoServerReserveSigningKeyResponseToJSON(
  comAtprotoServerReserveSigningKeyResponse:
    ComAtprotoServerReserveSigningKeyResponse,
): string {
  return JSON.stringify(
    ComAtprotoServerReserveSigningKeyResponse$outboundSchema.parse(
      comAtprotoServerReserveSigningKeyResponse,
    ),
  );
}

export function comAtprotoServerReserveSigningKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerReserveSigningKeyResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerReserveSigningKeyResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerReserveSigningKeyResponse' from JSON`,
  );
}
