/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsOzoneCommunicationCreateTemplateRequestBody = {
  /**
   * Name of the template.
   */
  name: string;
  /**
   * Content of the template, markdown supported, can contain variable placeholders.
   */
  contentMarkdown: string;
  /**
   * Subject of the message, used in emails.
   */
  subject: string;
  /**
   * Message language.
   */
  lang?: string | undefined;
  /**
   * DID of the user who is creating the template.
   */
  createdBy?: string | undefined;
};

/** @internal */
export const ToolsOzoneCommunicationCreateTemplateRequestBody$inboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationCreateTemplateRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    contentMarkdown: z.string(),
    subject: z.string(),
    lang: z.string().optional(),
    createdBy: z.string().optional(),
  });

/** @internal */
export type ToolsOzoneCommunicationCreateTemplateRequestBody$Outbound = {
  name: string;
  contentMarkdown: string;
  subject: string;
  lang?: string | undefined;
  createdBy?: string | undefined;
};

/** @internal */
export const ToolsOzoneCommunicationCreateTemplateRequestBody$outboundSchema:
  z.ZodType<
    ToolsOzoneCommunicationCreateTemplateRequestBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneCommunicationCreateTemplateRequestBody
  > = z.object({
    name: z.string(),
    contentMarkdown: z.string(),
    subject: z.string(),
    lang: z.string().optional(),
    createdBy: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneCommunicationCreateTemplateRequestBody$ {
  /** @deprecated use `ToolsOzoneCommunicationCreateTemplateRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneCommunicationCreateTemplateRequestBody$inboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationCreateTemplateRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneCommunicationCreateTemplateRequestBody$outboundSchema;
  /** @deprecated use `ToolsOzoneCommunicationCreateTemplateRequestBody$Outbound` instead. */
  export type Outbound =
    ToolsOzoneCommunicationCreateTemplateRequestBody$Outbound;
}

export function toolsOzoneCommunicationCreateTemplateRequestBodyToJSON(
  toolsOzoneCommunicationCreateTemplateRequestBody:
    ToolsOzoneCommunicationCreateTemplateRequestBody,
): string {
  return JSON.stringify(
    ToolsOzoneCommunicationCreateTemplateRequestBody$outboundSchema.parse(
      toolsOzoneCommunicationCreateTemplateRequestBody,
    ),
  );
}

export function toolsOzoneCommunicationCreateTemplateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ToolsOzoneCommunicationCreateTemplateRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneCommunicationCreateTemplateRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ToolsOzoneCommunicationCreateTemplateRequestBody' from JSON`,
  );
}
