/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsOzoneModerationGetRecordRequest = {
  uri: string;
  cid?: string | undefined;
};

/** @internal */
export const ToolsOzoneModerationGetRecordRequest$inboundSchema: z.ZodType<
  ToolsOzoneModerationGetRecordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  cid: z.string().optional(),
});

/** @internal */
export type ToolsOzoneModerationGetRecordRequest$Outbound = {
  uri: string;
  cid?: string | undefined;
};

/** @internal */
export const ToolsOzoneModerationGetRecordRequest$outboundSchema: z.ZodType<
  ToolsOzoneModerationGetRecordRequest$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationGetRecordRequest
> = z.object({
  uri: z.string(),
  cid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationGetRecordRequest$ {
  /** @deprecated use `ToolsOzoneModerationGetRecordRequest$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationGetRecordRequest$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordRequest$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationGetRecordRequest$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationGetRecordRequest$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationGetRecordRequest$Outbound;
}

export function toolsOzoneModerationGetRecordRequestToJSON(
  toolsOzoneModerationGetRecordRequest: ToolsOzoneModerationGetRecordRequest,
): string {
  return JSON.stringify(
    ToolsOzoneModerationGetRecordRequest$outboundSchema.parse(
      toolsOzoneModerationGetRecordRequest,
    ),
  );
}

export function toolsOzoneModerationGetRecordRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationGetRecordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationGetRecordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationGetRecordRequest' from JSON`,
  );
}
