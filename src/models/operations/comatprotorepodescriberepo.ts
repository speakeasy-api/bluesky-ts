/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoRepoDescribeRepoRequest = {
  /**
   * The handle or DID of the repo.
   */
  repo: string;
};

/**
 * OK
 */
export type ComAtprotoRepoDescribeRepoResponseBody = {
  handle: string;
  did: string;
  didDoc?: any | undefined;
  collections: Array<string>;
  /**
   * Indicates if handle is currently valid (resolves bi-directionally)
   */
  handleIsCorrect: boolean;
};

/** @internal */
export const ComAtprotoRepoDescribeRepoRequest$inboundSchema: z.ZodType<
  ComAtprotoRepoDescribeRepoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
});

/** @internal */
export type ComAtprotoRepoDescribeRepoRequest$Outbound = {
  repo: string;
};

/** @internal */
export const ComAtprotoRepoDescribeRepoRequest$outboundSchema: z.ZodType<
  ComAtprotoRepoDescribeRepoRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoDescribeRepoRequest
> = z.object({
  repo: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDescribeRepoRequest$ {
  /** @deprecated use `ComAtprotoRepoDescribeRepoRequest$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoDescribeRepoRequest$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDescribeRepoRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoDescribeRepoRequest$outboundSchema;
  /** @deprecated use `ComAtprotoRepoDescribeRepoRequest$Outbound` instead. */
  export type Outbound = ComAtprotoRepoDescribeRepoRequest$Outbound;
}

export function comAtprotoRepoDescribeRepoRequestToJSON(
  comAtprotoRepoDescribeRepoRequest: ComAtprotoRepoDescribeRepoRequest,
): string {
  return JSON.stringify(
    ComAtprotoRepoDescribeRepoRequest$outboundSchema.parse(
      comAtprotoRepoDescribeRepoRequest,
    ),
  );
}

export function comAtprotoRepoDescribeRepoRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoDescribeRepoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoDescribeRepoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoDescribeRepoRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoRepoDescribeRepoResponseBody$inboundSchema: z.ZodType<
  ComAtprotoRepoDescribeRepoResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  handle: z.string(),
  did: z.string(),
  didDoc: z.any().optional(),
  collections: z.array(z.string()),
  handleIsCorrect: z.boolean(),
});

/** @internal */
export type ComAtprotoRepoDescribeRepoResponseBody$Outbound = {
  handle: string;
  did: string;
  didDoc?: any | undefined;
  collections: Array<string>;
  handleIsCorrect: boolean;
};

/** @internal */
export const ComAtprotoRepoDescribeRepoResponseBody$outboundSchema: z.ZodType<
  ComAtprotoRepoDescribeRepoResponseBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoDescribeRepoResponseBody
> = z.object({
  handle: z.string(),
  did: z.string(),
  didDoc: z.any().optional(),
  collections: z.array(z.string()),
  handleIsCorrect: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDescribeRepoResponseBody$ {
  /** @deprecated use `ComAtprotoRepoDescribeRepoResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoDescribeRepoResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDescribeRepoResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoDescribeRepoResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoDescribeRepoResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoRepoDescribeRepoResponseBody$Outbound;
}

export function comAtprotoRepoDescribeRepoResponseBodyToJSON(
  comAtprotoRepoDescribeRepoResponseBody:
    ComAtprotoRepoDescribeRepoResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoRepoDescribeRepoResponseBody$outboundSchema.parse(
      comAtprotoRepoDescribeRepoResponseBody,
    ),
  );
}

export function comAtprotoRepoDescribeRepoResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoDescribeRepoResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoRepoDescribeRepoResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoDescribeRepoResponseBody' from JSON`,
  );
}
