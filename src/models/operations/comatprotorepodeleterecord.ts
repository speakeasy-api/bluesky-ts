/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoRepoDeleteRecordRequest = {
  /**
   * The handle or DID of the repo (aka, current account).
   */
  repo: string;
  /**
   * The NSID of the record collection.
   */
  collection: string;
  /**
   * The Record Key.
   */
  rkey: string;
  /**
   * Compare and swap with the previous record by CID.
   */
  swapRecord?: string | undefined;
  /**
   * Compare and swap with the previous commit by CID.
   */
  swapCommit?: string | undefined;
};

/**
 * OK
 */
export type ComAtprotoRepoDeleteRecordResponse = {
  commit?: components.ComAtprotoRepoDefsCommitMeta | undefined;
};

/** @internal */
export const ComAtprotoRepoDeleteRecordRequest$inboundSchema: z.ZodType<
  ComAtprotoRepoDeleteRecordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  collection: z.string(),
  rkey: z.string(),
  swapRecord: z.string().optional(),
  swapCommit: z.string().optional(),
});

/** @internal */
export type ComAtprotoRepoDeleteRecordRequest$Outbound = {
  repo: string;
  collection: string;
  rkey: string;
  swapRecord?: string | undefined;
  swapCommit?: string | undefined;
};

/** @internal */
export const ComAtprotoRepoDeleteRecordRequest$outboundSchema: z.ZodType<
  ComAtprotoRepoDeleteRecordRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoDeleteRecordRequest
> = z.object({
  repo: z.string(),
  collection: z.string(),
  rkey: z.string(),
  swapRecord: z.string().optional(),
  swapCommit: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDeleteRecordRequest$ {
  /** @deprecated use `ComAtprotoRepoDeleteRecordRequest$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoDeleteRecordRequest$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoDeleteRecordRequest$outboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordRequest$Outbound` instead. */
  export type Outbound = ComAtprotoRepoDeleteRecordRequest$Outbound;
}

export function comAtprotoRepoDeleteRecordRequestToJSON(
  comAtprotoRepoDeleteRecordRequest: ComAtprotoRepoDeleteRecordRequest,
): string {
  return JSON.stringify(
    ComAtprotoRepoDeleteRecordRequest$outboundSchema.parse(
      comAtprotoRepoDeleteRecordRequest,
    ),
  );
}

export function comAtprotoRepoDeleteRecordRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoDeleteRecordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoDeleteRecordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoDeleteRecordRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoRepoDeleteRecordResponse$inboundSchema: z.ZodType<
  ComAtprotoRepoDeleteRecordResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  commit: components.ComAtprotoRepoDefsCommitMeta$inboundSchema.optional(),
});

/** @internal */
export type ComAtprotoRepoDeleteRecordResponse$Outbound = {
  commit?: components.ComAtprotoRepoDefsCommitMeta$Outbound | undefined;
};

/** @internal */
export const ComAtprotoRepoDeleteRecordResponse$outboundSchema: z.ZodType<
  ComAtprotoRepoDeleteRecordResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoDeleteRecordResponse
> = z.object({
  commit: components.ComAtprotoRepoDefsCommitMeta$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoDeleteRecordResponse$ {
  /** @deprecated use `ComAtprotoRepoDeleteRecordResponse$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoDeleteRecordResponse$inboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoDeleteRecordResponse$outboundSchema;
  /** @deprecated use `ComAtprotoRepoDeleteRecordResponse$Outbound` instead. */
  export type Outbound = ComAtprotoRepoDeleteRecordResponse$Outbound;
}

export function comAtprotoRepoDeleteRecordResponseToJSON(
  comAtprotoRepoDeleteRecordResponse: ComAtprotoRepoDeleteRecordResponse,
): string {
  return JSON.stringify(
    ComAtprotoRepoDeleteRecordResponse$outboundSchema.parse(
      comAtprotoRepoDeleteRecordResponse,
    ),
  );
}

export function comAtprotoRepoDeleteRecordResponseFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoDeleteRecordResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoRepoDeleteRecordResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoDeleteRecordResponse' from JSON`,
  );
}
