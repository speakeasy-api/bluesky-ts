/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Write =
  | components.ComAtprotoRepoApplyWritesUpdate
  | components.ComAtprotoRepoApplyWritesCreate
  | components.ComAtprotoRepoApplyWritesDelete;

export type ComAtprotoRepoApplyWritesRequest = {
  /**
   * The handle or DID of the repo (aka, current account).
   */
  repo: string;
  /**
   * Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons.
   */
  validate?: boolean | undefined;
  writes: Array<
    | components.ComAtprotoRepoApplyWritesUpdate
    | components.ComAtprotoRepoApplyWritesCreate
    | components.ComAtprotoRepoApplyWritesDelete
  >;
  /**
   * If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.
   */
  swapCommit?: string | undefined;
};

export type Result =
  | components.ComAtprotoRepoApplyWritesCreateResult
  | components.ComAtprotoRepoApplyWritesUpdateResult
  | components.ComAtprotoRepoApplyWritesDeleteResult;

/**
 * OK
 */
export type ComAtprotoRepoApplyWritesResponse = {
  commit?: components.ComAtprotoRepoDefsCommitMeta | undefined;
  results?:
    | Array<
      | components.ComAtprotoRepoApplyWritesCreateResult
      | components.ComAtprotoRepoApplyWritesUpdateResult
      | components.ComAtprotoRepoApplyWritesDeleteResult
    >
    | undefined;
};

/** @internal */
export const Write$inboundSchema: z.ZodType<Write, z.ZodTypeDef, unknown> = z
  .union([
    components.ComAtprotoRepoApplyWritesUpdate$inboundSchema,
    components.ComAtprotoRepoApplyWritesCreate$inboundSchema,
    components.ComAtprotoRepoApplyWritesDelete$inboundSchema,
  ]);

/** @internal */
export type Write$Outbound =
  | components.ComAtprotoRepoApplyWritesUpdate$Outbound
  | components.ComAtprotoRepoApplyWritesCreate$Outbound
  | components.ComAtprotoRepoApplyWritesDelete$Outbound;

/** @internal */
export const Write$outboundSchema: z.ZodType<
  Write$Outbound,
  z.ZodTypeDef,
  Write
> = z.union([
  components.ComAtprotoRepoApplyWritesUpdate$outboundSchema,
  components.ComAtprotoRepoApplyWritesCreate$outboundSchema,
  components.ComAtprotoRepoApplyWritesDelete$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Write$ {
  /** @deprecated use `Write$inboundSchema` instead. */
  export const inboundSchema = Write$inboundSchema;
  /** @deprecated use `Write$outboundSchema` instead. */
  export const outboundSchema = Write$outboundSchema;
  /** @deprecated use `Write$Outbound` instead. */
  export type Outbound = Write$Outbound;
}

export function writeToJSON(write: Write): string {
  return JSON.stringify(Write$outboundSchema.parse(write));
}

export function writeFromJSON(
  jsonString: string,
): SafeParseResult<Write, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Write$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Write' from JSON`,
  );
}

/** @internal */
export const ComAtprotoRepoApplyWritesRequest$inboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  validate: z.boolean().optional(),
  writes: z.array(
    z.union([
      components.ComAtprotoRepoApplyWritesUpdate$inboundSchema,
      components.ComAtprotoRepoApplyWritesCreate$inboundSchema,
      components.ComAtprotoRepoApplyWritesDelete$inboundSchema,
    ]),
  ),
  swapCommit: z.string().optional(),
});

/** @internal */
export type ComAtprotoRepoApplyWritesRequest$Outbound = {
  repo: string;
  validate?: boolean | undefined;
  writes: Array<
    | components.ComAtprotoRepoApplyWritesUpdate$Outbound
    | components.ComAtprotoRepoApplyWritesCreate$Outbound
    | components.ComAtprotoRepoApplyWritesDelete$Outbound
  >;
  swapCommit?: string | undefined;
};

/** @internal */
export const ComAtprotoRepoApplyWritesRequest$outboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoApplyWritesRequest
> = z.object({
  repo: z.string(),
  validate: z.boolean().optional(),
  writes: z.array(
    z.union([
      components.ComAtprotoRepoApplyWritesUpdate$outboundSchema,
      components.ComAtprotoRepoApplyWritesCreate$outboundSchema,
      components.ComAtprotoRepoApplyWritesDelete$outboundSchema,
    ]),
  ),
  swapCommit: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoApplyWritesRequest$ {
  /** @deprecated use `ComAtprotoRepoApplyWritesRequest$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoApplyWritesRequest$inboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesRequest$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoApplyWritesRequest$outboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesRequest$Outbound` instead. */
  export type Outbound = ComAtprotoRepoApplyWritesRequest$Outbound;
}

export function comAtprotoRepoApplyWritesRequestToJSON(
  comAtprotoRepoApplyWritesRequest: ComAtprotoRepoApplyWritesRequest,
): string {
  return JSON.stringify(
    ComAtprotoRepoApplyWritesRequest$outboundSchema.parse(
      comAtprotoRepoApplyWritesRequest,
    ),
  );
}

export function comAtprotoRepoApplyWritesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoApplyWritesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoApplyWritesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoApplyWritesRequest' from JSON`,
  );
}

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .union([
    components.ComAtprotoRepoApplyWritesCreateResult$inboundSchema,
    components.ComAtprotoRepoApplyWritesUpdateResult$inboundSchema,
    components.ComAtprotoRepoApplyWritesDeleteResult$inboundSchema,
  ]);

/** @internal */
export type Result$Outbound =
  | components.ComAtprotoRepoApplyWritesCreateResult$Outbound
  | components.ComAtprotoRepoApplyWritesUpdateResult$Outbound
  | components.ComAtprotoRepoApplyWritesDeleteResult$Outbound;

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.union([
  components.ComAtprotoRepoApplyWritesCreateResult$outboundSchema,
  components.ComAtprotoRepoApplyWritesUpdateResult$outboundSchema,
  components.ComAtprotoRepoApplyWritesDeleteResult$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

export function resultToJSON(result: Result): string {
  return JSON.stringify(Result$outboundSchema.parse(result));
}

export function resultFromJSON(
  jsonString: string,
): SafeParseResult<Result, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Result$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Result' from JSON`,
  );
}

/** @internal */
export const ComAtprotoRepoApplyWritesResponse$inboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  commit: components.ComAtprotoRepoDefsCommitMeta$inboundSchema.optional(),
  results: z.array(
    z.union([
      components.ComAtprotoRepoApplyWritesCreateResult$inboundSchema,
      components.ComAtprotoRepoApplyWritesUpdateResult$inboundSchema,
      components.ComAtprotoRepoApplyWritesDeleteResult$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type ComAtprotoRepoApplyWritesResponse$Outbound = {
  commit?: components.ComAtprotoRepoDefsCommitMeta$Outbound | undefined;
  results?:
    | Array<
      | components.ComAtprotoRepoApplyWritesCreateResult$Outbound
      | components.ComAtprotoRepoApplyWritesUpdateResult$Outbound
      | components.ComAtprotoRepoApplyWritesDeleteResult$Outbound
    >
    | undefined;
};

/** @internal */
export const ComAtprotoRepoApplyWritesResponse$outboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoApplyWritesResponse
> = z.object({
  commit: components.ComAtprotoRepoDefsCommitMeta$outboundSchema.optional(),
  results: z.array(
    z.union([
      components.ComAtprotoRepoApplyWritesCreateResult$outboundSchema,
      components.ComAtprotoRepoApplyWritesUpdateResult$outboundSchema,
      components.ComAtprotoRepoApplyWritesDeleteResult$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoApplyWritesResponse$ {
  /** @deprecated use `ComAtprotoRepoApplyWritesResponse$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoApplyWritesResponse$inboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoApplyWritesResponse$outboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesResponse$Outbound` instead. */
  export type Outbound = ComAtprotoRepoApplyWritesResponse$Outbound;
}

export function comAtprotoRepoApplyWritesResponseToJSON(
  comAtprotoRepoApplyWritesResponse: ComAtprotoRepoApplyWritesResponse,
): string {
  return JSON.stringify(
    ComAtprotoRepoApplyWritesResponse$outboundSchema.parse(
      comAtprotoRepoApplyWritesResponse,
    ),
  );
}

export function comAtprotoRepoApplyWritesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoApplyWritesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoApplyWritesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoApplyWritesResponse' from JSON`,
  );
}
