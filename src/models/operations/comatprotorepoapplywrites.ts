/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Writes =
  | components.ComAtprotoRepoApplyWritesDelete
  | components.ComAtprotoRepoApplyWritesCreate
  | components.ComAtprotoRepoApplyWritesUpdate;

export type ComAtprotoRepoApplyWritesRequestBody = {
  /**
   * The handle or DID of the repo (aka, current account).
   */
  repo: string;
  /**
   * Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons.
   */
  validate?: boolean | undefined;
  writes: Array<
    | components.ComAtprotoRepoApplyWritesDelete
    | components.ComAtprotoRepoApplyWritesCreate
    | components.ComAtprotoRepoApplyWritesUpdate
  >;
  /**
   * If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.
   */
  swapCommit?: string | undefined;
};

export type Results =
  | components.ComAtprotoRepoApplyWritesDeleteResult
  | components.ComAtprotoRepoApplyWritesCreateResult
  | components.ComAtprotoRepoApplyWritesUpdateResult;

/**
 * OK
 */
export type ComAtprotoRepoApplyWritesResponseBody = {
  commit?: components.ComAtprotoRepoDefsCommitMeta | undefined;
  results?:
    | Array<
      | components.ComAtprotoRepoApplyWritesDeleteResult
      | components.ComAtprotoRepoApplyWritesCreateResult
      | components.ComAtprotoRepoApplyWritesUpdateResult
    >
    | undefined;
};

/** @internal */
export const Writes$inboundSchema: z.ZodType<Writes, z.ZodTypeDef, unknown> = z
  .union([
    components.ComAtprotoRepoApplyWritesDelete$inboundSchema,
    components.ComAtprotoRepoApplyWritesCreate$inboundSchema,
    components.ComAtprotoRepoApplyWritesUpdate$inboundSchema,
  ]);

/** @internal */
export type Writes$Outbound =
  | components.ComAtprotoRepoApplyWritesDelete$Outbound
  | components.ComAtprotoRepoApplyWritesCreate$Outbound
  | components.ComAtprotoRepoApplyWritesUpdate$Outbound;

/** @internal */
export const Writes$outboundSchema: z.ZodType<
  Writes$Outbound,
  z.ZodTypeDef,
  Writes
> = z.union([
  components.ComAtprotoRepoApplyWritesDelete$outboundSchema,
  components.ComAtprotoRepoApplyWritesCreate$outboundSchema,
  components.ComAtprotoRepoApplyWritesUpdate$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Writes$ {
  /** @deprecated use `Writes$inboundSchema` instead. */
  export const inboundSchema = Writes$inboundSchema;
  /** @deprecated use `Writes$outboundSchema` instead. */
  export const outboundSchema = Writes$outboundSchema;
  /** @deprecated use `Writes$Outbound` instead. */
  export type Outbound = Writes$Outbound;
}

export function writesToJSON(writes: Writes): string {
  return JSON.stringify(Writes$outboundSchema.parse(writes));
}

export function writesFromJSON(
  jsonString: string,
): SafeParseResult<Writes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Writes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Writes' from JSON`,
  );
}

/** @internal */
export const ComAtprotoRepoApplyWritesRequestBody$inboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  validate: z.boolean().optional(),
  writes: z.array(
    z.union([
      components.ComAtprotoRepoApplyWritesDelete$inboundSchema,
      components.ComAtprotoRepoApplyWritesCreate$inboundSchema,
      components.ComAtprotoRepoApplyWritesUpdate$inboundSchema,
    ]),
  ),
  swapCommit: z.string().optional(),
});

/** @internal */
export type ComAtprotoRepoApplyWritesRequestBody$Outbound = {
  repo: string;
  validate?: boolean | undefined;
  writes: Array<
    | components.ComAtprotoRepoApplyWritesDelete$Outbound
    | components.ComAtprotoRepoApplyWritesCreate$Outbound
    | components.ComAtprotoRepoApplyWritesUpdate$Outbound
  >;
  swapCommit?: string | undefined;
};

/** @internal */
export const ComAtprotoRepoApplyWritesRequestBody$outboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesRequestBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoApplyWritesRequestBody
> = z.object({
  repo: z.string(),
  validate: z.boolean().optional(),
  writes: z.array(
    z.union([
      components.ComAtprotoRepoApplyWritesDelete$outboundSchema,
      components.ComAtprotoRepoApplyWritesCreate$outboundSchema,
      components.ComAtprotoRepoApplyWritesUpdate$outboundSchema,
    ]),
  ),
  swapCommit: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoApplyWritesRequestBody$ {
  /** @deprecated use `ComAtprotoRepoApplyWritesRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoApplyWritesRequestBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoApplyWritesRequestBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesRequestBody$Outbound` instead. */
  export type Outbound = ComAtprotoRepoApplyWritesRequestBody$Outbound;
}

export function comAtprotoRepoApplyWritesRequestBodyToJSON(
  comAtprotoRepoApplyWritesRequestBody: ComAtprotoRepoApplyWritesRequestBody,
): string {
  return JSON.stringify(
    ComAtprotoRepoApplyWritesRequestBody$outboundSchema.parse(
      comAtprotoRepoApplyWritesRequestBody,
    ),
  );
}

export function comAtprotoRepoApplyWritesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoApplyWritesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoRepoApplyWritesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoApplyWritesRequestBody' from JSON`,
  );
}

/** @internal */
export const Results$inboundSchema: z.ZodType<Results, z.ZodTypeDef, unknown> =
  z.union([
    components.ComAtprotoRepoApplyWritesDeleteResult$inboundSchema,
    components.ComAtprotoRepoApplyWritesCreateResult$inboundSchema,
    components.ComAtprotoRepoApplyWritesUpdateResult$inboundSchema,
  ]);

/** @internal */
export type Results$Outbound =
  | components.ComAtprotoRepoApplyWritesDeleteResult$Outbound
  | components.ComAtprotoRepoApplyWritesCreateResult$Outbound
  | components.ComAtprotoRepoApplyWritesUpdateResult$Outbound;

/** @internal */
export const Results$outboundSchema: z.ZodType<
  Results$Outbound,
  z.ZodTypeDef,
  Results
> = z.union([
  components.ComAtprotoRepoApplyWritesDeleteResult$outboundSchema,
  components.ComAtprotoRepoApplyWritesCreateResult$outboundSchema,
  components.ComAtprotoRepoApplyWritesUpdateResult$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Results$ {
  /** @deprecated use `Results$inboundSchema` instead. */
  export const inboundSchema = Results$inboundSchema;
  /** @deprecated use `Results$outboundSchema` instead. */
  export const outboundSchema = Results$outboundSchema;
  /** @deprecated use `Results$Outbound` instead. */
  export type Outbound = Results$Outbound;
}

export function resultsToJSON(results: Results): string {
  return JSON.stringify(Results$outboundSchema.parse(results));
}

export function resultsFromJSON(
  jsonString: string,
): SafeParseResult<Results, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Results$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Results' from JSON`,
  );
}

/** @internal */
export const ComAtprotoRepoApplyWritesResponseBody$inboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  commit: components.ComAtprotoRepoDefsCommitMeta$inboundSchema.optional(),
  results: z.array(
    z.union([
      components.ComAtprotoRepoApplyWritesDeleteResult$inboundSchema,
      components.ComAtprotoRepoApplyWritesCreateResult$inboundSchema,
      components.ComAtprotoRepoApplyWritesUpdateResult$inboundSchema,
    ]),
  ).optional(),
});

/** @internal */
export type ComAtprotoRepoApplyWritesResponseBody$Outbound = {
  commit?: components.ComAtprotoRepoDefsCommitMeta$Outbound | undefined;
  results?:
    | Array<
      | components.ComAtprotoRepoApplyWritesDeleteResult$Outbound
      | components.ComAtprotoRepoApplyWritesCreateResult$Outbound
      | components.ComAtprotoRepoApplyWritesUpdateResult$Outbound
    >
    | undefined;
};

/** @internal */
export const ComAtprotoRepoApplyWritesResponseBody$outboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesResponseBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoApplyWritesResponseBody
> = z.object({
  commit: components.ComAtprotoRepoDefsCommitMeta$outboundSchema.optional(),
  results: z.array(
    z.union([
      components.ComAtprotoRepoApplyWritesDeleteResult$outboundSchema,
      components.ComAtprotoRepoApplyWritesCreateResult$outboundSchema,
      components.ComAtprotoRepoApplyWritesUpdateResult$outboundSchema,
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoApplyWritesResponseBody$ {
  /** @deprecated use `ComAtprotoRepoApplyWritesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoApplyWritesResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoApplyWritesResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoRepoApplyWritesResponseBody$Outbound;
}

export function comAtprotoRepoApplyWritesResponseBodyToJSON(
  comAtprotoRepoApplyWritesResponseBody: ComAtprotoRepoApplyWritesResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoRepoApplyWritesResponseBody$outboundSchema.parse(
      comAtprotoRepoApplyWritesResponseBody,
    ),
  );
}

export function comAtprotoRepoApplyWritesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoApplyWritesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoRepoApplyWritesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoApplyWritesResponseBody' from JSON`,
  );
}
