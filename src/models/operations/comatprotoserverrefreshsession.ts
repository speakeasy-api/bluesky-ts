/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Hosting status of the account. If not specified, then assume 'active'.
 */
export const ComAtprotoServerRefreshSessionStatus = {
  Takendown: "takendown",
  Suspended: "suspended",
  Deactivated: "deactivated",
} as const;
/**
 * Hosting status of the account. If not specified, then assume 'active'.
 */
export type ComAtprotoServerRefreshSessionStatus = ClosedEnum<
  typeof ComAtprotoServerRefreshSessionStatus
>;

/**
 * OK
 */
export type ComAtprotoServerRefreshSessionResponse = {
  accessJwt: string;
  refreshJwt: string;
  handle: string;
  did: string;
  didDoc?: any | undefined;
  active?: boolean | undefined;
  /**
   * Hosting status of the account. If not specified, then assume 'active'.
   */
  status?: ComAtprotoServerRefreshSessionStatus | undefined;
};

/** @internal */
export const ComAtprotoServerRefreshSessionStatus$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerRefreshSessionStatus> = z.nativeEnum(
    ComAtprotoServerRefreshSessionStatus,
  );

/** @internal */
export const ComAtprotoServerRefreshSessionStatus$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerRefreshSessionStatus> =
    ComAtprotoServerRefreshSessionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerRefreshSessionStatus$ {
  /** @deprecated use `ComAtprotoServerRefreshSessionStatus$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerRefreshSessionStatus$inboundSchema;
  /** @deprecated use `ComAtprotoServerRefreshSessionStatus$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerRefreshSessionStatus$outboundSchema;
}

/** @internal */
export const ComAtprotoServerRefreshSessionResponse$inboundSchema: z.ZodType<
  ComAtprotoServerRefreshSessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessJwt: z.string(),
  refreshJwt: z.string(),
  handle: z.string(),
  did: z.string(),
  didDoc: z.any().optional(),
  active: z.boolean().optional(),
  status: ComAtprotoServerRefreshSessionStatus$inboundSchema.optional(),
});

/** @internal */
export type ComAtprotoServerRefreshSessionResponse$Outbound = {
  accessJwt: string;
  refreshJwt: string;
  handle: string;
  did: string;
  didDoc?: any | undefined;
  active?: boolean | undefined;
  status?: string | undefined;
};

/** @internal */
export const ComAtprotoServerRefreshSessionResponse$outboundSchema: z.ZodType<
  ComAtprotoServerRefreshSessionResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerRefreshSessionResponse
> = z.object({
  accessJwt: z.string(),
  refreshJwt: z.string(),
  handle: z.string(),
  did: z.string(),
  didDoc: z.any().optional(),
  active: z.boolean().optional(),
  status: ComAtprotoServerRefreshSessionStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerRefreshSessionResponse$ {
  /** @deprecated use `ComAtprotoServerRefreshSessionResponse$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerRefreshSessionResponse$inboundSchema;
  /** @deprecated use `ComAtprotoServerRefreshSessionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerRefreshSessionResponse$outboundSchema;
  /** @deprecated use `ComAtprotoServerRefreshSessionResponse$Outbound` instead. */
  export type Outbound = ComAtprotoServerRefreshSessionResponse$Outbound;
}

export function comAtprotoServerRefreshSessionResponseToJSON(
  comAtprotoServerRefreshSessionResponse:
    ComAtprotoServerRefreshSessionResponse,
): string {
  return JSON.stringify(
    ComAtprotoServerRefreshSessionResponse$outboundSchema.parse(
      comAtprotoServerRefreshSessionResponse,
    ),
  );
}

export function comAtprotoServerRefreshSessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoServerRefreshSessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerRefreshSessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoServerRefreshSessionResponse' from JSON`,
  );
}
