/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoIdentityResolveHandleRequest = {
  /**
   * The handle to resolve.
   */
  handle: string;
};

/**
 * OK
 */
export type ComAtprotoIdentityResolveHandleResponseBody = {
  did: string;
};

/** @internal */
export const ComAtprotoIdentityResolveHandleRequest$inboundSchema: z.ZodType<
  ComAtprotoIdentityResolveHandleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  handle: z.string(),
});

/** @internal */
export type ComAtprotoIdentityResolveHandleRequest$Outbound = {
  handle: string;
};

/** @internal */
export const ComAtprotoIdentityResolveHandleRequest$outboundSchema: z.ZodType<
  ComAtprotoIdentityResolveHandleRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoIdentityResolveHandleRequest
> = z.object({
  handle: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityResolveHandleRequest$ {
  /** @deprecated use `ComAtprotoIdentityResolveHandleRequest$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityResolveHandleRequest$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityResolveHandleRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityResolveHandleRequest$outboundSchema;
  /** @deprecated use `ComAtprotoIdentityResolveHandleRequest$Outbound` instead. */
  export type Outbound = ComAtprotoIdentityResolveHandleRequest$Outbound;
}

export function comAtprotoIdentityResolveHandleRequestToJSON(
  comAtprotoIdentityResolveHandleRequest:
    ComAtprotoIdentityResolveHandleRequest,
): string {
  return JSON.stringify(
    ComAtprotoIdentityResolveHandleRequest$outboundSchema.parse(
      comAtprotoIdentityResolveHandleRequest,
    ),
  );
}

export function comAtprotoIdentityResolveHandleRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoIdentityResolveHandleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoIdentityResolveHandleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoIdentityResolveHandleRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoIdentityResolveHandleResponseBody$inboundSchema:
  z.ZodType<
    ComAtprotoIdentityResolveHandleResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    did: z.string(),
  });

/** @internal */
export type ComAtprotoIdentityResolveHandleResponseBody$Outbound = {
  did: string;
};

/** @internal */
export const ComAtprotoIdentityResolveHandleResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoIdentityResolveHandleResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentityResolveHandleResponseBody
  > = z.object({
    did: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentityResolveHandleResponseBody$ {
  /** @deprecated use `ComAtprotoIdentityResolveHandleResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentityResolveHandleResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoIdentityResolveHandleResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentityResolveHandleResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoIdentityResolveHandleResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoIdentityResolveHandleResponseBody$Outbound;
}

export function comAtprotoIdentityResolveHandleResponseBodyToJSON(
  comAtprotoIdentityResolveHandleResponseBody:
    ComAtprotoIdentityResolveHandleResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoIdentityResolveHandleResponseBody$outboundSchema.parse(
      comAtprotoIdentityResolveHandleResponseBody,
    ),
  );
}

export function comAtprotoIdentityResolveHandleResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoIdentityResolveHandleResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoIdentityResolveHandleResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoIdentityResolveHandleResponseBody' from JSON`,
  );
}
