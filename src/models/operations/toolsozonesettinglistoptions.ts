/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const QueryParamScope = {
  Instance: "instance",
  Personal: "personal",
} as const;
export type QueryParamScope = ClosedEnum<typeof QueryParamScope>;

export type ToolsOzoneSettingListOptionsRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  scope?: QueryParamScope | undefined;
  /**
   * Filter keys by prefix
   */
  prefix?: string | undefined;
  /**
   * Filter for only the specified keys. Ignored if prefix is provided
   */
  keys?: Array<string> | undefined;
};

/**
 * OK
 */
export type ToolsOzoneSettingListOptionsResponseBody = {
  cursor?: string | undefined;
  options: Array<components.ToolsOzoneSettingDefsOption>;
};

/** @internal */
export const QueryParamScope$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamScope
> = z.nativeEnum(QueryParamScope);

/** @internal */
export const QueryParamScope$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamScope
> = QueryParamScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamScope$ {
  /** @deprecated use `QueryParamScope$inboundSchema` instead. */
  export const inboundSchema = QueryParamScope$inboundSchema;
  /** @deprecated use `QueryParamScope$outboundSchema` instead. */
  export const outboundSchema = QueryParamScope$outboundSchema;
}

/** @internal */
export const ToolsOzoneSettingListOptionsRequest$inboundSchema: z.ZodType<
  ToolsOzoneSettingListOptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().default(50),
  cursor: z.string().optional(),
  scope: QueryParamScope$inboundSchema.default("instance"),
  prefix: z.string().optional(),
  keys: z.array(z.string()).optional(),
});

/** @internal */
export type ToolsOzoneSettingListOptionsRequest$Outbound = {
  limit: number;
  cursor?: string | undefined;
  scope: string;
  prefix?: string | undefined;
  keys?: Array<string> | undefined;
};

/** @internal */
export const ToolsOzoneSettingListOptionsRequest$outboundSchema: z.ZodType<
  ToolsOzoneSettingListOptionsRequest$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSettingListOptionsRequest
> = z.object({
  limit: z.number().int().default(50),
  cursor: z.string().optional(),
  scope: QueryParamScope$outboundSchema.default("instance"),
  prefix: z.string().optional(),
  keys: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingListOptionsRequest$ {
  /** @deprecated use `ToolsOzoneSettingListOptionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSettingListOptionsRequest$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingListOptionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingListOptionsRequest$outboundSchema;
  /** @deprecated use `ToolsOzoneSettingListOptionsRequest$Outbound` instead. */
  export type Outbound = ToolsOzoneSettingListOptionsRequest$Outbound;
}

export function toolsOzoneSettingListOptionsRequestToJSON(
  toolsOzoneSettingListOptionsRequest: ToolsOzoneSettingListOptionsRequest,
): string {
  return JSON.stringify(
    ToolsOzoneSettingListOptionsRequest$outboundSchema.parse(
      toolsOzoneSettingListOptionsRequest,
    ),
  );
}

export function toolsOzoneSettingListOptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneSettingListOptionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneSettingListOptionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneSettingListOptionsRequest' from JSON`,
  );
}

/** @internal */
export const ToolsOzoneSettingListOptionsResponseBody$inboundSchema: z.ZodType<
  ToolsOzoneSettingListOptionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  options: z.array(components.ToolsOzoneSettingDefsOption$inboundSchema),
});

/** @internal */
export type ToolsOzoneSettingListOptionsResponseBody$Outbound = {
  cursor?: string | undefined;
  options: Array<components.ToolsOzoneSettingDefsOption$Outbound>;
};

/** @internal */
export const ToolsOzoneSettingListOptionsResponseBody$outboundSchema: z.ZodType<
  ToolsOzoneSettingListOptionsResponseBody$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSettingListOptionsResponseBody
> = z.object({
  cursor: z.string().optional(),
  options: z.array(components.ToolsOzoneSettingDefsOption$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingListOptionsResponseBody$ {
  /** @deprecated use `ToolsOzoneSettingListOptionsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSettingListOptionsResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingListOptionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingListOptionsResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneSettingListOptionsResponseBody$Outbound` instead. */
  export type Outbound = ToolsOzoneSettingListOptionsResponseBody$Outbound;
}

export function toolsOzoneSettingListOptionsResponseBodyToJSON(
  toolsOzoneSettingListOptionsResponseBody:
    ToolsOzoneSettingListOptionsResponseBody,
): string {
  return JSON.stringify(
    ToolsOzoneSettingListOptionsResponseBody$outboundSchema.parse(
      toolsOzoneSettingListOptionsResponseBody,
    ),
  );
}

export function toolsOzoneSettingListOptionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ToolsOzoneSettingListOptionsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneSettingListOptionsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ToolsOzoneSettingListOptionsResponseBody' from JSON`,
  );
}
