/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChatBskyConvoGetLogRequest = {
  cursor?: string | undefined;
};

export type Log =
  | components.ChatBskyConvoDefsLogCreateMessage
  | components.ChatBskyConvoDefsLogDeleteMessage
  | components.ChatBskyConvoDefsLogBeginConvo
  | components.ChatBskyConvoDefsLogLeaveConvo;

/**
 * OK
 */
export type ChatBskyConvoGetLogResponseBody = {
  cursor?: string | undefined;
  logs: Array<
    | components.ChatBskyConvoDefsLogCreateMessage
    | components.ChatBskyConvoDefsLogDeleteMessage
    | components.ChatBskyConvoDefsLogBeginConvo
    | components.ChatBskyConvoDefsLogLeaveConvo
  >;
};

export type ChatBskyConvoGetLogResponse = {
  result: ChatBskyConvoGetLogResponseBody;
};

/** @internal */
export const ChatBskyConvoGetLogRequest$inboundSchema: z.ZodType<
  ChatBskyConvoGetLogRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
});

/** @internal */
export type ChatBskyConvoGetLogRequest$Outbound = {
  cursor?: string | undefined;
};

/** @internal */
export const ChatBskyConvoGetLogRequest$outboundSchema: z.ZodType<
  ChatBskyConvoGetLogRequest$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoGetLogRequest
> = z.object({
  cursor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetLogRequest$ {
  /** @deprecated use `ChatBskyConvoGetLogRequest$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoGetLogRequest$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogRequest$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoGetLogRequest$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogRequest$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetLogRequest$Outbound;
}

export function chatBskyConvoGetLogRequestToJSON(
  chatBskyConvoGetLogRequest: ChatBskyConvoGetLogRequest,
): string {
  return JSON.stringify(
    ChatBskyConvoGetLogRequest$outboundSchema.parse(chatBskyConvoGetLogRequest),
  );
}

export function chatBskyConvoGetLogRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoGetLogRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoGetLogRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoGetLogRequest' from JSON`,
  );
}

/** @internal */
export const Log$inboundSchema: z.ZodType<Log, z.ZodTypeDef, unknown> = z.union(
  [
    components.ChatBskyConvoDefsLogCreateMessage$inboundSchema,
    components.ChatBskyConvoDefsLogDeleteMessage$inboundSchema,
    components.ChatBskyConvoDefsLogBeginConvo$inboundSchema,
    components.ChatBskyConvoDefsLogLeaveConvo$inboundSchema,
  ],
);

/** @internal */
export type Log$Outbound =
  | components.ChatBskyConvoDefsLogCreateMessage$Outbound
  | components.ChatBskyConvoDefsLogDeleteMessage$Outbound
  | components.ChatBskyConvoDefsLogBeginConvo$Outbound
  | components.ChatBskyConvoDefsLogLeaveConvo$Outbound;

/** @internal */
export const Log$outboundSchema: z.ZodType<Log$Outbound, z.ZodTypeDef, Log> = z
  .union([
    components.ChatBskyConvoDefsLogCreateMessage$outboundSchema,
    components.ChatBskyConvoDefsLogDeleteMessage$outboundSchema,
    components.ChatBskyConvoDefsLogBeginConvo$outboundSchema,
    components.ChatBskyConvoDefsLogLeaveConvo$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Log$ {
  /** @deprecated use `Log$inboundSchema` instead. */
  export const inboundSchema = Log$inboundSchema;
  /** @deprecated use `Log$outboundSchema` instead. */
  export const outboundSchema = Log$outboundSchema;
  /** @deprecated use `Log$Outbound` instead. */
  export type Outbound = Log$Outbound;
}

export function logToJSON(log: Log): string {
  return JSON.stringify(Log$outboundSchema.parse(log));
}

export function logFromJSON(
  jsonString: string,
): SafeParseResult<Log, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Log$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Log' from JSON`,
  );
}

/** @internal */
export const ChatBskyConvoGetLogResponseBody$inboundSchema: z.ZodType<
  ChatBskyConvoGetLogResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  logs: z.array(
    z.union([
      components.ChatBskyConvoDefsLogCreateMessage$inboundSchema,
      components.ChatBskyConvoDefsLogDeleteMessage$inboundSchema,
      components.ChatBskyConvoDefsLogBeginConvo$inboundSchema,
      components.ChatBskyConvoDefsLogLeaveConvo$inboundSchema,
    ]),
  ),
});

/** @internal */
export type ChatBskyConvoGetLogResponseBody$Outbound = {
  cursor?: string | undefined;
  logs: Array<
    | components.ChatBskyConvoDefsLogCreateMessage$Outbound
    | components.ChatBskyConvoDefsLogDeleteMessage$Outbound
    | components.ChatBskyConvoDefsLogBeginConvo$Outbound
    | components.ChatBskyConvoDefsLogLeaveConvo$Outbound
  >;
};

/** @internal */
export const ChatBskyConvoGetLogResponseBody$outboundSchema: z.ZodType<
  ChatBskyConvoGetLogResponseBody$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoGetLogResponseBody
> = z.object({
  cursor: z.string().optional(),
  logs: z.array(
    z.union([
      components.ChatBskyConvoDefsLogCreateMessage$outboundSchema,
      components.ChatBskyConvoDefsLogDeleteMessage$outboundSchema,
      components.ChatBskyConvoDefsLogBeginConvo$outboundSchema,
      components.ChatBskyConvoDefsLogLeaveConvo$outboundSchema,
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetLogResponseBody$ {
  /** @deprecated use `ChatBskyConvoGetLogResponseBody$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoGetLogResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogResponseBody$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoGetLogResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetLogResponseBody$Outbound;
}

export function chatBskyConvoGetLogResponseBodyToJSON(
  chatBskyConvoGetLogResponseBody: ChatBskyConvoGetLogResponseBody,
): string {
  return JSON.stringify(
    ChatBskyConvoGetLogResponseBody$outboundSchema.parse(
      chatBskyConvoGetLogResponseBody,
    ),
  );
}

export function chatBskyConvoGetLogResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoGetLogResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoGetLogResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoGetLogResponseBody' from JSON`,
  );
}

/** @internal */
export const ChatBskyConvoGetLogResponse$inboundSchema: z.ZodType<
  ChatBskyConvoGetLogResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ChatBskyConvoGetLogResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ChatBskyConvoGetLogResponse$Outbound = {
  Result: ChatBskyConvoGetLogResponseBody$Outbound;
};

/** @internal */
export const ChatBskyConvoGetLogResponse$outboundSchema: z.ZodType<
  ChatBskyConvoGetLogResponse$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoGetLogResponse
> = z.object({
  result: z.lazy(() => ChatBskyConvoGetLogResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoGetLogResponse$ {
  /** @deprecated use `ChatBskyConvoGetLogResponse$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoGetLogResponse$inboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogResponse$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoGetLogResponse$outboundSchema;
  /** @deprecated use `ChatBskyConvoGetLogResponse$Outbound` instead. */
  export type Outbound = ChatBskyConvoGetLogResponse$Outbound;
}

export function chatBskyConvoGetLogResponseToJSON(
  chatBskyConvoGetLogResponse: ChatBskyConvoGetLogResponse,
): string {
  return JSON.stringify(
    ChatBskyConvoGetLogResponse$outboundSchema.parse(
      chatBskyConvoGetLogResponse,
    ),
  );
}

export function chatBskyConvoGetLogResponseFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoGetLogResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoGetLogResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoGetLogResponse' from JSON`,
  );
}
