/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
 */
export const ComAtprotoServerGetSessionStatus = {
  Takendown: "takendown",
  Suspended: "suspended",
  Deactivated: "deactivated",
} as const;
/**
 * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
 */
export type ComAtprotoServerGetSessionStatus = ClosedEnum<
  typeof ComAtprotoServerGetSessionStatus
>;

/**
 * OK
 */
export type ComAtprotoServerGetSessionResponse = {
  handle: string;
  did: string;
  email?: string | undefined;
  emailConfirmed?: boolean | undefined;
  emailAuthFactor?: boolean | undefined;
  didDoc?: any | undefined;
  active?: boolean | undefined;
  /**
   * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
   */
  status?: ComAtprotoServerGetSessionStatus | undefined;
};

/** @internal */
export const ComAtprotoServerGetSessionStatus$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerGetSessionStatus
> = z.nativeEnum(ComAtprotoServerGetSessionStatus);

/** @internal */
export const ComAtprotoServerGetSessionStatus$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerGetSessionStatus
> = ComAtprotoServerGetSessionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerGetSessionStatus$ {
  /** @deprecated use `ComAtprotoServerGetSessionStatus$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoServerGetSessionStatus$inboundSchema;
  /** @deprecated use `ComAtprotoServerGetSessionStatus$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoServerGetSessionStatus$outboundSchema;
}

/** @internal */
export const ComAtprotoServerGetSessionResponse$inboundSchema: z.ZodType<
  ComAtprotoServerGetSessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  handle: z.string(),
  did: z.string(),
  email: z.string().optional(),
  emailConfirmed: z.boolean().optional(),
  emailAuthFactor: z.boolean().optional(),
  didDoc: z.any().optional(),
  active: z.boolean().optional(),
  status: ComAtprotoServerGetSessionStatus$inboundSchema.optional(),
});

/** @internal */
export type ComAtprotoServerGetSessionResponse$Outbound = {
  handle: string;
  did: string;
  email?: string | undefined;
  emailConfirmed?: boolean | undefined;
  emailAuthFactor?: boolean | undefined;
  didDoc?: any | undefined;
  active?: boolean | undefined;
  status?: string | undefined;
};

/** @internal */
export const ComAtprotoServerGetSessionResponse$outboundSchema: z.ZodType<
  ComAtprotoServerGetSessionResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerGetSessionResponse
> = z.object({
  handle: z.string(),
  did: z.string(),
  email: z.string().optional(),
  emailConfirmed: z.boolean().optional(),
  emailAuthFactor: z.boolean().optional(),
  didDoc: z.any().optional(),
  active: z.boolean().optional(),
  status: ComAtprotoServerGetSessionStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerGetSessionResponse$ {
  /** @deprecated use `ComAtprotoServerGetSessionResponse$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoServerGetSessionResponse$inboundSchema;
  /** @deprecated use `ComAtprotoServerGetSessionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerGetSessionResponse$outboundSchema;
  /** @deprecated use `ComAtprotoServerGetSessionResponse$Outbound` instead. */
  export type Outbound = ComAtprotoServerGetSessionResponse$Outbound;
}

export function comAtprotoServerGetSessionResponseToJSON(
  comAtprotoServerGetSessionResponse: ComAtprotoServerGetSessionResponse,
): string {
  return JSON.stringify(
    ComAtprotoServerGetSessionResponse$outboundSchema.parse(
      comAtprotoServerGetSessionResponse,
    ),
  );
}

export function comAtprotoServerGetSessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoServerGetSessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerGetSessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoServerGetSessionResponse' from JSON`,
  );
}
