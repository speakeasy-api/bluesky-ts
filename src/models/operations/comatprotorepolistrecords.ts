/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoRepoListRecordsRequest = {
  /**
   * The handle or DID of the repo.
   */
  repo: string;
  /**
   * The NSID of the record type.
   */
  collection: string;
  /**
   * The number of records to return.
   */
  limit?: number | undefined;
  cursor?: string | undefined;
  /**
   * Flag to reverse the order of the returned records.
   */
  reverse?: boolean | undefined;
};

/**
 * OK
 */
export type ComAtprotoRepoListRecordsResponseBody = {
  cursor?: string | undefined;
  records: Array<components.ComAtprotoRepoListRecordsRecord>;
};

/** @internal */
export const ComAtprotoRepoListRecordsRequest$inboundSchema: z.ZodType<
  ComAtprotoRepoListRecordsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  collection: z.string(),
  limit: z.number().int().default(50),
  cursor: z.string().optional(),
  reverse: z.boolean().optional(),
});

/** @internal */
export type ComAtprotoRepoListRecordsRequest$Outbound = {
  repo: string;
  collection: string;
  limit: number;
  cursor?: string | undefined;
  reverse?: boolean | undefined;
};

/** @internal */
export const ComAtprotoRepoListRecordsRequest$outboundSchema: z.ZodType<
  ComAtprotoRepoListRecordsRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoListRecordsRequest
> = z.object({
  repo: z.string(),
  collection: z.string(),
  limit: z.number().int().default(50),
  cursor: z.string().optional(),
  reverse: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoListRecordsRequest$ {
  /** @deprecated use `ComAtprotoRepoListRecordsRequest$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoListRecordsRequest$inboundSchema;
  /** @deprecated use `ComAtprotoRepoListRecordsRequest$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoListRecordsRequest$outboundSchema;
  /** @deprecated use `ComAtprotoRepoListRecordsRequest$Outbound` instead. */
  export type Outbound = ComAtprotoRepoListRecordsRequest$Outbound;
}

export function comAtprotoRepoListRecordsRequestToJSON(
  comAtprotoRepoListRecordsRequest: ComAtprotoRepoListRecordsRequest,
): string {
  return JSON.stringify(
    ComAtprotoRepoListRecordsRequest$outboundSchema.parse(
      comAtprotoRepoListRecordsRequest,
    ),
  );
}

export function comAtprotoRepoListRecordsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoListRecordsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoListRecordsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoListRecordsRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoRepoListRecordsResponseBody$inboundSchema: z.ZodType<
  ComAtprotoRepoListRecordsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  records: z.array(components.ComAtprotoRepoListRecordsRecord$inboundSchema),
});

/** @internal */
export type ComAtprotoRepoListRecordsResponseBody$Outbound = {
  cursor?: string | undefined;
  records: Array<components.ComAtprotoRepoListRecordsRecord$Outbound>;
};

/** @internal */
export const ComAtprotoRepoListRecordsResponseBody$outboundSchema: z.ZodType<
  ComAtprotoRepoListRecordsResponseBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoListRecordsResponseBody
> = z.object({
  cursor: z.string().optional(),
  records: z.array(components.ComAtprotoRepoListRecordsRecord$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoListRecordsResponseBody$ {
  /** @deprecated use `ComAtprotoRepoListRecordsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoListRecordsResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoListRecordsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoListRecordsResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoListRecordsResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoRepoListRecordsResponseBody$Outbound;
}

export function comAtprotoRepoListRecordsResponseBodyToJSON(
  comAtprotoRepoListRecordsResponseBody: ComAtprotoRepoListRecordsResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoRepoListRecordsResponseBody$outboundSchema.parse(
      comAtprotoRepoListRecordsResponseBody,
    ),
  );
}

export function comAtprotoRepoListRecordsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoListRecordsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoRepoListRecordsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoListRecordsResponseBody' from JSON`,
  );
}
