/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ToolsOzoneSettingUpsertOptionScope = {
  Instance: "instance",
  Personal: "personal",
} as const;
export type ToolsOzoneSettingUpsertOptionScope = ClosedEnum<
  typeof ToolsOzoneSettingUpsertOptionScope
>;

export const ManagerRole = {
  ToolsOzoneTeamDefsNumberRoleModerator: "tools.ozone.team.defs#roleModerator",
  ToolsOzoneTeamDefsNumberRoleTriage: "tools.ozone.team.defs#roleTriage",
  ToolsOzoneTeamDefsNumberRoleAdmin: "tools.ozone.team.defs#roleAdmin",
} as const;
export type ManagerRole = ClosedEnum<typeof ManagerRole>;

export type ToolsOzoneSettingUpsertOptionRequest = {
  key: string;
  scope: ToolsOzoneSettingUpsertOptionScope;
  value?: any | undefined;
  description?: string | undefined;
  managerRole?: ManagerRole | undefined;
};

/**
 * OK
 */
export type ToolsOzoneSettingUpsertOptionResponse = {
  option: components.ToolsOzoneSettingDefsOption;
};

/** @internal */
export const ToolsOzoneSettingUpsertOptionScope$inboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSettingUpsertOptionScope
> = z.nativeEnum(ToolsOzoneSettingUpsertOptionScope);

/** @internal */
export const ToolsOzoneSettingUpsertOptionScope$outboundSchema: z.ZodNativeEnum<
  typeof ToolsOzoneSettingUpsertOptionScope
> = ToolsOzoneSettingUpsertOptionScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingUpsertOptionScope$ {
  /** @deprecated use `ToolsOzoneSettingUpsertOptionScope$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSettingUpsertOptionScope$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingUpsertOptionScope$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingUpsertOptionScope$outboundSchema;
}

/** @internal */
export const ManagerRole$inboundSchema: z.ZodNativeEnum<typeof ManagerRole> = z
  .nativeEnum(ManagerRole);

/** @internal */
export const ManagerRole$outboundSchema: z.ZodNativeEnum<typeof ManagerRole> =
  ManagerRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ManagerRole$ {
  /** @deprecated use `ManagerRole$inboundSchema` instead. */
  export const inboundSchema = ManagerRole$inboundSchema;
  /** @deprecated use `ManagerRole$outboundSchema` instead. */
  export const outboundSchema = ManagerRole$outboundSchema;
}

/** @internal */
export const ToolsOzoneSettingUpsertOptionRequest$inboundSchema: z.ZodType<
  ToolsOzoneSettingUpsertOptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  scope: ToolsOzoneSettingUpsertOptionScope$inboundSchema,
  value: z.any().optional(),
  description: z.string().optional(),
  managerRole: ManagerRole$inboundSchema.optional(),
});

/** @internal */
export type ToolsOzoneSettingUpsertOptionRequest$Outbound = {
  key: string;
  scope: string;
  value?: any | undefined;
  description?: string | undefined;
  managerRole?: string | undefined;
};

/** @internal */
export const ToolsOzoneSettingUpsertOptionRequest$outboundSchema: z.ZodType<
  ToolsOzoneSettingUpsertOptionRequest$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSettingUpsertOptionRequest
> = z.object({
  key: z.string(),
  scope: ToolsOzoneSettingUpsertOptionScope$outboundSchema,
  value: z.any().optional(),
  description: z.string().optional(),
  managerRole: ManagerRole$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingUpsertOptionRequest$ {
  /** @deprecated use `ToolsOzoneSettingUpsertOptionRequest$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSettingUpsertOptionRequest$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingUpsertOptionRequest$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingUpsertOptionRequest$outboundSchema;
  /** @deprecated use `ToolsOzoneSettingUpsertOptionRequest$Outbound` instead. */
  export type Outbound = ToolsOzoneSettingUpsertOptionRequest$Outbound;
}

export function toolsOzoneSettingUpsertOptionRequestToJSON(
  toolsOzoneSettingUpsertOptionRequest: ToolsOzoneSettingUpsertOptionRequest,
): string {
  return JSON.stringify(
    ToolsOzoneSettingUpsertOptionRequest$outboundSchema.parse(
      toolsOzoneSettingUpsertOptionRequest,
    ),
  );
}

export function toolsOzoneSettingUpsertOptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneSettingUpsertOptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneSettingUpsertOptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneSettingUpsertOptionRequest' from JSON`,
  );
}

/** @internal */
export const ToolsOzoneSettingUpsertOptionResponse$inboundSchema: z.ZodType<
  ToolsOzoneSettingUpsertOptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  option: components.ToolsOzoneSettingDefsOption$inboundSchema,
});

/** @internal */
export type ToolsOzoneSettingUpsertOptionResponse$Outbound = {
  option: components.ToolsOzoneSettingDefsOption$Outbound;
};

/** @internal */
export const ToolsOzoneSettingUpsertOptionResponse$outboundSchema: z.ZodType<
  ToolsOzoneSettingUpsertOptionResponse$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSettingUpsertOptionResponse
> = z.object({
  option: components.ToolsOzoneSettingDefsOption$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingUpsertOptionResponse$ {
  /** @deprecated use `ToolsOzoneSettingUpsertOptionResponse$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneSettingUpsertOptionResponse$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingUpsertOptionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneSettingUpsertOptionResponse$outboundSchema;
  /** @deprecated use `ToolsOzoneSettingUpsertOptionResponse$Outbound` instead. */
  export type Outbound = ToolsOzoneSettingUpsertOptionResponse$Outbound;
}

export function toolsOzoneSettingUpsertOptionResponseToJSON(
  toolsOzoneSettingUpsertOptionResponse: ToolsOzoneSettingUpsertOptionResponse,
): string {
  return JSON.stringify(
    ToolsOzoneSettingUpsertOptionResponse$outboundSchema.parse(
      toolsOzoneSettingUpsertOptionResponse,
    ),
  );
}

export function toolsOzoneSettingUpsertOptionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneSettingUpsertOptionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneSettingUpsertOptionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneSettingUpsertOptionResponse' from JSON`,
  );
}
