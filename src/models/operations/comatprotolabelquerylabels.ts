/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoLabelQueryLabelsRequest = {
  /**
   * List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI.
   */
  uriPatterns: Array<string>;
  /**
   * Optional list of label sources (DIDs) to filter on.
   */
  sources?: Array<string> | undefined;
  limit?: number | undefined;
  cursor?: string | undefined;
};

/**
 * OK
 */
export type ComAtprotoLabelQueryLabelsResponseBody = {
  cursor?: string | undefined;
  labels: Array<components.ComAtprotoLabelDefsLabel>;
};

/** @internal */
export const ComAtprotoLabelQueryLabelsRequest$inboundSchema: z.ZodType<
  ComAtprotoLabelQueryLabelsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uriPatterns: z.array(z.string()),
  sources: z.array(z.string()).optional(),
  limit: z.number().int().default(50),
  cursor: z.string().optional(),
});

/** @internal */
export type ComAtprotoLabelQueryLabelsRequest$Outbound = {
  uriPatterns: Array<string>;
  sources?: Array<string> | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ComAtprotoLabelQueryLabelsRequest$outboundSchema: z.ZodType<
  ComAtprotoLabelQueryLabelsRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoLabelQueryLabelsRequest
> = z.object({
  uriPatterns: z.array(z.string()),
  sources: z.array(z.string()).optional(),
  limit: z.number().int().default(50),
  cursor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoLabelQueryLabelsRequest$ {
  /** @deprecated use `ComAtprotoLabelQueryLabelsRequest$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoLabelQueryLabelsRequest$inboundSchema;
  /** @deprecated use `ComAtprotoLabelQueryLabelsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoLabelQueryLabelsRequest$outboundSchema;
  /** @deprecated use `ComAtprotoLabelQueryLabelsRequest$Outbound` instead. */
  export type Outbound = ComAtprotoLabelQueryLabelsRequest$Outbound;
}

export function comAtprotoLabelQueryLabelsRequestToJSON(
  comAtprotoLabelQueryLabelsRequest: ComAtprotoLabelQueryLabelsRequest,
): string {
  return JSON.stringify(
    ComAtprotoLabelQueryLabelsRequest$outboundSchema.parse(
      comAtprotoLabelQueryLabelsRequest,
    ),
  );
}

export function comAtprotoLabelQueryLabelsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoLabelQueryLabelsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoLabelQueryLabelsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoLabelQueryLabelsRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoLabelQueryLabelsResponseBody$inboundSchema: z.ZodType<
  ComAtprotoLabelQueryLabelsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  labels: z.array(components.ComAtprotoLabelDefsLabel$inboundSchema),
});

/** @internal */
export type ComAtprotoLabelQueryLabelsResponseBody$Outbound = {
  cursor?: string | undefined;
  labels: Array<components.ComAtprotoLabelDefsLabel$Outbound>;
};

/** @internal */
export const ComAtprotoLabelQueryLabelsResponseBody$outboundSchema: z.ZodType<
  ComAtprotoLabelQueryLabelsResponseBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoLabelQueryLabelsResponseBody
> = z.object({
  cursor: z.string().optional(),
  labels: z.array(components.ComAtprotoLabelDefsLabel$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoLabelQueryLabelsResponseBody$ {
  /** @deprecated use `ComAtprotoLabelQueryLabelsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoLabelQueryLabelsResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoLabelQueryLabelsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoLabelQueryLabelsResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoLabelQueryLabelsResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoLabelQueryLabelsResponseBody$Outbound;
}

export function comAtprotoLabelQueryLabelsResponseBodyToJSON(
  comAtprotoLabelQueryLabelsResponseBody:
    ComAtprotoLabelQueryLabelsResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoLabelQueryLabelsResponseBody$outboundSchema.parse(
      comAtprotoLabelQueryLabelsResponseBody,
    ),
  );
}

export function comAtprotoLabelQueryLabelsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoLabelQueryLabelsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoLabelQueryLabelsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoLabelQueryLabelsResponseBody' from JSON`,
  );
}
