/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoIdentitySignPlcOperationRequest = {
  /**
   * A token received through com.atproto.identity.requestPlcOperationSignature
   */
  token?: string | undefined;
  rotationKeys?: Array<string> | undefined;
  alsoKnownAs?: Array<string> | undefined;
  verificationMethods?: any | undefined;
  services?: any | undefined;
};

/**
 * OK
 */
export type ComAtprotoIdentitySignPlcOperationResponse = {
  operation?: any | undefined;
};

/** @internal */
export const ComAtprotoIdentitySignPlcOperationRequest$inboundSchema: z.ZodType<
  ComAtprotoIdentitySignPlcOperationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  rotationKeys: z.array(z.string()).optional(),
  alsoKnownAs: z.array(z.string()).optional(),
  verificationMethods: z.any().optional(),
  services: z.any().optional(),
});

/** @internal */
export type ComAtprotoIdentitySignPlcOperationRequest$Outbound = {
  token?: string | undefined;
  rotationKeys?: Array<string> | undefined;
  alsoKnownAs?: Array<string> | undefined;
  verificationMethods?: any | undefined;
  services?: any | undefined;
};

/** @internal */
export const ComAtprotoIdentitySignPlcOperationRequest$outboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationRequest$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentitySignPlcOperationRequest
  > = z.object({
    token: z.string().optional(),
    rotationKeys: z.array(z.string()).optional(),
    alsoKnownAs: z.array(z.string()).optional(),
    verificationMethods: z.any().optional(),
    services: z.any().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySignPlcOperationRequest$ {
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationRequest$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySignPlcOperationRequest$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySignPlcOperationRequest$outboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationRequest$Outbound` instead. */
  export type Outbound = ComAtprotoIdentitySignPlcOperationRequest$Outbound;
}

export function comAtprotoIdentitySignPlcOperationRequestToJSON(
  comAtprotoIdentitySignPlcOperationRequest:
    ComAtprotoIdentitySignPlcOperationRequest,
): string {
  return JSON.stringify(
    ComAtprotoIdentitySignPlcOperationRequest$outboundSchema.parse(
      comAtprotoIdentitySignPlcOperationRequest,
    ),
  );
}

export function comAtprotoIdentitySignPlcOperationRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoIdentitySignPlcOperationRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoIdentitySignPlcOperationRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoIdentitySignPlcOperationRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoIdentitySignPlcOperationResponse$inboundSchema:
  z.ZodType<ComAtprotoIdentitySignPlcOperationResponse, z.ZodTypeDef, unknown> =
    z.object({
      operation: z.any().optional(),
    });

/** @internal */
export type ComAtprotoIdentitySignPlcOperationResponse$Outbound = {
  operation?: any | undefined;
};

/** @internal */
export const ComAtprotoIdentitySignPlcOperationResponse$outboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationResponse$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentitySignPlcOperationResponse
  > = z.object({
    operation: z.any().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySignPlcOperationResponse$ {
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationResponse$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySignPlcOperationResponse$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySignPlcOperationResponse$outboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationResponse$Outbound` instead. */
  export type Outbound = ComAtprotoIdentitySignPlcOperationResponse$Outbound;
}

export function comAtprotoIdentitySignPlcOperationResponseToJSON(
  comAtprotoIdentitySignPlcOperationResponse:
    ComAtprotoIdentitySignPlcOperationResponse,
): string {
  return JSON.stringify(
    ComAtprotoIdentitySignPlcOperationResponse$outboundSchema.parse(
      comAtprotoIdentitySignPlcOperationResponse,
    ),
  );
}

export function comAtprotoIdentitySignPlcOperationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoIdentitySignPlcOperationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoIdentitySignPlcOperationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoIdentitySignPlcOperationResponse' from JSON`,
  );
}
