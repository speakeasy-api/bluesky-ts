/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoIdentitySignPlcOperationBody = {
  /**
   * A token received through com.atproto.identity.requestPlcOperationSignature
   */
  token?: string | undefined;
  rotationKeys?: Array<string> | undefined;
  alsoKnownAs?: Array<string> | undefined;
  verificationMethods?: any | undefined;
  services?: any | undefined;
};

/**
 * OK
 */
export type ComAtprotoIdentitySignPlcOperationResponseBody = {
  operation?: any | undefined;
};

/** @internal */
export const ComAtprotoIdentitySignPlcOperationBody$inboundSchema: z.ZodType<
  ComAtprotoIdentitySignPlcOperationBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  rotationKeys: z.array(z.string()).optional(),
  alsoKnownAs: z.array(z.string()).optional(),
  verificationMethods: z.any().optional(),
  services: z.any().optional(),
});

/** @internal */
export type ComAtprotoIdentitySignPlcOperationBody$Outbound = {
  token?: string | undefined;
  rotationKeys?: Array<string> | undefined;
  alsoKnownAs?: Array<string> | undefined;
  verificationMethods?: any | undefined;
  services?: any | undefined;
};

/** @internal */
export const ComAtprotoIdentitySignPlcOperationBody$outboundSchema: z.ZodType<
  ComAtprotoIdentitySignPlcOperationBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoIdentitySignPlcOperationBody
> = z.object({
  token: z.string().optional(),
  rotationKeys: z.array(z.string()).optional(),
  alsoKnownAs: z.array(z.string()).optional(),
  verificationMethods: z.any().optional(),
  services: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySignPlcOperationBody$ {
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySignPlcOperationBody$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySignPlcOperationBody$outboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationBody$Outbound` instead. */
  export type Outbound = ComAtprotoIdentitySignPlcOperationBody$Outbound;
}

export function comAtprotoIdentitySignPlcOperationBodyToJSON(
  comAtprotoIdentitySignPlcOperationBody:
    ComAtprotoIdentitySignPlcOperationBody,
): string {
  return JSON.stringify(
    ComAtprotoIdentitySignPlcOperationBody$outboundSchema.parse(
      comAtprotoIdentitySignPlcOperationBody,
    ),
  );
}

export function comAtprotoIdentitySignPlcOperationBodyFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoIdentitySignPlcOperationBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoIdentitySignPlcOperationBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoIdentitySignPlcOperationBody' from JSON`,
  );
}

/** @internal */
export const ComAtprotoIdentitySignPlcOperationResponseBody$inboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    operation: z.any().optional(),
  });

/** @internal */
export type ComAtprotoIdentitySignPlcOperationResponseBody$Outbound = {
  operation?: any | undefined;
};

/** @internal */
export const ComAtprotoIdentitySignPlcOperationResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentitySignPlcOperationResponseBody
  > = z.object({
    operation: z.any().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySignPlcOperationResponseBody$ {
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySignPlcOperationResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySignPlcOperationResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationResponseBody$Outbound` instead. */
  export type Outbound =
    ComAtprotoIdentitySignPlcOperationResponseBody$Outbound;
}

export function comAtprotoIdentitySignPlcOperationResponseBodyToJSON(
  comAtprotoIdentitySignPlcOperationResponseBody:
    ComAtprotoIdentitySignPlcOperationResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoIdentitySignPlcOperationResponseBody$outboundSchema.parse(
      comAtprotoIdentitySignPlcOperationResponseBody,
    ),
  );
}

export function comAtprotoIdentitySignPlcOperationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoIdentitySignPlcOperationResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoIdentitySignPlcOperationResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoIdentitySignPlcOperationResponseBody' from JSON`,
  );
}
