/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoIdentitySignPlcOperationRequestBody = {
  /**
   * A token received through com.atproto.identity.requestPlcOperationSignature
   */
  token?: string | undefined;
  rotationKeys?: Array<string> | undefined;
  alsoKnownAs?: Array<string> | undefined;
  verificationMethods?: any | undefined;
  services?: any | undefined;
};

/**
 * OK
 */
export type ComAtprotoIdentitySignPlcOperationResponseBody = {
  operation?: any | undefined;
};

/** @internal */
export const ComAtprotoIdentitySignPlcOperationRequestBody$inboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string().optional(),
    rotationKeys: z.array(z.string()).optional(),
    alsoKnownAs: z.array(z.string()).optional(),
    verificationMethods: z.any().optional(),
    services: z.any().optional(),
  });

/** @internal */
export type ComAtprotoIdentitySignPlcOperationRequestBody$Outbound = {
  token?: string | undefined;
  rotationKeys?: Array<string> | undefined;
  alsoKnownAs?: Array<string> | undefined;
  verificationMethods?: any | undefined;
  services?: any | undefined;
};

/** @internal */
export const ComAtprotoIdentitySignPlcOperationRequestBody$outboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationRequestBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentitySignPlcOperationRequestBody
  > = z.object({
    token: z.string().optional(),
    rotationKeys: z.array(z.string()).optional(),
    alsoKnownAs: z.array(z.string()).optional(),
    verificationMethods: z.any().optional(),
    services: z.any().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySignPlcOperationRequestBody$ {
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySignPlcOperationRequestBody$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySignPlcOperationRequestBody$outboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationRequestBody$Outbound` instead. */
  export type Outbound = ComAtprotoIdentitySignPlcOperationRequestBody$Outbound;
}

export function comAtprotoIdentitySignPlcOperationRequestBodyToJSON(
  comAtprotoIdentitySignPlcOperationRequestBody:
    ComAtprotoIdentitySignPlcOperationRequestBody,
): string {
  return JSON.stringify(
    ComAtprotoIdentitySignPlcOperationRequestBody$outboundSchema.parse(
      comAtprotoIdentitySignPlcOperationRequestBody,
    ),
  );
}

export function comAtprotoIdentitySignPlcOperationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoIdentitySignPlcOperationRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoIdentitySignPlcOperationRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoIdentitySignPlcOperationRequestBody' from JSON`,
  );
}

/** @internal */
export const ComAtprotoIdentitySignPlcOperationResponseBody$inboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    operation: z.any().optional(),
  });

/** @internal */
export type ComAtprotoIdentitySignPlcOperationResponseBody$Outbound = {
  operation?: any | undefined;
};

/** @internal */
export const ComAtprotoIdentitySignPlcOperationResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoIdentitySignPlcOperationResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoIdentitySignPlcOperationResponseBody
  > = z.object({
    operation: z.any().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoIdentitySignPlcOperationResponseBody$ {
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoIdentitySignPlcOperationResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoIdentitySignPlcOperationResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoIdentitySignPlcOperationResponseBody$Outbound` instead. */
  export type Outbound =
    ComAtprotoIdentitySignPlcOperationResponseBody$Outbound;
}

export function comAtprotoIdentitySignPlcOperationResponseBodyToJSON(
  comAtprotoIdentitySignPlcOperationResponseBody:
    ComAtprotoIdentitySignPlcOperationResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoIdentitySignPlcOperationResponseBody$outboundSchema.parse(
      comAtprotoIdentitySignPlcOperationResponseBody,
    ),
  );
}

export function comAtprotoIdentitySignPlcOperationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoIdentitySignPlcOperationResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoIdentitySignPlcOperationResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoIdentitySignPlcOperationResponseBody' from JSON`,
  );
}
