/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.
 */
export const QueryParamSubjectType = {
  Account: "account",
  Record: "record",
} as const;
/**
 * If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.
 */
export type QueryParamSubjectType = ClosedEnum<typeof QueryParamSubjectType>;

export type ToolsOzoneModerationQueryStatusesRequest = {
  /**
   * All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned.
   */
  includeAllUserRecords?: boolean | undefined;
  /**
   * The subject to get the status for.
   */
  subject?: string | undefined;
  /**
   * Search subjects by keyword from comments
   */
  comment?: string | undefined;
  /**
   * Search subjects reported after a given timestamp
   */
  reportedAfter?: Date | undefined;
  /**
   * Search subjects reported before a given timestamp
   */
  reportedBefore?: Date | undefined;
  /**
   * Search subjects reviewed after a given timestamp
   */
  reviewedAfter?: Date | undefined;
  /**
   * Search subjects where the associated record/account was deleted after a given timestamp
   */
  hostingDeletedAfter?: Date | undefined;
  /**
   * Search subjects where the associated record/account was deleted before a given timestamp
   */
  hostingDeletedBefore?: Date | undefined;
  /**
   * Search subjects where the associated record/account was updated after a given timestamp
   */
  hostingUpdatedAfter?: Date | undefined;
  /**
   * Search subjects where the associated record/account was updated before a given timestamp
   */
  hostingUpdatedBefore?: Date | undefined;
  /**
   * Search subjects by the status of the associated record/account
   */
  hostingStatuses?: Array<string> | undefined;
  /**
   * Search subjects reviewed before a given timestamp
   */
  reviewedBefore?: Date | undefined;
  /**
   * By default, we don't include muted subjects in the results. Set this to true to include them.
   */
  includeMuted?: boolean | undefined;
  /**
   * When set to true, only muted subjects and reporters will be returned.
   */
  onlyMuted?: boolean | undefined;
  /**
   * Specify when fetching subjects in a certain state
   */
  reviewState?: string | undefined;
  ignoreSubjects?: Array<string> | undefined;
  /**
   * Get all subject statuses that were reviewed by a specific moderator
   */
  lastReviewedBy?: string | undefined;
  sortField?: string | undefined;
  sortDirection?: string | undefined;
  /**
   * Get subjects that were taken down
   */
  takendown?: boolean | undefined;
  /**
   * Get subjects in unresolved appealed status
   */
  appealed?: boolean | undefined;
  limit?: number | undefined;
  tags?: Array<string> | undefined;
  excludeTags?: Array<string> | undefined;
  cursor?: string | undefined;
  /**
   * If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.
   */
  collections?: Array<string> | undefined;
  /**
   * If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.
   */
  subjectType?: QueryParamSubjectType | undefined;
};

/**
 * OK
 */
export type ToolsOzoneModerationQueryStatusesResponseBody = {
  cursor?: string | undefined;
  subjectStatuses: Array<components.ToolsOzoneModerationDefsSubjectStatusView>;
};

export type ToolsOzoneModerationQueryStatusesResponse = {
  result: ToolsOzoneModerationQueryStatusesResponseBody;
};

/** @internal */
export const QueryParamSubjectType$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamSubjectType
> = z.nativeEnum(QueryParamSubjectType);

/** @internal */
export const QueryParamSubjectType$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamSubjectType
> = QueryParamSubjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamSubjectType$ {
  /** @deprecated use `QueryParamSubjectType$inboundSchema` instead. */
  export const inboundSchema = QueryParamSubjectType$inboundSchema;
  /** @deprecated use `QueryParamSubjectType$outboundSchema` instead. */
  export const outboundSchema = QueryParamSubjectType$outboundSchema;
}

/** @internal */
export const ToolsOzoneModerationQueryStatusesRequest$inboundSchema: z.ZodType<
  ToolsOzoneModerationQueryStatusesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  includeAllUserRecords: z.boolean().optional(),
  subject: z.string().optional(),
  comment: z.string().optional(),
  reportedAfter: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  reportedBefore: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  reviewedAfter: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  hostingDeletedAfter: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  hostingDeletedBefore: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  hostingUpdatedAfter: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  hostingUpdatedBefore: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  hostingStatuses: z.array(z.string()).optional(),
  reviewedBefore: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  includeMuted: z.boolean().optional(),
  onlyMuted: z.boolean().optional(),
  reviewState: z.string().optional(),
  ignoreSubjects: z.array(z.string()).optional(),
  lastReviewedBy: z.string().optional(),
  sortField: z.string().default("lastReportedAt"),
  sortDirection: z.string().default("desc"),
  takendown: z.boolean().optional(),
  appealed: z.boolean().optional(),
  limit: z.number().int().default(50),
  tags: z.array(z.string()).optional(),
  excludeTags: z.array(z.string()).optional(),
  cursor: z.string().optional(),
  collections: z.array(z.string()).optional(),
  subjectType: QueryParamSubjectType$inboundSchema.optional(),
});

/** @internal */
export type ToolsOzoneModerationQueryStatusesRequest$Outbound = {
  includeAllUserRecords?: boolean | undefined;
  subject?: string | undefined;
  comment?: string | undefined;
  reportedAfter?: string | undefined;
  reportedBefore?: string | undefined;
  reviewedAfter?: string | undefined;
  hostingDeletedAfter?: string | undefined;
  hostingDeletedBefore?: string | undefined;
  hostingUpdatedAfter?: string | undefined;
  hostingUpdatedBefore?: string | undefined;
  hostingStatuses?: Array<string> | undefined;
  reviewedBefore?: string | undefined;
  includeMuted?: boolean | undefined;
  onlyMuted?: boolean | undefined;
  reviewState?: string | undefined;
  ignoreSubjects?: Array<string> | undefined;
  lastReviewedBy?: string | undefined;
  sortField: string;
  sortDirection: string;
  takendown?: boolean | undefined;
  appealed?: boolean | undefined;
  limit: number;
  tags?: Array<string> | undefined;
  excludeTags?: Array<string> | undefined;
  cursor?: string | undefined;
  collections?: Array<string> | undefined;
  subjectType?: string | undefined;
};

/** @internal */
export const ToolsOzoneModerationQueryStatusesRequest$outboundSchema: z.ZodType<
  ToolsOzoneModerationQueryStatusesRequest$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationQueryStatusesRequest
> = z.object({
  includeAllUserRecords: z.boolean().optional(),
  subject: z.string().optional(),
  comment: z.string().optional(),
  reportedAfter: z.date().transform(v => v.toISOString()).optional(),
  reportedBefore: z.date().transform(v => v.toISOString()).optional(),
  reviewedAfter: z.date().transform(v => v.toISOString()).optional(),
  hostingDeletedAfter: z.date().transform(v => v.toISOString()).optional(),
  hostingDeletedBefore: z.date().transform(v => v.toISOString()).optional(),
  hostingUpdatedAfter: z.date().transform(v => v.toISOString()).optional(),
  hostingUpdatedBefore: z.date().transform(v => v.toISOString()).optional(),
  hostingStatuses: z.array(z.string()).optional(),
  reviewedBefore: z.date().transform(v => v.toISOString()).optional(),
  includeMuted: z.boolean().optional(),
  onlyMuted: z.boolean().optional(),
  reviewState: z.string().optional(),
  ignoreSubjects: z.array(z.string()).optional(),
  lastReviewedBy: z.string().optional(),
  sortField: z.string().default("lastReportedAt"),
  sortDirection: z.string().default("desc"),
  takendown: z.boolean().optional(),
  appealed: z.boolean().optional(),
  limit: z.number().int().default(50),
  tags: z.array(z.string()).optional(),
  excludeTags: z.array(z.string()).optional(),
  cursor: z.string().optional(),
  collections: z.array(z.string()).optional(),
  subjectType: QueryParamSubjectType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationQueryStatusesRequest$ {
  /** @deprecated use `ToolsOzoneModerationQueryStatusesRequest$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationQueryStatusesRequest$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationQueryStatusesRequest$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationQueryStatusesRequest$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationQueryStatusesRequest$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationQueryStatusesRequest$Outbound;
}

export function toolsOzoneModerationQueryStatusesRequestToJSON(
  toolsOzoneModerationQueryStatusesRequest:
    ToolsOzoneModerationQueryStatusesRequest,
): string {
  return JSON.stringify(
    ToolsOzoneModerationQueryStatusesRequest$outboundSchema.parse(
      toolsOzoneModerationQueryStatusesRequest,
    ),
  );
}

export function toolsOzoneModerationQueryStatusesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ToolsOzoneModerationQueryStatusesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationQueryStatusesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ToolsOzoneModerationQueryStatusesRequest' from JSON`,
  );
}

/** @internal */
export const ToolsOzoneModerationQueryStatusesResponseBody$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationQueryStatusesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    cursor: z.string().optional(),
    subjectStatuses: z.array(
      components.ToolsOzoneModerationDefsSubjectStatusView$inboundSchema,
    ),
  });

/** @internal */
export type ToolsOzoneModerationQueryStatusesResponseBody$Outbound = {
  cursor?: string | undefined;
  subjectStatuses: Array<
    components.ToolsOzoneModerationDefsSubjectStatusView$Outbound
  >;
};

/** @internal */
export const ToolsOzoneModerationQueryStatusesResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationQueryStatusesResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationQueryStatusesResponseBody
  > = z.object({
    cursor: z.string().optional(),
    subjectStatuses: z.array(
      components.ToolsOzoneModerationDefsSubjectStatusView$outboundSchema,
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationQueryStatusesResponseBody$ {
  /** @deprecated use `ToolsOzoneModerationQueryStatusesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationQueryStatusesResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationQueryStatusesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationQueryStatusesResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationQueryStatusesResponseBody$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationQueryStatusesResponseBody$Outbound;
}

export function toolsOzoneModerationQueryStatusesResponseBodyToJSON(
  toolsOzoneModerationQueryStatusesResponseBody:
    ToolsOzoneModerationQueryStatusesResponseBody,
): string {
  return JSON.stringify(
    ToolsOzoneModerationQueryStatusesResponseBody$outboundSchema.parse(
      toolsOzoneModerationQueryStatusesResponseBody,
    ),
  );
}

export function toolsOzoneModerationQueryStatusesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ToolsOzoneModerationQueryStatusesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationQueryStatusesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ToolsOzoneModerationQueryStatusesResponseBody' from JSON`,
  );
}

/** @internal */
export const ToolsOzoneModerationQueryStatusesResponse$inboundSchema: z.ZodType<
  ToolsOzoneModerationQueryStatusesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() =>
    ToolsOzoneModerationQueryStatusesResponseBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ToolsOzoneModerationQueryStatusesResponse$Outbound = {
  Result: ToolsOzoneModerationQueryStatusesResponseBody$Outbound;
};

/** @internal */
export const ToolsOzoneModerationQueryStatusesResponse$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationQueryStatusesResponse$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationQueryStatusesResponse
  > = z.object({
    result: z.lazy(() =>
      ToolsOzoneModerationQueryStatusesResponseBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationQueryStatusesResponse$ {
  /** @deprecated use `ToolsOzoneModerationQueryStatusesResponse$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationQueryStatusesResponse$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationQueryStatusesResponse$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationQueryStatusesResponse$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationQueryStatusesResponse$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationQueryStatusesResponse$Outbound;
}

export function toolsOzoneModerationQueryStatusesResponseToJSON(
  toolsOzoneModerationQueryStatusesResponse:
    ToolsOzoneModerationQueryStatusesResponse,
): string {
  return JSON.stringify(
    ToolsOzoneModerationQueryStatusesResponse$outboundSchema.parse(
      toolsOzoneModerationQueryStatusesResponse,
    ),
  );
}

export function toolsOzoneModerationQueryStatusesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ToolsOzoneModerationQueryStatusesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationQueryStatusesResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ToolsOzoneModerationQueryStatusesResponse' from JSON`,
  );
}
