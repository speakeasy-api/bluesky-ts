/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChatBskyConvoUpdateReadBody = {
  convoId: string;
  messageId?: string | undefined;
};

/**
 * OK
 */
export type ChatBskyConvoUpdateReadResponseBody = {
  convo: components.ChatBskyConvoDefsConvoView;
};

/** @internal */
export const ChatBskyConvoUpdateReadBody$inboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  convoId: z.string(),
  messageId: z.string().optional(),
});

/** @internal */
export type ChatBskyConvoUpdateReadBody$Outbound = {
  convoId: string;
  messageId?: string | undefined;
};

/** @internal */
export const ChatBskyConvoUpdateReadBody$outboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadBody$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUpdateReadBody
> = z.object({
  convoId: z.string(),
  messageId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUpdateReadBody$ {
  /** @deprecated use `ChatBskyConvoUpdateReadBody$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoUpdateReadBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadBody$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoUpdateReadBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoUpdateReadBody$Outbound;
}

export function chatBskyConvoUpdateReadBodyToJSON(
  chatBskyConvoUpdateReadBody: ChatBskyConvoUpdateReadBody,
): string {
  return JSON.stringify(
    ChatBskyConvoUpdateReadBody$outboundSchema.parse(
      chatBskyConvoUpdateReadBody,
    ),
  );
}

export function chatBskyConvoUpdateReadBodyFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoUpdateReadBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoUpdateReadBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoUpdateReadBody' from JSON`,
  );
}

/** @internal */
export const ChatBskyConvoUpdateReadResponseBody$inboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  convo: components.ChatBskyConvoDefsConvoView$inboundSchema,
});

/** @internal */
export type ChatBskyConvoUpdateReadResponseBody$Outbound = {
  convo: components.ChatBskyConvoDefsConvoView$Outbound;
};

/** @internal */
export const ChatBskyConvoUpdateReadResponseBody$outboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadResponseBody$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUpdateReadResponseBody
> = z.object({
  convo: components.ChatBskyConvoDefsConvoView$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUpdateReadResponseBody$ {
  /** @deprecated use `ChatBskyConvoUpdateReadResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ChatBskyConvoUpdateReadResponseBody$inboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoUpdateReadResponseBody$outboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadResponseBody$Outbound` instead. */
  export type Outbound = ChatBskyConvoUpdateReadResponseBody$Outbound;
}

export function chatBskyConvoUpdateReadResponseBodyToJSON(
  chatBskyConvoUpdateReadResponseBody: ChatBskyConvoUpdateReadResponseBody,
): string {
  return JSON.stringify(
    ChatBskyConvoUpdateReadResponseBody$outboundSchema.parse(
      chatBskyConvoUpdateReadResponseBody,
    ),
  );
}

export function chatBskyConvoUpdateReadResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoUpdateReadResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatBskyConvoUpdateReadResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoUpdateReadResponseBody' from JSON`,
  );
}
