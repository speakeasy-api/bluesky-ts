/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChatBskyConvoUpdateReadRequest = {
  convoId: string;
  messageId?: string | undefined;
};

/**
 * OK
 */
export type ChatBskyConvoUpdateReadResponse = {
  convo: components.ChatBskyConvoDefsConvoView;
};

/** @internal */
export const ChatBskyConvoUpdateReadRequest$inboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  convoId: z.string(),
  messageId: z.string().optional(),
});

/** @internal */
export type ChatBskyConvoUpdateReadRequest$Outbound = {
  convoId: string;
  messageId?: string | undefined;
};

/** @internal */
export const ChatBskyConvoUpdateReadRequest$outboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadRequest$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUpdateReadRequest
> = z.object({
  convoId: z.string(),
  messageId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUpdateReadRequest$ {
  /** @deprecated use `ChatBskyConvoUpdateReadRequest$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoUpdateReadRequest$inboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadRequest$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoUpdateReadRequest$outboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadRequest$Outbound` instead. */
  export type Outbound = ChatBskyConvoUpdateReadRequest$Outbound;
}

export function chatBskyConvoUpdateReadRequestToJSON(
  chatBskyConvoUpdateReadRequest: ChatBskyConvoUpdateReadRequest,
): string {
  return JSON.stringify(
    ChatBskyConvoUpdateReadRequest$outboundSchema.parse(
      chatBskyConvoUpdateReadRequest,
    ),
  );
}

export function chatBskyConvoUpdateReadRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoUpdateReadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoUpdateReadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoUpdateReadRequest' from JSON`,
  );
}

/** @internal */
export const ChatBskyConvoUpdateReadResponse$inboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  convo: components.ChatBskyConvoDefsConvoView$inboundSchema,
});

/** @internal */
export type ChatBskyConvoUpdateReadResponse$Outbound = {
  convo: components.ChatBskyConvoDefsConvoView$Outbound;
};

/** @internal */
export const ChatBskyConvoUpdateReadResponse$outboundSchema: z.ZodType<
  ChatBskyConvoUpdateReadResponse$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUpdateReadResponse
> = z.object({
  convo: components.ChatBskyConvoDefsConvoView$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUpdateReadResponse$ {
  /** @deprecated use `ChatBskyConvoUpdateReadResponse$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoUpdateReadResponse$inboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadResponse$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoUpdateReadResponse$outboundSchema;
  /** @deprecated use `ChatBskyConvoUpdateReadResponse$Outbound` instead. */
  export type Outbound = ChatBskyConvoUpdateReadResponse$Outbound;
}

export function chatBskyConvoUpdateReadResponseToJSON(
  chatBskyConvoUpdateReadResponse: ChatBskyConvoUpdateReadResponse,
): string {
  return JSON.stringify(
    ChatBskyConvoUpdateReadResponse$outboundSchema.parse(
      chatBskyConvoUpdateReadResponse,
    ),
  );
}

export function chatBskyConvoUpdateReadResponseFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoUpdateReadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoUpdateReadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoUpdateReadResponse' from JSON`,
  );
}
