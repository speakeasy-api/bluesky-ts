/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the ranking order of results.
 */
export const Sort = {
  Top: "top",
  Latest: "latest",
} as const;
/**
 * Specifies the ranking order of results.
 */
export type Sort = ClosedEnum<typeof Sort>;

export type AppBskyFeedSearchPostsRequest = {
  /**
   * Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.
   */
  q: string;
  /**
   * Specifies the ranking order of results.
   */
  sort?: Sort | undefined;
  /**
   * Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD).
   */
  since?: string | undefined;
  /**
   * Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD).
   */
  until?: string | undefined;
  /**
   * Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.
   */
  mentions?: string | undefined;
  /**
   * Filter to posts by the given account. Handles are resolved to DID before query-time.
   */
  author?: string | undefined;
  /**
   * Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.
   */
  lang?: string | undefined;
  /**
   * Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.
   */
  domain?: string | undefined;
  /**
   * Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.
   */
  url?: string | undefined;
  /**
   * Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching.
   */
  tag?: Array<string> | undefined;
  limit?: number | undefined;
  /**
   * Optional pagination mechanism; may not necessarily allow scrolling through entire result set.
   */
  cursor?: string | undefined;
};

/**
 * OK
 */
export type AppBskyFeedSearchPostsResponseBody = {
  cursor?: string | undefined;
  hitsTotal?: number | undefined;
  posts: Array<components.AppBskyFeedDefsPostView>;
};

/** @internal */
export const Sort$inboundSchema: z.ZodNativeEnum<typeof Sort> = z.nativeEnum(
  Sort,
);

/** @internal */
export const Sort$outboundSchema: z.ZodNativeEnum<typeof Sort> =
  Sort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
  /** @deprecated use `Sort$inboundSchema` instead. */
  export const inboundSchema = Sort$inboundSchema;
  /** @deprecated use `Sort$outboundSchema` instead. */
  export const outboundSchema = Sort$outboundSchema;
}

/** @internal */
export const AppBskyFeedSearchPostsRequest$inboundSchema: z.ZodType<
  AppBskyFeedSearchPostsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.string(),
  sort: Sort$inboundSchema.default("latest"),
  since: z.string().optional(),
  until: z.string().optional(),
  mentions: z.string().optional(),
  author: z.string().optional(),
  lang: z.string().optional(),
  domain: z.string().optional(),
  url: z.string().optional(),
  tag: z.array(z.string()).optional(),
  limit: z.number().int().default(25),
  cursor: z.string().optional(),
});

/** @internal */
export type AppBskyFeedSearchPostsRequest$Outbound = {
  q: string;
  sort: string;
  since?: string | undefined;
  until?: string | undefined;
  mentions?: string | undefined;
  author?: string | undefined;
  lang?: string | undefined;
  domain?: string | undefined;
  url?: string | undefined;
  tag?: Array<string> | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const AppBskyFeedSearchPostsRequest$outboundSchema: z.ZodType<
  AppBskyFeedSearchPostsRequest$Outbound,
  z.ZodTypeDef,
  AppBskyFeedSearchPostsRequest
> = z.object({
  q: z.string(),
  sort: Sort$outboundSchema.default("latest"),
  since: z.string().optional(),
  until: z.string().optional(),
  mentions: z.string().optional(),
  author: z.string().optional(),
  lang: z.string().optional(),
  domain: z.string().optional(),
  url: z.string().optional(),
  tag: z.array(z.string()).optional(),
  limit: z.number().int().default(25),
  cursor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedSearchPostsRequest$ {
  /** @deprecated use `AppBskyFeedSearchPostsRequest$inboundSchema` instead. */
  export const inboundSchema = AppBskyFeedSearchPostsRequest$inboundSchema;
  /** @deprecated use `AppBskyFeedSearchPostsRequest$outboundSchema` instead. */
  export const outboundSchema = AppBskyFeedSearchPostsRequest$outboundSchema;
  /** @deprecated use `AppBskyFeedSearchPostsRequest$Outbound` instead. */
  export type Outbound = AppBskyFeedSearchPostsRequest$Outbound;
}

export function appBskyFeedSearchPostsRequestToJSON(
  appBskyFeedSearchPostsRequest: AppBskyFeedSearchPostsRequest,
): string {
  return JSON.stringify(
    AppBskyFeedSearchPostsRequest$outboundSchema.parse(
      appBskyFeedSearchPostsRequest,
    ),
  );
}

export function appBskyFeedSearchPostsRequestFromJSON(
  jsonString: string,
): SafeParseResult<AppBskyFeedSearchPostsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppBskyFeedSearchPostsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppBskyFeedSearchPostsRequest' from JSON`,
  );
}

/** @internal */
export const AppBskyFeedSearchPostsResponseBody$inboundSchema: z.ZodType<
  AppBskyFeedSearchPostsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  hitsTotal: z.number().int().optional(),
  posts: z.array(components.AppBskyFeedDefsPostView$inboundSchema),
});

/** @internal */
export type AppBskyFeedSearchPostsResponseBody$Outbound = {
  cursor?: string | undefined;
  hitsTotal?: number | undefined;
  posts: Array<components.AppBskyFeedDefsPostView$Outbound>;
};

/** @internal */
export const AppBskyFeedSearchPostsResponseBody$outboundSchema: z.ZodType<
  AppBskyFeedSearchPostsResponseBody$Outbound,
  z.ZodTypeDef,
  AppBskyFeedSearchPostsResponseBody
> = z.object({
  cursor: z.string().optional(),
  hitsTotal: z.number().int().optional(),
  posts: z.array(components.AppBskyFeedDefsPostView$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedSearchPostsResponseBody$ {
  /** @deprecated use `AppBskyFeedSearchPostsResponseBody$inboundSchema` instead. */
  export const inboundSchema = AppBskyFeedSearchPostsResponseBody$inboundSchema;
  /** @deprecated use `AppBskyFeedSearchPostsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyFeedSearchPostsResponseBody$outboundSchema;
  /** @deprecated use `AppBskyFeedSearchPostsResponseBody$Outbound` instead. */
  export type Outbound = AppBskyFeedSearchPostsResponseBody$Outbound;
}

export function appBskyFeedSearchPostsResponseBodyToJSON(
  appBskyFeedSearchPostsResponseBody: AppBskyFeedSearchPostsResponseBody,
): string {
  return JSON.stringify(
    AppBskyFeedSearchPostsResponseBody$outboundSchema.parse(
      appBskyFeedSearchPostsResponseBody,
    ),
  );
}

export function appBskyFeedSearchPostsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<AppBskyFeedSearchPostsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AppBskyFeedSearchPostsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppBskyFeedSearchPostsResponseBody' from JSON`,
  );
}
