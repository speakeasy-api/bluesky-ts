/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoRepoPutRecordRequest = {
  /**
   * The handle or DID of the repo (aka, current account).
   */
  repo: string;
  /**
   * The NSID of the record collection.
   */
  collection: string;
  /**
   * The Record Key.
   */
  rkey: string;
  /**
   * Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.
   */
  validate?: boolean | undefined;
  record?: any | undefined;
  /**
   * Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation
   */
  swapRecord?: string | undefined;
  /**
   * Compare and swap with the previous commit by CID.
   */
  swapCommit?: string | undefined;
};

export const ComAtprotoRepoPutRecordValidationStatus = {
  Valid: "valid",
  Unknown: "unknown",
} as const;
export type ComAtprotoRepoPutRecordValidationStatus = ClosedEnum<
  typeof ComAtprotoRepoPutRecordValidationStatus
>;

/**
 * OK
 */
export type ComAtprotoRepoPutRecordResponse = {
  uri: string;
  cid: string;
  commit?: components.ComAtprotoRepoDefsCommitMeta | undefined;
  validationStatus?: ComAtprotoRepoPutRecordValidationStatus | undefined;
};

/** @internal */
export const ComAtprotoRepoPutRecordRequest$inboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  collection: z.string(),
  rkey: z.string(),
  validate: z.boolean().optional(),
  record: z.any().optional(),
  swapRecord: z.string().optional(),
  swapCommit: z.string().optional(),
});

/** @internal */
export type ComAtprotoRepoPutRecordRequest$Outbound = {
  repo: string;
  collection: string;
  rkey: string;
  validate?: boolean | undefined;
  record?: any | undefined;
  swapRecord?: string | undefined;
  swapCommit?: string | undefined;
};

/** @internal */
export const ComAtprotoRepoPutRecordRequest$outboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoPutRecordRequest
> = z.object({
  repo: z.string(),
  collection: z.string(),
  rkey: z.string(),
  validate: z.boolean().optional(),
  record: z.any().optional(),
  swapRecord: z.string().optional(),
  swapCommit: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoPutRecordRequest$ {
  /** @deprecated use `ComAtprotoRepoPutRecordRequest$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoPutRecordRequest$inboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordRequest$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoPutRecordRequest$outboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordRequest$Outbound` instead. */
  export type Outbound = ComAtprotoRepoPutRecordRequest$Outbound;
}

export function comAtprotoRepoPutRecordRequestToJSON(
  comAtprotoRepoPutRecordRequest: ComAtprotoRepoPutRecordRequest,
): string {
  return JSON.stringify(
    ComAtprotoRepoPutRecordRequest$outboundSchema.parse(
      comAtprotoRepoPutRecordRequest,
    ),
  );
}

export function comAtprotoRepoPutRecordRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoPutRecordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoPutRecordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoPutRecordRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoRepoPutRecordValidationStatus$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoRepoPutRecordValidationStatus> = z
    .nativeEnum(ComAtprotoRepoPutRecordValidationStatus);

/** @internal */
export const ComAtprotoRepoPutRecordValidationStatus$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoRepoPutRecordValidationStatus> =
    ComAtprotoRepoPutRecordValidationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoPutRecordValidationStatus$ {
  /** @deprecated use `ComAtprotoRepoPutRecordValidationStatus$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoPutRecordValidationStatus$inboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordValidationStatus$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoPutRecordValidationStatus$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoPutRecordResponse$inboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  cid: z.string(),
  commit: components.ComAtprotoRepoDefsCommitMeta$inboundSchema.optional(),
  validationStatus: ComAtprotoRepoPutRecordValidationStatus$inboundSchema
    .optional(),
});

/** @internal */
export type ComAtprotoRepoPutRecordResponse$Outbound = {
  uri: string;
  cid: string;
  commit?: components.ComAtprotoRepoDefsCommitMeta$Outbound | undefined;
  validationStatus?: string | undefined;
};

/** @internal */
export const ComAtprotoRepoPutRecordResponse$outboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoPutRecordResponse
> = z.object({
  uri: z.string(),
  cid: z.string(),
  commit: components.ComAtprotoRepoDefsCommitMeta$outboundSchema.optional(),
  validationStatus: ComAtprotoRepoPutRecordValidationStatus$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoPutRecordResponse$ {
  /** @deprecated use `ComAtprotoRepoPutRecordResponse$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoPutRecordResponse$inboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordResponse$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoPutRecordResponse$outboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordResponse$Outbound` instead. */
  export type Outbound = ComAtprotoRepoPutRecordResponse$Outbound;
}

export function comAtprotoRepoPutRecordResponseToJSON(
  comAtprotoRepoPutRecordResponse: ComAtprotoRepoPutRecordResponse,
): string {
  return JSON.stringify(
    ComAtprotoRepoPutRecordResponse$outboundSchema.parse(
      comAtprotoRepoPutRecordResponse,
    ),
  );
}

export function comAtprotoRepoPutRecordResponseFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoPutRecordResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoPutRecordResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoPutRecordResponse' from JSON`,
  );
}
