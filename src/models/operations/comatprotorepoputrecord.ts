/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoRepoPutRecordBody = {
  /**
   * The handle or DID of the repo (aka, current account).
   */
  repo: string;
  /**
   * The NSID of the record collection.
   */
  collection: string;
  /**
   * The Record Key.
   */
  rkey: string;
  /**
   * Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.
   */
  validate?: boolean | undefined;
  record?: any | undefined;
  /**
   * Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation
   */
  swapRecord?: string | undefined;
  /**
   * Compare and swap with the previous commit by CID.
   */
  swapCommit?: string | undefined;
};

export const ComAtprotoRepoPutRecordValidationStatus = {
  Valid: "valid",
  Unknown: "unknown",
} as const;
export type ComAtprotoRepoPutRecordValidationStatus = ClosedEnum<
  typeof ComAtprotoRepoPutRecordValidationStatus
>;

/**
 * OK
 */
export type ComAtprotoRepoPutRecordResponseBody = {
  uri: string;
  cid: string;
  commit?: components.ComAtprotoRepoDefsCommitMeta | undefined;
  validationStatus?: ComAtprotoRepoPutRecordValidationStatus | undefined;
};

/** @internal */
export const ComAtprotoRepoPutRecordBody$inboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  collection: z.string(),
  rkey: z.string(),
  validate: z.boolean().optional(),
  record: z.any().optional(),
  swapRecord: z.string().optional(),
  swapCommit: z.string().optional(),
});

/** @internal */
export type ComAtprotoRepoPutRecordBody$Outbound = {
  repo: string;
  collection: string;
  rkey: string;
  validate?: boolean | undefined;
  record?: any | undefined;
  swapRecord?: string | undefined;
  swapCommit?: string | undefined;
};

/** @internal */
export const ComAtprotoRepoPutRecordBody$outboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoPutRecordBody
> = z.object({
  repo: z.string(),
  collection: z.string(),
  rkey: z.string(),
  validate: z.boolean().optional(),
  record: z.any().optional(),
  swapRecord: z.string().optional(),
  swapCommit: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoPutRecordBody$ {
  /** @deprecated use `ComAtprotoRepoPutRecordBody$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoPutRecordBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordBody$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoPutRecordBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordBody$Outbound` instead. */
  export type Outbound = ComAtprotoRepoPutRecordBody$Outbound;
}

export function comAtprotoRepoPutRecordBodyToJSON(
  comAtprotoRepoPutRecordBody: ComAtprotoRepoPutRecordBody,
): string {
  return JSON.stringify(
    ComAtprotoRepoPutRecordBody$outboundSchema.parse(
      comAtprotoRepoPutRecordBody,
    ),
  );
}

export function comAtprotoRepoPutRecordBodyFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoPutRecordBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoPutRecordBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoPutRecordBody' from JSON`,
  );
}

/** @internal */
export const ComAtprotoRepoPutRecordValidationStatus$inboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoRepoPutRecordValidationStatus> = z
    .nativeEnum(ComAtprotoRepoPutRecordValidationStatus);

/** @internal */
export const ComAtprotoRepoPutRecordValidationStatus$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoRepoPutRecordValidationStatus> =
    ComAtprotoRepoPutRecordValidationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoPutRecordValidationStatus$ {
  /** @deprecated use `ComAtprotoRepoPutRecordValidationStatus$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoPutRecordValidationStatus$inboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordValidationStatus$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoPutRecordValidationStatus$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoPutRecordResponseBody$inboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  cid: z.string(),
  commit: components.ComAtprotoRepoDefsCommitMeta$inboundSchema.optional(),
  validationStatus: ComAtprotoRepoPutRecordValidationStatus$inboundSchema
    .optional(),
});

/** @internal */
export type ComAtprotoRepoPutRecordResponseBody$Outbound = {
  uri: string;
  cid: string;
  commit?: components.ComAtprotoRepoDefsCommitMeta$Outbound | undefined;
  validationStatus?: string | undefined;
};

/** @internal */
export const ComAtprotoRepoPutRecordResponseBody$outboundSchema: z.ZodType<
  ComAtprotoRepoPutRecordResponseBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoPutRecordResponseBody
> = z.object({
  uri: z.string(),
  cid: z.string(),
  commit: components.ComAtprotoRepoDefsCommitMeta$outboundSchema.optional(),
  validationStatus: ComAtprotoRepoPutRecordValidationStatus$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoPutRecordResponseBody$ {
  /** @deprecated use `ComAtprotoRepoPutRecordResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoPutRecordResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoPutRecordResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoPutRecordResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoRepoPutRecordResponseBody$Outbound;
}

export function comAtprotoRepoPutRecordResponseBodyToJSON(
  comAtprotoRepoPutRecordResponseBody: ComAtprotoRepoPutRecordResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoRepoPutRecordResponseBody$outboundSchema.parse(
      comAtprotoRepoPutRecordResponseBody,
    ),
  );
}

export function comAtprotoRepoPutRecordResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoPutRecordResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoRepoPutRecordResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoPutRecordResponseBody' from JSON`,
  );
}
