/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsOzoneModerationSearchReposRequest = {
  q?: string | undefined;
  limit?: number | undefined;
  cursor?: string | undefined;
};

/**
 * OK
 */
export type ToolsOzoneModerationSearchReposResponseBody = {
  cursor?: string | undefined;
  repos: Array<components.ToolsOzoneModerationDefsRepoView>;
};

/** @internal */
export const ToolsOzoneModerationSearchReposRequest$inboundSchema: z.ZodType<
  ToolsOzoneModerationSearchReposRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.string().optional(),
  limit: z.number().int().default(50),
  cursor: z.string().optional(),
});

/** @internal */
export type ToolsOzoneModerationSearchReposRequest$Outbound = {
  q?: string | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ToolsOzoneModerationSearchReposRequest$outboundSchema: z.ZodType<
  ToolsOzoneModerationSearchReposRequest$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationSearchReposRequest
> = z.object({
  q: z.string().optional(),
  limit: z.number().int().default(50),
  cursor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationSearchReposRequest$ {
  /** @deprecated use `ToolsOzoneModerationSearchReposRequest$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationSearchReposRequest$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationSearchReposRequest$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationSearchReposRequest$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationSearchReposRequest$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationSearchReposRequest$Outbound;
}

export function toolsOzoneModerationSearchReposRequestToJSON(
  toolsOzoneModerationSearchReposRequest:
    ToolsOzoneModerationSearchReposRequest,
): string {
  return JSON.stringify(
    ToolsOzoneModerationSearchReposRequest$outboundSchema.parse(
      toolsOzoneModerationSearchReposRequest,
    ),
  );
}

export function toolsOzoneModerationSearchReposRequestFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationSearchReposRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationSearchReposRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationSearchReposRequest' from JSON`,
  );
}

/** @internal */
export const ToolsOzoneModerationSearchReposResponseBody$inboundSchema:
  z.ZodType<
    ToolsOzoneModerationSearchReposResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    cursor: z.string().optional(),
    repos: z.array(components.ToolsOzoneModerationDefsRepoView$inboundSchema),
  });

/** @internal */
export type ToolsOzoneModerationSearchReposResponseBody$Outbound = {
  cursor?: string | undefined;
  repos: Array<components.ToolsOzoneModerationDefsRepoView$Outbound>;
};

/** @internal */
export const ToolsOzoneModerationSearchReposResponseBody$outboundSchema:
  z.ZodType<
    ToolsOzoneModerationSearchReposResponseBody$Outbound,
    z.ZodTypeDef,
    ToolsOzoneModerationSearchReposResponseBody
  > = z.object({
    cursor: z.string().optional(),
    repos: z.array(components.ToolsOzoneModerationDefsRepoView$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationSearchReposResponseBody$ {
  /** @deprecated use `ToolsOzoneModerationSearchReposResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationSearchReposResponseBody$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationSearchReposResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationSearchReposResponseBody$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationSearchReposResponseBody$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationSearchReposResponseBody$Outbound;
}

export function toolsOzoneModerationSearchReposResponseBodyToJSON(
  toolsOzoneModerationSearchReposResponseBody:
    ToolsOzoneModerationSearchReposResponseBody,
): string {
  return JSON.stringify(
    ToolsOzoneModerationSearchReposResponseBody$outboundSchema.parse(
      toolsOzoneModerationSearchReposResponseBody,
    ),
  );
}

export function toolsOzoneModerationSearchReposResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ToolsOzoneModerationSearchReposResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationSearchReposResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ToolsOzoneModerationSearchReposResponseBody' from JSON`,
  );
}
