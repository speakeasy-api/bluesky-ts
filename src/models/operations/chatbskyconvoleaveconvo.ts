/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChatBskyConvoLeaveConvoRequest = {
  convoId: string;
};

/**
 * OK
 */
export type ChatBskyConvoLeaveConvoResponse = {
  convoId: string;
  rev: string;
};

/** @internal */
export const ChatBskyConvoLeaveConvoRequest$inboundSchema: z.ZodType<
  ChatBskyConvoLeaveConvoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  convoId: z.string(),
});

/** @internal */
export type ChatBskyConvoLeaveConvoRequest$Outbound = {
  convoId: string;
};

/** @internal */
export const ChatBskyConvoLeaveConvoRequest$outboundSchema: z.ZodType<
  ChatBskyConvoLeaveConvoRequest$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoLeaveConvoRequest
> = z.object({
  convoId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoLeaveConvoRequest$ {
  /** @deprecated use `ChatBskyConvoLeaveConvoRequest$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoLeaveConvoRequest$inboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoRequest$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoLeaveConvoRequest$outboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoRequest$Outbound` instead. */
  export type Outbound = ChatBskyConvoLeaveConvoRequest$Outbound;
}

export function chatBskyConvoLeaveConvoRequestToJSON(
  chatBskyConvoLeaveConvoRequest: ChatBskyConvoLeaveConvoRequest,
): string {
  return JSON.stringify(
    ChatBskyConvoLeaveConvoRequest$outboundSchema.parse(
      chatBskyConvoLeaveConvoRequest,
    ),
  );
}

export function chatBskyConvoLeaveConvoRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoLeaveConvoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoLeaveConvoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoLeaveConvoRequest' from JSON`,
  );
}

/** @internal */
export const ChatBskyConvoLeaveConvoResponse$inboundSchema: z.ZodType<
  ChatBskyConvoLeaveConvoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  convoId: z.string(),
  rev: z.string(),
});

/** @internal */
export type ChatBskyConvoLeaveConvoResponse$Outbound = {
  convoId: string;
  rev: string;
};

/** @internal */
export const ChatBskyConvoLeaveConvoResponse$outboundSchema: z.ZodType<
  ChatBskyConvoLeaveConvoResponse$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoLeaveConvoResponse
> = z.object({
  convoId: z.string(),
  rev: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoLeaveConvoResponse$ {
  /** @deprecated use `ChatBskyConvoLeaveConvoResponse$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoLeaveConvoResponse$inboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoResponse$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoLeaveConvoResponse$outboundSchema;
  /** @deprecated use `ChatBskyConvoLeaveConvoResponse$Outbound` instead. */
  export type Outbound = ChatBskyConvoLeaveConvoResponse$Outbound;
}

export function chatBskyConvoLeaveConvoResponseToJSON(
  chatBskyConvoLeaveConvoResponse: ChatBskyConvoLeaveConvoResponse,
): string {
  return JSON.stringify(
    ChatBskyConvoLeaveConvoResponse$outboundSchema.parse(
      chatBskyConvoLeaveConvoResponse,
    ),
  );
}

export function chatBskyConvoLeaveConvoResponseFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoLeaveConvoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoLeaveConvoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoLeaveConvoResponse' from JSON`,
  );
}
