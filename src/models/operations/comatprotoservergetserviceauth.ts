/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoServerGetServiceAuthRequest = {
  /**
   * The DID of the service that the token will be used to authenticate with
   */
  aud: string;
  /**
   * The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope.
   */
  exp?: number | undefined;
  /**
   * Lexicon (XRPC) method to bind the requested token to
   */
  lxm?: string | undefined;
};

/**
 * OK
 */
export type ComAtprotoServerGetServiceAuthResponse = {
  token: string;
};

/** @internal */
export const ComAtprotoServerGetServiceAuthRequest$inboundSchema: z.ZodType<
  ComAtprotoServerGetServiceAuthRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  aud: z.string(),
  exp: z.number().int().optional(),
  lxm: z.string().optional(),
});

/** @internal */
export type ComAtprotoServerGetServiceAuthRequest$Outbound = {
  aud: string;
  exp?: number | undefined;
  lxm?: string | undefined;
};

/** @internal */
export const ComAtprotoServerGetServiceAuthRequest$outboundSchema: z.ZodType<
  ComAtprotoServerGetServiceAuthRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerGetServiceAuthRequest
> = z.object({
  aud: z.string(),
  exp: z.number().int().optional(),
  lxm: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerGetServiceAuthRequest$ {
  /** @deprecated use `ComAtprotoServerGetServiceAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerGetServiceAuthRequest$inboundSchema;
  /** @deprecated use `ComAtprotoServerGetServiceAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerGetServiceAuthRequest$outboundSchema;
  /** @deprecated use `ComAtprotoServerGetServiceAuthRequest$Outbound` instead. */
  export type Outbound = ComAtprotoServerGetServiceAuthRequest$Outbound;
}

export function comAtprotoServerGetServiceAuthRequestToJSON(
  comAtprotoServerGetServiceAuthRequest: ComAtprotoServerGetServiceAuthRequest,
): string {
  return JSON.stringify(
    ComAtprotoServerGetServiceAuthRequest$outboundSchema.parse(
      comAtprotoServerGetServiceAuthRequest,
    ),
  );
}

export function comAtprotoServerGetServiceAuthRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoServerGetServiceAuthRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerGetServiceAuthRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoServerGetServiceAuthRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoServerGetServiceAuthResponse$inboundSchema: z.ZodType<
  ComAtprotoServerGetServiceAuthResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
});

/** @internal */
export type ComAtprotoServerGetServiceAuthResponse$Outbound = {
  token: string;
};

/** @internal */
export const ComAtprotoServerGetServiceAuthResponse$outboundSchema: z.ZodType<
  ComAtprotoServerGetServiceAuthResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerGetServiceAuthResponse
> = z.object({
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerGetServiceAuthResponse$ {
  /** @deprecated use `ComAtprotoServerGetServiceAuthResponse$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerGetServiceAuthResponse$inboundSchema;
  /** @deprecated use `ComAtprotoServerGetServiceAuthResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerGetServiceAuthResponse$outboundSchema;
  /** @deprecated use `ComAtprotoServerGetServiceAuthResponse$Outbound` instead. */
  export type Outbound = ComAtprotoServerGetServiceAuthResponse$Outbound;
}

export function comAtprotoServerGetServiceAuthResponseToJSON(
  comAtprotoServerGetServiceAuthResponse:
    ComAtprotoServerGetServiceAuthResponse,
): string {
  return JSON.stringify(
    ComAtprotoServerGetServiceAuthResponse$outboundSchema.parse(
      comAtprotoServerGetServiceAuthResponse,
    ),
  );
}

export function comAtprotoServerGetServiceAuthResponseFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoServerGetServiceAuthResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerGetServiceAuthResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoServerGetServiceAuthResponse' from JSON`,
  );
}
