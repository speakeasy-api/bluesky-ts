/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoModerationCreateReportSubject =
  | components.ComAtprotoAdminDefsRepoRef
  | components.ComAtprotoRepoStrongRef;

export type ComAtprotoModerationCreateReportRequestBody = {
  reasonType: string;
  /**
   * Additional context about the content and violation.
   */
  reason?: string | undefined;
  subject:
    | components.ComAtprotoAdminDefsRepoRef
    | components.ComAtprotoRepoStrongRef;
};

export type ComAtprotoModerationCreateReportComAtprotoModerationSubject =
  | components.ComAtprotoAdminDefsRepoRef
  | components.ComAtprotoRepoStrongRef;

/**
 * OK
 */
export type ComAtprotoModerationCreateReportResponseBody = {
  id: number;
  reasonType: string;
  reason?: string | undefined;
  subject:
    | components.ComAtprotoAdminDefsRepoRef
    | components.ComAtprotoRepoStrongRef;
  reportedBy: string;
  createdAt: Date;
};

/** @internal */
export const ComAtprotoModerationCreateReportSubject$inboundSchema: z.ZodType<
  ComAtprotoModerationCreateReportSubject,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ComAtprotoAdminDefsRepoRef$inboundSchema,
  components.ComAtprotoRepoStrongRef$inboundSchema,
]);

/** @internal */
export type ComAtprotoModerationCreateReportSubject$Outbound =
  | components.ComAtprotoAdminDefsRepoRef$Outbound
  | components.ComAtprotoRepoStrongRef$Outbound;

/** @internal */
export const ComAtprotoModerationCreateReportSubject$outboundSchema: z.ZodType<
  ComAtprotoModerationCreateReportSubject$Outbound,
  z.ZodTypeDef,
  ComAtprotoModerationCreateReportSubject
> = z.union([
  components.ComAtprotoAdminDefsRepoRef$outboundSchema,
  components.ComAtprotoRepoStrongRef$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoModerationCreateReportSubject$ {
  /** @deprecated use `ComAtprotoModerationCreateReportSubject$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoModerationCreateReportSubject$inboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportSubject$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoModerationCreateReportSubject$outboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportSubject$Outbound` instead. */
  export type Outbound = ComAtprotoModerationCreateReportSubject$Outbound;
}

export function comAtprotoModerationCreateReportSubjectToJSON(
  comAtprotoModerationCreateReportSubject:
    ComAtprotoModerationCreateReportSubject,
): string {
  return JSON.stringify(
    ComAtprotoModerationCreateReportSubject$outboundSchema.parse(
      comAtprotoModerationCreateReportSubject,
    ),
  );
}

export function comAtprotoModerationCreateReportSubjectFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoModerationCreateReportSubject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoModerationCreateReportSubject$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoModerationCreateReportSubject' from JSON`,
  );
}

/** @internal */
export const ComAtprotoModerationCreateReportRequestBody$inboundSchema:
  z.ZodType<
    ComAtprotoModerationCreateReportRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    reasonType: z.string(),
    reason: z.string().optional(),
    subject: z.union([
      components.ComAtprotoAdminDefsRepoRef$inboundSchema,
      components.ComAtprotoRepoStrongRef$inboundSchema,
    ]),
  });

/** @internal */
export type ComAtprotoModerationCreateReportRequestBody$Outbound = {
  reasonType: string;
  reason?: string | undefined;
  subject:
    | components.ComAtprotoAdminDefsRepoRef$Outbound
    | components.ComAtprotoRepoStrongRef$Outbound;
};

/** @internal */
export const ComAtprotoModerationCreateReportRequestBody$outboundSchema:
  z.ZodType<
    ComAtprotoModerationCreateReportRequestBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoModerationCreateReportRequestBody
  > = z.object({
    reasonType: z.string(),
    reason: z.string().optional(),
    subject: z.union([
      components.ComAtprotoAdminDefsRepoRef$outboundSchema,
      components.ComAtprotoRepoStrongRef$outboundSchema,
    ]),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoModerationCreateReportRequestBody$ {
  /** @deprecated use `ComAtprotoModerationCreateReportRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoModerationCreateReportRequestBody$inboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoModerationCreateReportRequestBody$outboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportRequestBody$Outbound` instead. */
  export type Outbound = ComAtprotoModerationCreateReportRequestBody$Outbound;
}

export function comAtprotoModerationCreateReportRequestBodyToJSON(
  comAtprotoModerationCreateReportRequestBody:
    ComAtprotoModerationCreateReportRequestBody,
): string {
  return JSON.stringify(
    ComAtprotoModerationCreateReportRequestBody$outboundSchema.parse(
      comAtprotoModerationCreateReportRequestBody,
    ),
  );
}

export function comAtprotoModerationCreateReportRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoModerationCreateReportRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoModerationCreateReportRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoModerationCreateReportRequestBody' from JSON`,
  );
}

/** @internal */
export const ComAtprotoModerationCreateReportComAtprotoModerationSubject$inboundSchema:
  z.ZodType<
    ComAtprotoModerationCreateReportComAtprotoModerationSubject,
    z.ZodTypeDef,
    unknown
  > = z.union([
    components.ComAtprotoAdminDefsRepoRef$inboundSchema,
    components.ComAtprotoRepoStrongRef$inboundSchema,
  ]);

/** @internal */
export type ComAtprotoModerationCreateReportComAtprotoModerationSubject$Outbound =
  | components.ComAtprotoAdminDefsRepoRef$Outbound
  | components.ComAtprotoRepoStrongRef$Outbound;

/** @internal */
export const ComAtprotoModerationCreateReportComAtprotoModerationSubject$outboundSchema:
  z.ZodType<
    ComAtprotoModerationCreateReportComAtprotoModerationSubject$Outbound,
    z.ZodTypeDef,
    ComAtprotoModerationCreateReportComAtprotoModerationSubject
  > = z.union([
    components.ComAtprotoAdminDefsRepoRef$outboundSchema,
    components.ComAtprotoRepoStrongRef$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoModerationCreateReportComAtprotoModerationSubject$ {
  /** @deprecated use `ComAtprotoModerationCreateReportComAtprotoModerationSubject$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoModerationCreateReportComAtprotoModerationSubject$inboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportComAtprotoModerationSubject$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoModerationCreateReportComAtprotoModerationSubject$outboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportComAtprotoModerationSubject$Outbound` instead. */
  export type Outbound =
    ComAtprotoModerationCreateReportComAtprotoModerationSubject$Outbound;
}

export function comAtprotoModerationCreateReportComAtprotoModerationSubjectToJSON(
  comAtprotoModerationCreateReportComAtprotoModerationSubject:
    ComAtprotoModerationCreateReportComAtprotoModerationSubject,
): string {
  return JSON.stringify(
    ComAtprotoModerationCreateReportComAtprotoModerationSubject$outboundSchema
      .parse(comAtprotoModerationCreateReportComAtprotoModerationSubject),
  );
}

export function comAtprotoModerationCreateReportComAtprotoModerationSubjectFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoModerationCreateReportComAtprotoModerationSubject,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoModerationCreateReportComAtprotoModerationSubject$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoModerationCreateReportComAtprotoModerationSubject' from JSON`,
  );
}

/** @internal */
export const ComAtprotoModerationCreateReportResponseBody$inboundSchema:
  z.ZodType<
    ComAtprotoModerationCreateReportResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number().int(),
    reasonType: z.string(),
    reason: z.string().optional(),
    subject: z.union([
      components.ComAtprotoAdminDefsRepoRef$inboundSchema,
      components.ComAtprotoRepoStrongRef$inboundSchema,
    ]),
    reportedBy: z.string(),
    createdAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
  });

/** @internal */
export type ComAtprotoModerationCreateReportResponseBody$Outbound = {
  id: number;
  reasonType: string;
  reason?: string | undefined;
  subject:
    | components.ComAtprotoAdminDefsRepoRef$Outbound
    | components.ComAtprotoRepoStrongRef$Outbound;
  reportedBy: string;
  createdAt: string;
};

/** @internal */
export const ComAtprotoModerationCreateReportResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoModerationCreateReportResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoModerationCreateReportResponseBody
  > = z.object({
    id: z.number().int(),
    reasonType: z.string(),
    reason: z.string().optional(),
    subject: z.union([
      components.ComAtprotoAdminDefsRepoRef$outboundSchema,
      components.ComAtprotoRepoStrongRef$outboundSchema,
    ]),
    reportedBy: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoModerationCreateReportResponseBody$ {
  /** @deprecated use `ComAtprotoModerationCreateReportResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoModerationCreateReportResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoModerationCreateReportResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoModerationCreateReportResponseBody$Outbound;
}

export function comAtprotoModerationCreateReportResponseBodyToJSON(
  comAtprotoModerationCreateReportResponseBody:
    ComAtprotoModerationCreateReportResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoModerationCreateReportResponseBody$outboundSchema.parse(
      comAtprotoModerationCreateReportResponseBody,
    ),
  );
}

export function comAtprotoModerationCreateReportResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoModerationCreateReportResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoModerationCreateReportResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoModerationCreateReportResponseBody' from JSON`,
  );
}
