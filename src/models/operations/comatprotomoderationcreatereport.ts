/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoModerationCreateReportSubjectRequest =
  | components.ComAtprotoRepoStrongRef
  | components.ComAtprotoAdminDefsRepoRef;

export type ComAtprotoModerationCreateReportRequest = {
  reasonType: string;
  /**
   * Additional context about the content and violation.
   */
  reason?: string | undefined;
  subject:
    | components.ComAtprotoRepoStrongRef
    | components.ComAtprotoAdminDefsRepoRef;
};

export type ComAtprotoModerationCreateReportSubjectResponse =
  | components.ComAtprotoRepoStrongRef
  | components.ComAtprotoAdminDefsRepoRef;

/**
 * OK
 */
export type ComAtprotoModerationCreateReportResponse = {
  id: number;
  reasonType: string;
  reason?: string | undefined;
  subject:
    | components.ComAtprotoRepoStrongRef
    | components.ComAtprotoAdminDefsRepoRef;
  reportedBy: string;
  createdAt: Date;
};

/** @internal */
export const ComAtprotoModerationCreateReportSubjectRequest$inboundSchema:
  z.ZodType<
    ComAtprotoModerationCreateReportSubjectRequest,
    z.ZodTypeDef,
    unknown
  > = z.union([
    components.ComAtprotoRepoStrongRef$inboundSchema,
    components.ComAtprotoAdminDefsRepoRef$inboundSchema,
  ]);

/** @internal */
export type ComAtprotoModerationCreateReportSubjectRequest$Outbound =
  | components.ComAtprotoRepoStrongRef$Outbound
  | components.ComAtprotoAdminDefsRepoRef$Outbound;

/** @internal */
export const ComAtprotoModerationCreateReportSubjectRequest$outboundSchema:
  z.ZodType<
    ComAtprotoModerationCreateReportSubjectRequest$Outbound,
    z.ZodTypeDef,
    ComAtprotoModerationCreateReportSubjectRequest
  > = z.union([
    components.ComAtprotoRepoStrongRef$outboundSchema,
    components.ComAtprotoAdminDefsRepoRef$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoModerationCreateReportSubjectRequest$ {
  /** @deprecated use `ComAtprotoModerationCreateReportSubjectRequest$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoModerationCreateReportSubjectRequest$inboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportSubjectRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoModerationCreateReportSubjectRequest$outboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportSubjectRequest$Outbound` instead. */
  export type Outbound =
    ComAtprotoModerationCreateReportSubjectRequest$Outbound;
}

export function comAtprotoModerationCreateReportSubjectRequestToJSON(
  comAtprotoModerationCreateReportSubjectRequest:
    ComAtprotoModerationCreateReportSubjectRequest,
): string {
  return JSON.stringify(
    ComAtprotoModerationCreateReportSubjectRequest$outboundSchema.parse(
      comAtprotoModerationCreateReportSubjectRequest,
    ),
  );
}

export function comAtprotoModerationCreateReportSubjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoModerationCreateReportSubjectRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoModerationCreateReportSubjectRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoModerationCreateReportSubjectRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoModerationCreateReportRequest$inboundSchema: z.ZodType<
  ComAtprotoModerationCreateReportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  reasonType: z.string(),
  reason: z.string().optional(),
  subject: z.union([
    components.ComAtprotoRepoStrongRef$inboundSchema,
    components.ComAtprotoAdminDefsRepoRef$inboundSchema,
  ]),
});

/** @internal */
export type ComAtprotoModerationCreateReportRequest$Outbound = {
  reasonType: string;
  reason?: string | undefined;
  subject:
    | components.ComAtprotoRepoStrongRef$Outbound
    | components.ComAtprotoAdminDefsRepoRef$Outbound;
};

/** @internal */
export const ComAtprotoModerationCreateReportRequest$outboundSchema: z.ZodType<
  ComAtprotoModerationCreateReportRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoModerationCreateReportRequest
> = z.object({
  reasonType: z.string(),
  reason: z.string().optional(),
  subject: z.union([
    components.ComAtprotoRepoStrongRef$outboundSchema,
    components.ComAtprotoAdminDefsRepoRef$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoModerationCreateReportRequest$ {
  /** @deprecated use `ComAtprotoModerationCreateReportRequest$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoModerationCreateReportRequest$inboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoModerationCreateReportRequest$outboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportRequest$Outbound` instead. */
  export type Outbound = ComAtprotoModerationCreateReportRequest$Outbound;
}

export function comAtprotoModerationCreateReportRequestToJSON(
  comAtprotoModerationCreateReportRequest:
    ComAtprotoModerationCreateReportRequest,
): string {
  return JSON.stringify(
    ComAtprotoModerationCreateReportRequest$outboundSchema.parse(
      comAtprotoModerationCreateReportRequest,
    ),
  );
}

export function comAtprotoModerationCreateReportRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoModerationCreateReportRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoModerationCreateReportRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoModerationCreateReportRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoModerationCreateReportSubjectResponse$inboundSchema:
  z.ZodType<
    ComAtprotoModerationCreateReportSubjectResponse,
    z.ZodTypeDef,
    unknown
  > = z.union([
    components.ComAtprotoRepoStrongRef$inboundSchema,
    components.ComAtprotoAdminDefsRepoRef$inboundSchema,
  ]);

/** @internal */
export type ComAtprotoModerationCreateReportSubjectResponse$Outbound =
  | components.ComAtprotoRepoStrongRef$Outbound
  | components.ComAtprotoAdminDefsRepoRef$Outbound;

/** @internal */
export const ComAtprotoModerationCreateReportSubjectResponse$outboundSchema:
  z.ZodType<
    ComAtprotoModerationCreateReportSubjectResponse$Outbound,
    z.ZodTypeDef,
    ComAtprotoModerationCreateReportSubjectResponse
  > = z.union([
    components.ComAtprotoRepoStrongRef$outboundSchema,
    components.ComAtprotoAdminDefsRepoRef$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoModerationCreateReportSubjectResponse$ {
  /** @deprecated use `ComAtprotoModerationCreateReportSubjectResponse$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoModerationCreateReportSubjectResponse$inboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportSubjectResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoModerationCreateReportSubjectResponse$outboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportSubjectResponse$Outbound` instead. */
  export type Outbound =
    ComAtprotoModerationCreateReportSubjectResponse$Outbound;
}

export function comAtprotoModerationCreateReportSubjectResponseToJSON(
  comAtprotoModerationCreateReportSubjectResponse:
    ComAtprotoModerationCreateReportSubjectResponse,
): string {
  return JSON.stringify(
    ComAtprotoModerationCreateReportSubjectResponse$outboundSchema.parse(
      comAtprotoModerationCreateReportSubjectResponse,
    ),
  );
}

export function comAtprotoModerationCreateReportSubjectResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoModerationCreateReportSubjectResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoModerationCreateReportSubjectResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoModerationCreateReportSubjectResponse' from JSON`,
  );
}

/** @internal */
export const ComAtprotoModerationCreateReportResponse$inboundSchema: z.ZodType<
  ComAtprotoModerationCreateReportResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  reasonType: z.string(),
  reason: z.string().optional(),
  subject: z.union([
    components.ComAtprotoRepoStrongRef$inboundSchema,
    components.ComAtprotoAdminDefsRepoRef$inboundSchema,
  ]),
  reportedBy: z.string(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type ComAtprotoModerationCreateReportResponse$Outbound = {
  id: number;
  reasonType: string;
  reason?: string | undefined;
  subject:
    | components.ComAtprotoRepoStrongRef$Outbound
    | components.ComAtprotoAdminDefsRepoRef$Outbound;
  reportedBy: string;
  createdAt: string;
};

/** @internal */
export const ComAtprotoModerationCreateReportResponse$outboundSchema: z.ZodType<
  ComAtprotoModerationCreateReportResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoModerationCreateReportResponse
> = z.object({
  id: z.number().int(),
  reasonType: z.string(),
  reason: z.string().optional(),
  subject: z.union([
    components.ComAtprotoRepoStrongRef$outboundSchema,
    components.ComAtprotoAdminDefsRepoRef$outboundSchema,
  ]),
  reportedBy: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoModerationCreateReportResponse$ {
  /** @deprecated use `ComAtprotoModerationCreateReportResponse$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoModerationCreateReportResponse$inboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoModerationCreateReportResponse$outboundSchema;
  /** @deprecated use `ComAtprotoModerationCreateReportResponse$Outbound` instead. */
  export type Outbound = ComAtprotoModerationCreateReportResponse$Outbound;
}

export function comAtprotoModerationCreateReportResponseToJSON(
  comAtprotoModerationCreateReportResponse:
    ComAtprotoModerationCreateReportResponse,
): string {
  return JSON.stringify(
    ComAtprotoModerationCreateReportResponse$outboundSchema.parse(
      comAtprotoModerationCreateReportResponse,
    ),
  );
}

export function comAtprotoModerationCreateReportResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoModerationCreateReportResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoModerationCreateReportResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoModerationCreateReportResponse' from JSON`,
  );
}
