/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoRepoCreateRecordRequestBody = {
  /**
   * The handle or DID of the repo (aka, current account).
   */
  repo: string;
  /**
   * The NSID of the record collection.
   */
  collection: string;
  /**
   * The Record Key.
   */
  rkey?: string | undefined;
  /**
   * Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.
   */
  validate?: boolean | undefined;
  record?: any | undefined;
  /**
   * Compare and swap with the previous commit by CID.
   */
  swapCommit?: string | undefined;
};

export const ValidationStatus = {
  Valid: "valid",
  Unknown: "unknown",
} as const;
export type ValidationStatus = ClosedEnum<typeof ValidationStatus>;

/**
 * OK
 */
export type ComAtprotoRepoCreateRecordResponseBody = {
  uri: string;
  cid: string;
  commit?: components.ComAtprotoRepoDefsCommitMeta | undefined;
  validationStatus?: ValidationStatus | undefined;
};

/** @internal */
export const ComAtprotoRepoCreateRecordRequestBody$inboundSchema: z.ZodType<
  ComAtprotoRepoCreateRecordRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  collection: z.string(),
  rkey: z.string().optional(),
  validate: z.boolean().optional(),
  record: z.any().optional(),
  swapCommit: z.string().optional(),
});

/** @internal */
export type ComAtprotoRepoCreateRecordRequestBody$Outbound = {
  repo: string;
  collection: string;
  rkey?: string | undefined;
  validate?: boolean | undefined;
  record?: any | undefined;
  swapCommit?: string | undefined;
};

/** @internal */
export const ComAtprotoRepoCreateRecordRequestBody$outboundSchema: z.ZodType<
  ComAtprotoRepoCreateRecordRequestBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoCreateRecordRequestBody
> = z.object({
  repo: z.string(),
  collection: z.string(),
  rkey: z.string().optional(),
  validate: z.boolean().optional(),
  record: z.any().optional(),
  swapCommit: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoCreateRecordRequestBody$ {
  /** @deprecated use `ComAtprotoRepoCreateRecordRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoCreateRecordRequestBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoCreateRecordRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoCreateRecordRequestBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoCreateRecordRequestBody$Outbound` instead. */
  export type Outbound = ComAtprotoRepoCreateRecordRequestBody$Outbound;
}

export function comAtprotoRepoCreateRecordRequestBodyToJSON(
  comAtprotoRepoCreateRecordRequestBody: ComAtprotoRepoCreateRecordRequestBody,
): string {
  return JSON.stringify(
    ComAtprotoRepoCreateRecordRequestBody$outboundSchema.parse(
      comAtprotoRepoCreateRecordRequestBody,
    ),
  );
}

export function comAtprotoRepoCreateRecordRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoCreateRecordRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoRepoCreateRecordRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoCreateRecordRequestBody' from JSON`,
  );
}

/** @internal */
export const ValidationStatus$inboundSchema: z.ZodNativeEnum<
  typeof ValidationStatus
> = z.nativeEnum(ValidationStatus);

/** @internal */
export const ValidationStatus$outboundSchema: z.ZodNativeEnum<
  typeof ValidationStatus
> = ValidationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidationStatus$ {
  /** @deprecated use `ValidationStatus$inboundSchema` instead. */
  export const inboundSchema = ValidationStatus$inboundSchema;
  /** @deprecated use `ValidationStatus$outboundSchema` instead. */
  export const outboundSchema = ValidationStatus$outboundSchema;
}

/** @internal */
export const ComAtprotoRepoCreateRecordResponseBody$inboundSchema: z.ZodType<
  ComAtprotoRepoCreateRecordResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  cid: z.string(),
  commit: components.ComAtprotoRepoDefsCommitMeta$inboundSchema.optional(),
  validationStatus: ValidationStatus$inboundSchema.optional(),
});

/** @internal */
export type ComAtprotoRepoCreateRecordResponseBody$Outbound = {
  uri: string;
  cid: string;
  commit?: components.ComAtprotoRepoDefsCommitMeta$Outbound | undefined;
  validationStatus?: string | undefined;
};

/** @internal */
export const ComAtprotoRepoCreateRecordResponseBody$outboundSchema: z.ZodType<
  ComAtprotoRepoCreateRecordResponseBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoCreateRecordResponseBody
> = z.object({
  uri: z.string(),
  cid: z.string(),
  commit: components.ComAtprotoRepoDefsCommitMeta$outboundSchema.optional(),
  validationStatus: ValidationStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoCreateRecordResponseBody$ {
  /** @deprecated use `ComAtprotoRepoCreateRecordResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoCreateRecordResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoRepoCreateRecordResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoCreateRecordResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoRepoCreateRecordResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoRepoCreateRecordResponseBody$Outbound;
}

export function comAtprotoRepoCreateRecordResponseBodyToJSON(
  comAtprotoRepoCreateRecordResponseBody:
    ComAtprotoRepoCreateRecordResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoRepoCreateRecordResponseBody$outboundSchema.parse(
      comAtprotoRepoCreateRecordResponseBody,
    ),
  );
}

export function comAtprotoRepoCreateRecordResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoCreateRecordResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoRepoCreateRecordResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoCreateRecordResponseBody' from JSON`,
  );
}
