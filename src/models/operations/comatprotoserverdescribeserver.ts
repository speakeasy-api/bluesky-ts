/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type ComAtprotoServerDescribeServerResponseBody = {
  /**
   * If true, an invite code must be supplied to create an account on this instance.
   */
  inviteCodeRequired?: boolean | undefined;
  /**
   * If true, a phone verification token must be supplied to create an account on this instance.
   */
  phoneVerificationRequired?: boolean | undefined;
  availableUserDomains: Array<string>;
  links?: components.ComAtprotoServerDescribeServerLinks | undefined;
  contact?: components.ComAtprotoServerDescribeServerContact | undefined;
  did: string;
};

/** @internal */
export const ComAtprotoServerDescribeServerResponseBody$inboundSchema:
  z.ZodType<ComAtprotoServerDescribeServerResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      inviteCodeRequired: z.boolean().optional(),
      phoneVerificationRequired: z.boolean().optional(),
      availableUserDomains: z.array(z.string()),
      links: components.ComAtprotoServerDescribeServerLinks$inboundSchema
        .optional(),
      contact: components.ComAtprotoServerDescribeServerContact$inboundSchema
        .optional(),
      did: z.string(),
    });

/** @internal */
export type ComAtprotoServerDescribeServerResponseBody$Outbound = {
  inviteCodeRequired?: boolean | undefined;
  phoneVerificationRequired?: boolean | undefined;
  availableUserDomains: Array<string>;
  links?: components.ComAtprotoServerDescribeServerLinks$Outbound | undefined;
  contact?:
    | components.ComAtprotoServerDescribeServerContact$Outbound
    | undefined;
  did: string;
};

/** @internal */
export const ComAtprotoServerDescribeServerResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoServerDescribeServerResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerDescribeServerResponseBody
  > = z.object({
    inviteCodeRequired: z.boolean().optional(),
    phoneVerificationRequired: z.boolean().optional(),
    availableUserDomains: z.array(z.string()),
    links: components.ComAtprotoServerDescribeServerLinks$outboundSchema
      .optional(),
    contact: components.ComAtprotoServerDescribeServerContact$outboundSchema
      .optional(),
    did: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDescribeServerResponseBody$ {
  /** @deprecated use `ComAtprotoServerDescribeServerResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerDescribeServerResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoServerDescribeServerResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDescribeServerResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoServerDescribeServerResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoServerDescribeServerResponseBody$Outbound;
}

export function comAtprotoServerDescribeServerResponseBodyToJSON(
  comAtprotoServerDescribeServerResponseBody:
    ComAtprotoServerDescribeServerResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoServerDescribeServerResponseBody$outboundSchema.parse(
      comAtprotoServerDescribeServerResponseBody,
    ),
  );
}

export function comAtprotoServerDescribeServerResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerDescribeServerResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerDescribeServerResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerDescribeServerResponseBody' from JSON`,
  );
}
