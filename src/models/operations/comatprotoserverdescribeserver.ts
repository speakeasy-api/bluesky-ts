/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type ComAtprotoServerDescribeServerResponse = {
  /**
   * If true, an invite code must be supplied to create an account on this instance.
   */
  inviteCodeRequired?: boolean | undefined;
  /**
   * If true, a phone verification token must be supplied to create an account on this instance.
   */
  phoneVerificationRequired?: boolean | undefined;
  availableUserDomains: Array<string>;
  links?: components.ComAtprotoServerDescribeServerLinks | undefined;
  contact?: components.ComAtprotoServerDescribeServerContact | undefined;
  did: string;
};

/** @internal */
export const ComAtprotoServerDescribeServerResponse$inboundSchema: z.ZodType<
  ComAtprotoServerDescribeServerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  inviteCodeRequired: z.boolean().optional(),
  phoneVerificationRequired: z.boolean().optional(),
  availableUserDomains: z.array(z.string()),
  links: components.ComAtprotoServerDescribeServerLinks$inboundSchema
    .optional(),
  contact: components.ComAtprotoServerDescribeServerContact$inboundSchema
    .optional(),
  did: z.string(),
});

/** @internal */
export type ComAtprotoServerDescribeServerResponse$Outbound = {
  inviteCodeRequired?: boolean | undefined;
  phoneVerificationRequired?: boolean | undefined;
  availableUserDomains: Array<string>;
  links?: components.ComAtprotoServerDescribeServerLinks$Outbound | undefined;
  contact?:
    | components.ComAtprotoServerDescribeServerContact$Outbound
    | undefined;
  did: string;
};

/** @internal */
export const ComAtprotoServerDescribeServerResponse$outboundSchema: z.ZodType<
  ComAtprotoServerDescribeServerResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerDescribeServerResponse
> = z.object({
  inviteCodeRequired: z.boolean().optional(),
  phoneVerificationRequired: z.boolean().optional(),
  availableUserDomains: z.array(z.string()),
  links: components.ComAtprotoServerDescribeServerLinks$outboundSchema
    .optional(),
  contact: components.ComAtprotoServerDescribeServerContact$outboundSchema
    .optional(),
  did: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDescribeServerResponse$ {
  /** @deprecated use `ComAtprotoServerDescribeServerResponse$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerDescribeServerResponse$inboundSchema;
  /** @deprecated use `ComAtprotoServerDescribeServerResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDescribeServerResponse$outboundSchema;
  /** @deprecated use `ComAtprotoServerDescribeServerResponse$Outbound` instead. */
  export type Outbound = ComAtprotoServerDescribeServerResponse$Outbound;
}

export function comAtprotoServerDescribeServerResponseToJSON(
  comAtprotoServerDescribeServerResponse:
    ComAtprotoServerDescribeServerResponse,
): string {
  return JSON.stringify(
    ComAtprotoServerDescribeServerResponse$outboundSchema.parse(
      comAtprotoServerDescribeServerResponse,
    ),
  );
}

export function comAtprotoServerDescribeServerResponseFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoServerDescribeServerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerDescribeServerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoServerDescribeServerResponse' from JSON`,
  );
}
