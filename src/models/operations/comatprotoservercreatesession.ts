/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoServerCreateSessionRequestBody = {
  /**
   * Handle or other identifier supported by the server for the authenticating user.
   */
  identifier: string;
  password: string;
  authFactorToken?: string | undefined;
};

/**
 * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
 */
export const Status = {
  Takendown: "takendown",
  Suspended: "suspended",
  Deactivated: "deactivated",
} as const;
/**
 * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * OK
 */
export type ComAtprotoServerCreateSessionResponseBody = {
  accessJwt: string;
  refreshJwt: string;
  handle: string;
  did: string;
  didDoc?: any | undefined;
  email?: string | undefined;
  emailConfirmed?: boolean | undefined;
  emailAuthFactor?: boolean | undefined;
  active?: boolean | undefined;
  /**
   * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
   */
  status?: Status | undefined;
};

/** @internal */
export const ComAtprotoServerCreateSessionRequestBody$inboundSchema: z.ZodType<
  ComAtprotoServerCreateSessionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  password: z.string(),
  authFactorToken: z.string().optional(),
});

/** @internal */
export type ComAtprotoServerCreateSessionRequestBody$Outbound = {
  identifier: string;
  password: string;
  authFactorToken?: string | undefined;
};

/** @internal */
export const ComAtprotoServerCreateSessionRequestBody$outboundSchema: z.ZodType<
  ComAtprotoServerCreateSessionRequestBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerCreateSessionRequestBody
> = z.object({
  identifier: z.string(),
  password: z.string(),
  authFactorToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateSessionRequestBody$ {
  /** @deprecated use `ComAtprotoServerCreateSessionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateSessionRequestBody$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateSessionRequestBody$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionRequestBody$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateSessionRequestBody$Outbound;
}

export function comAtprotoServerCreateSessionRequestBodyToJSON(
  comAtprotoServerCreateSessionRequestBody:
    ComAtprotoServerCreateSessionRequestBody,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateSessionRequestBody$outboundSchema.parse(
      comAtprotoServerCreateSessionRequestBody,
    ),
  );
}

export function comAtprotoServerCreateSessionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerCreateSessionRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateSessionRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerCreateSessionRequestBody' from JSON`,
  );
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const ComAtprotoServerCreateSessionResponseBody$inboundSchema: z.ZodType<
  ComAtprotoServerCreateSessionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessJwt: z.string(),
  refreshJwt: z.string(),
  handle: z.string(),
  did: z.string(),
  didDoc: z.any().optional(),
  email: z.string().optional(),
  emailConfirmed: z.boolean().optional(),
  emailAuthFactor: z.boolean().optional(),
  active: z.boolean().optional(),
  status: Status$inboundSchema.optional(),
});

/** @internal */
export type ComAtprotoServerCreateSessionResponseBody$Outbound = {
  accessJwt: string;
  refreshJwt: string;
  handle: string;
  did: string;
  didDoc?: any | undefined;
  email?: string | undefined;
  emailConfirmed?: boolean | undefined;
  emailAuthFactor?: boolean | undefined;
  active?: boolean | undefined;
  status?: string | undefined;
};

/** @internal */
export const ComAtprotoServerCreateSessionResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoServerCreateSessionResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerCreateSessionResponseBody
  > = z.object({
    accessJwt: z.string(),
    refreshJwt: z.string(),
    handle: z.string(),
    did: z.string(),
    didDoc: z.any().optional(),
    email: z.string().optional(),
    emailConfirmed: z.boolean().optional(),
    emailAuthFactor: z.boolean().optional(),
    active: z.boolean().optional(),
    status: Status$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateSessionResponseBody$ {
  /** @deprecated use `ComAtprotoServerCreateSessionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateSessionResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateSessionResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateSessionResponseBody$Outbound;
}

export function comAtprotoServerCreateSessionResponseBodyToJSON(
  comAtprotoServerCreateSessionResponseBody:
    ComAtprotoServerCreateSessionResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateSessionResponseBody$outboundSchema.parse(
      comAtprotoServerCreateSessionResponseBody,
    ),
  );
}

export function comAtprotoServerCreateSessionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerCreateSessionResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateSessionResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerCreateSessionResponseBody' from JSON`,
  );
}
