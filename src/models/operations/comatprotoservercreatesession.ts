/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoServerCreateSessionRequest = {
  /**
   * Handle or other identifier supported by the server for the authenticating user.
   */
  identifier: string;
  password: string;
  authFactorToken?: string | undefined;
};

/**
 * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
 */
export const ComAtprotoServerCreateSessionStatus = {
  Takendown: "takendown",
  Suspended: "suspended",
  Deactivated: "deactivated",
} as const;
/**
 * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
 */
export type ComAtprotoServerCreateSessionStatus = ClosedEnum<
  typeof ComAtprotoServerCreateSessionStatus
>;

/**
 * OK
 */
export type ComAtprotoServerCreateSessionResponse = {
  accessJwt: string;
  refreshJwt: string;
  handle: string;
  did: string;
  didDoc?: any | undefined;
  email?: string | undefined;
  emailConfirmed?: boolean | undefined;
  emailAuthFactor?: boolean | undefined;
  active?: boolean | undefined;
  /**
   * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
   */
  status?: ComAtprotoServerCreateSessionStatus | undefined;
};

/** @internal */
export const ComAtprotoServerCreateSessionRequest$inboundSchema: z.ZodType<
  ComAtprotoServerCreateSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string(),
  password: z.string(),
  authFactorToken: z.string().optional(),
});

/** @internal */
export type ComAtprotoServerCreateSessionRequest$Outbound = {
  identifier: string;
  password: string;
  authFactorToken?: string | undefined;
};

/** @internal */
export const ComAtprotoServerCreateSessionRequest$outboundSchema: z.ZodType<
  ComAtprotoServerCreateSessionRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerCreateSessionRequest
> = z.object({
  identifier: z.string(),
  password: z.string(),
  authFactorToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateSessionRequest$ {
  /** @deprecated use `ComAtprotoServerCreateSessionRequest$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateSessionRequest$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateSessionRequest$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionRequest$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateSessionRequest$Outbound;
}

export function comAtprotoServerCreateSessionRequestToJSON(
  comAtprotoServerCreateSessionRequest: ComAtprotoServerCreateSessionRequest,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateSessionRequest$outboundSchema.parse(
      comAtprotoServerCreateSessionRequest,
    ),
  );
}

export function comAtprotoServerCreateSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoServerCreateSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoServerCreateSessionRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoServerCreateSessionStatus$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoServerCreateSessionStatus
> = z.nativeEnum(ComAtprotoServerCreateSessionStatus);

/** @internal */
export const ComAtprotoServerCreateSessionStatus$outboundSchema:
  z.ZodNativeEnum<typeof ComAtprotoServerCreateSessionStatus> =
    ComAtprotoServerCreateSessionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateSessionStatus$ {
  /** @deprecated use `ComAtprotoServerCreateSessionStatus$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateSessionStatus$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionStatus$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateSessionStatus$outboundSchema;
}

/** @internal */
export const ComAtprotoServerCreateSessionResponse$inboundSchema: z.ZodType<
  ComAtprotoServerCreateSessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessJwt: z.string(),
  refreshJwt: z.string(),
  handle: z.string(),
  did: z.string(),
  didDoc: z.any().optional(),
  email: z.string().optional(),
  emailConfirmed: z.boolean().optional(),
  emailAuthFactor: z.boolean().optional(),
  active: z.boolean().optional(),
  status: ComAtprotoServerCreateSessionStatus$inboundSchema.optional(),
});

/** @internal */
export type ComAtprotoServerCreateSessionResponse$Outbound = {
  accessJwt: string;
  refreshJwt: string;
  handle: string;
  did: string;
  didDoc?: any | undefined;
  email?: string | undefined;
  emailConfirmed?: boolean | undefined;
  emailAuthFactor?: boolean | undefined;
  active?: boolean | undefined;
  status?: string | undefined;
};

/** @internal */
export const ComAtprotoServerCreateSessionResponse$outboundSchema: z.ZodType<
  ComAtprotoServerCreateSessionResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerCreateSessionResponse
> = z.object({
  accessJwt: z.string(),
  refreshJwt: z.string(),
  handle: z.string(),
  did: z.string(),
  didDoc: z.any().optional(),
  email: z.string().optional(),
  emailConfirmed: z.boolean().optional(),
  emailAuthFactor: z.boolean().optional(),
  active: z.boolean().optional(),
  status: ComAtprotoServerCreateSessionStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateSessionResponse$ {
  /** @deprecated use `ComAtprotoServerCreateSessionResponse$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateSessionResponse$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateSessionResponse$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateSessionResponse$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateSessionResponse$Outbound;
}

export function comAtprotoServerCreateSessionResponseToJSON(
  comAtprotoServerCreateSessionResponse: ComAtprotoServerCreateSessionResponse,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateSessionResponse$outboundSchema.parse(
      comAtprotoServerCreateSessionResponse,
    ),
  );
}

export function comAtprotoServerCreateSessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoServerCreateSessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateSessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoServerCreateSessionResponse' from JSON`,
  );
}
