/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoRepoGetRecordRequest = {
  /**
   * The handle or DID of the repo.
   */
  repo: string;
  /**
   * The NSID of the record collection.
   */
  collection: string;
  /**
   * The Record Key.
   */
  rkey: string;
  /**
   * The CID of the version of the record. If not specified, then return the most recent version.
   */
  cid?: string | undefined;
};

/**
 * OK
 */
export type ComAtprotoRepoGetRecordResponse = {
  uri: string;
  cid?: string | undefined;
  value?: any | undefined;
};

/** @internal */
export const ComAtprotoRepoGetRecordRequest$inboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  repo: z.string(),
  collection: z.string(),
  rkey: z.string(),
  cid: z.string().optional(),
});

/** @internal */
export type ComAtprotoRepoGetRecordRequest$Outbound = {
  repo: string;
  collection: string;
  rkey: string;
  cid?: string | undefined;
};

/** @internal */
export const ComAtprotoRepoGetRecordRequest$outboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoGetRecordRequest
> = z.object({
  repo: z.string(),
  collection: z.string(),
  rkey: z.string(),
  cid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoGetRecordRequest$ {
  /** @deprecated use `ComAtprotoRepoGetRecordRequest$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoGetRecordRequest$inboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordRequest$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoGetRecordRequest$outboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordRequest$Outbound` instead. */
  export type Outbound = ComAtprotoRepoGetRecordRequest$Outbound;
}

export function comAtprotoRepoGetRecordRequestToJSON(
  comAtprotoRepoGetRecordRequest: ComAtprotoRepoGetRecordRequest,
): string {
  return JSON.stringify(
    ComAtprotoRepoGetRecordRequest$outboundSchema.parse(
      comAtprotoRepoGetRecordRequest,
    ),
  );
}

export function comAtprotoRepoGetRecordRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoGetRecordRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoGetRecordRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoGetRecordRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoRepoGetRecordResponse$inboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  cid: z.string().optional(),
  value: z.any().optional(),
});

/** @internal */
export type ComAtprotoRepoGetRecordResponse$Outbound = {
  uri: string;
  cid?: string | undefined;
  value?: any | undefined;
};

/** @internal */
export const ComAtprotoRepoGetRecordResponse$outboundSchema: z.ZodType<
  ComAtprotoRepoGetRecordResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoGetRecordResponse
> = z.object({
  uri: z.string(),
  cid: z.string().optional(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoGetRecordResponse$ {
  /** @deprecated use `ComAtprotoRepoGetRecordResponse$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoGetRecordResponse$inboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordResponse$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoGetRecordResponse$outboundSchema;
  /** @deprecated use `ComAtprotoRepoGetRecordResponse$Outbound` instead. */
  export type Outbound = ComAtprotoRepoGetRecordResponse$Outbound;
}

export function comAtprotoRepoGetRecordResponseToJSON(
  comAtprotoRepoGetRecordResponse: ComAtprotoRepoGetRecordResponse,
): string {
  return JSON.stringify(
    ComAtprotoRepoGetRecordResponse$outboundSchema.parse(
      comAtprotoRepoGetRecordResponse,
    ),
  );
}

export function comAtprotoRepoGetRecordResponseFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoGetRecordResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoGetRecordResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoGetRecordResponse' from JSON`,
  );
}
