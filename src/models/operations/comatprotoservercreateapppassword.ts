/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoServerCreateAppPasswordRequestBody = {
  /**
   * A short name for the App Password, to help distinguish them.
   */
  name: string;
  /**
   * If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients.
   */
  privileged?: boolean | undefined;
};

/** @internal */
export const ComAtprotoServerCreateAppPasswordRequestBody$inboundSchema:
  z.ZodType<
    ComAtprotoServerCreateAppPasswordRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    privileged: z.boolean().optional(),
  });

/** @internal */
export type ComAtprotoServerCreateAppPasswordRequestBody$Outbound = {
  name: string;
  privileged?: boolean | undefined;
};

/** @internal */
export const ComAtprotoServerCreateAppPasswordRequestBody$outboundSchema:
  z.ZodType<
    ComAtprotoServerCreateAppPasswordRequestBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerCreateAppPasswordRequestBody
  > = z.object({
    name: z.string(),
    privileged: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateAppPasswordRequestBody$ {
  /** @deprecated use `ComAtprotoServerCreateAppPasswordRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateAppPasswordRequestBody$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAppPasswordRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateAppPasswordRequestBody$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAppPasswordRequestBody$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateAppPasswordRequestBody$Outbound;
}

export function comAtprotoServerCreateAppPasswordRequestBodyToJSON(
  comAtprotoServerCreateAppPasswordRequestBody:
    ComAtprotoServerCreateAppPasswordRequestBody,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateAppPasswordRequestBody$outboundSchema.parse(
      comAtprotoServerCreateAppPasswordRequestBody,
    ),
  );
}

export function comAtprotoServerCreateAppPasswordRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerCreateAppPasswordRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateAppPasswordRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerCreateAppPasswordRequestBody' from JSON`,
  );
}
