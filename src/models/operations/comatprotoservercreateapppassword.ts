/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoServerCreateAppPasswordBody = {
  /**
   * A short name for the App Password, to help distinguish them.
   */
  name: string;
  /**
   * If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients.
   */
  privileged?: boolean | undefined;
};

/** @internal */
export const ComAtprotoServerCreateAppPasswordBody$inboundSchema: z.ZodType<
  ComAtprotoServerCreateAppPasswordBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  privileged: z.boolean().optional(),
});

/** @internal */
export type ComAtprotoServerCreateAppPasswordBody$Outbound = {
  name: string;
  privileged?: boolean | undefined;
};

/** @internal */
export const ComAtprotoServerCreateAppPasswordBody$outboundSchema: z.ZodType<
  ComAtprotoServerCreateAppPasswordBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerCreateAppPasswordBody
> = z.object({
  name: z.string(),
  privileged: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateAppPasswordBody$ {
  /** @deprecated use `ComAtprotoServerCreateAppPasswordBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateAppPasswordBody$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAppPasswordBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateAppPasswordBody$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAppPasswordBody$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateAppPasswordBody$Outbound;
}

export function comAtprotoServerCreateAppPasswordBodyToJSON(
  comAtprotoServerCreateAppPasswordBody: ComAtprotoServerCreateAppPasswordBody,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateAppPasswordBody$outboundSchema.parse(
      comAtprotoServerCreateAppPasswordBody,
    ),
  );
}

export function comAtprotoServerCreateAppPasswordBodyFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoServerCreateAppPasswordBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateAppPasswordBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoServerCreateAppPasswordBody' from JSON`,
  );
}
