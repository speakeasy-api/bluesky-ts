/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoServerCreateAccountRequestBody = {
  email?: string | undefined;
  /**
   * Requested handle for the account.
   */
  handle: string;
  /**
   * Pre-existing atproto DID, being imported to a new account.
   */
  did?: string | undefined;
  inviteCode?: string | undefined;
  verificationCode?: string | undefined;
  verificationPhone?: string | undefined;
  /**
   * Initial account password. May need to meet instance-specific password strength requirements.
   */
  password?: string | undefined;
  /**
   * DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.
   */
  recoveryKey?: string | undefined;
  plcOp?: any | undefined;
};

/**
 * Account login session returned on successful account creation.
 */
export type ComAtprotoServerCreateAccountResponseBody = {
  accessJwt: string;
  refreshJwt: string;
  handle: string;
  /**
   * The DID of the new account.
   */
  did: string;
  didDoc?: any | undefined;
};

/** @internal */
export const ComAtprotoServerCreateAccountRequestBody$inboundSchema: z.ZodType<
  ComAtprotoServerCreateAccountRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  handle: z.string(),
  did: z.string().optional(),
  inviteCode: z.string().optional(),
  verificationCode: z.string().optional(),
  verificationPhone: z.string().optional(),
  password: z.string().optional(),
  recoveryKey: z.string().optional(),
  plcOp: z.any().optional(),
});

/** @internal */
export type ComAtprotoServerCreateAccountRequestBody$Outbound = {
  email?: string | undefined;
  handle: string;
  did?: string | undefined;
  inviteCode?: string | undefined;
  verificationCode?: string | undefined;
  verificationPhone?: string | undefined;
  password?: string | undefined;
  recoveryKey?: string | undefined;
  plcOp?: any | undefined;
};

/** @internal */
export const ComAtprotoServerCreateAccountRequestBody$outboundSchema: z.ZodType<
  ComAtprotoServerCreateAccountRequestBody$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerCreateAccountRequestBody
> = z.object({
  email: z.string().optional(),
  handle: z.string(),
  did: z.string().optional(),
  inviteCode: z.string().optional(),
  verificationCode: z.string().optional(),
  verificationPhone: z.string().optional(),
  password: z.string().optional(),
  recoveryKey: z.string().optional(),
  plcOp: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateAccountRequestBody$ {
  /** @deprecated use `ComAtprotoServerCreateAccountRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateAccountRequestBody$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAccountRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateAccountRequestBody$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAccountRequestBody$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateAccountRequestBody$Outbound;
}

export function comAtprotoServerCreateAccountRequestBodyToJSON(
  comAtprotoServerCreateAccountRequestBody:
    ComAtprotoServerCreateAccountRequestBody,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateAccountRequestBody$outboundSchema.parse(
      comAtprotoServerCreateAccountRequestBody,
    ),
  );
}

export function comAtprotoServerCreateAccountRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerCreateAccountRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateAccountRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerCreateAccountRequestBody' from JSON`,
  );
}

/** @internal */
export const ComAtprotoServerCreateAccountResponseBody$inboundSchema: z.ZodType<
  ComAtprotoServerCreateAccountResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessJwt: z.string(),
  refreshJwt: z.string(),
  handle: z.string(),
  did: z.string(),
  didDoc: z.any().optional(),
});

/** @internal */
export type ComAtprotoServerCreateAccountResponseBody$Outbound = {
  accessJwt: string;
  refreshJwt: string;
  handle: string;
  did: string;
  didDoc?: any | undefined;
};

/** @internal */
export const ComAtprotoServerCreateAccountResponseBody$outboundSchema:
  z.ZodType<
    ComAtprotoServerCreateAccountResponseBody$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerCreateAccountResponseBody
  > = z.object({
    accessJwt: z.string(),
    refreshJwt: z.string(),
    handle: z.string(),
    did: z.string(),
    didDoc: z.any().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerCreateAccountResponseBody$ {
  /** @deprecated use `ComAtprotoServerCreateAccountResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerCreateAccountResponseBody$inboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAccountResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerCreateAccountResponseBody$outboundSchema;
  /** @deprecated use `ComAtprotoServerCreateAccountResponseBody$Outbound` instead. */
  export type Outbound = ComAtprotoServerCreateAccountResponseBody$Outbound;
}

export function comAtprotoServerCreateAccountResponseBodyToJSON(
  comAtprotoServerCreateAccountResponseBody:
    ComAtprotoServerCreateAccountResponseBody,
): string {
  return JSON.stringify(
    ComAtprotoServerCreateAccountResponseBody$outboundSchema.parse(
      comAtprotoServerCreateAccountResponseBody,
    ),
  );
}

export function comAtprotoServerCreateAccountResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerCreateAccountResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerCreateAccountResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerCreateAccountResponseBody' from JSON`,
  );
}
