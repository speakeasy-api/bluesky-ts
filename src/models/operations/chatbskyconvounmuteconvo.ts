/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChatBskyConvoUnmuteConvoRequest = {
  convoId: string;
};

/**
 * OK
 */
export type ChatBskyConvoUnmuteConvoResponse = {
  convo: components.ChatBskyConvoDefsConvoView;
};

/** @internal */
export const ChatBskyConvoUnmuteConvoRequest$inboundSchema: z.ZodType<
  ChatBskyConvoUnmuteConvoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  convoId: z.string(),
});

/** @internal */
export type ChatBskyConvoUnmuteConvoRequest$Outbound = {
  convoId: string;
};

/** @internal */
export const ChatBskyConvoUnmuteConvoRequest$outboundSchema: z.ZodType<
  ChatBskyConvoUnmuteConvoRequest$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUnmuteConvoRequest
> = z.object({
  convoId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUnmuteConvoRequest$ {
  /** @deprecated use `ChatBskyConvoUnmuteConvoRequest$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoUnmuteConvoRequest$inboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoRequest$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoUnmuteConvoRequest$outboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoRequest$Outbound` instead. */
  export type Outbound = ChatBskyConvoUnmuteConvoRequest$Outbound;
}

export function chatBskyConvoUnmuteConvoRequestToJSON(
  chatBskyConvoUnmuteConvoRequest: ChatBskyConvoUnmuteConvoRequest,
): string {
  return JSON.stringify(
    ChatBskyConvoUnmuteConvoRequest$outboundSchema.parse(
      chatBskyConvoUnmuteConvoRequest,
    ),
  );
}

export function chatBskyConvoUnmuteConvoRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoUnmuteConvoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoUnmuteConvoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoUnmuteConvoRequest' from JSON`,
  );
}

/** @internal */
export const ChatBskyConvoUnmuteConvoResponse$inboundSchema: z.ZodType<
  ChatBskyConvoUnmuteConvoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  convo: components.ChatBskyConvoDefsConvoView$inboundSchema,
});

/** @internal */
export type ChatBskyConvoUnmuteConvoResponse$Outbound = {
  convo: components.ChatBskyConvoDefsConvoView$Outbound;
};

/** @internal */
export const ChatBskyConvoUnmuteConvoResponse$outboundSchema: z.ZodType<
  ChatBskyConvoUnmuteConvoResponse$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoUnmuteConvoResponse
> = z.object({
  convo: components.ChatBskyConvoDefsConvoView$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoUnmuteConvoResponse$ {
  /** @deprecated use `ChatBskyConvoUnmuteConvoResponse$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoUnmuteConvoResponse$inboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoResponse$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoUnmuteConvoResponse$outboundSchema;
  /** @deprecated use `ChatBskyConvoUnmuteConvoResponse$Outbound` instead. */
  export type Outbound = ChatBskyConvoUnmuteConvoResponse$Outbound;
}

export function chatBskyConvoUnmuteConvoResponseToJSON(
  chatBskyConvoUnmuteConvoResponse: ChatBskyConvoUnmuteConvoResponse,
): string {
  return JSON.stringify(
    ChatBskyConvoUnmuteConvoResponse$outboundSchema.parse(
      chatBskyConvoUnmuteConvoResponse,
    ),
  );
}

export function chatBskyConvoUnmuteConvoResponseFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoUnmuteConvoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoUnmuteConvoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoUnmuteConvoResponse' from JSON`,
  );
}
