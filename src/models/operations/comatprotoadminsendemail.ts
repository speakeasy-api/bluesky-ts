/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoAdminSendEmailRequest = {
  recipientDid: string;
  content: string;
  subject?: string | undefined;
  senderDid: string;
  /**
   * Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers
   */
  comment?: string | undefined;
};

/**
 * OK
 */
export type ComAtprotoAdminSendEmailResponse = {
  sent: boolean;
};

/** @internal */
export const ComAtprotoAdminSendEmailRequest$inboundSchema: z.ZodType<
  ComAtprotoAdminSendEmailRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientDid: z.string(),
  content: z.string(),
  subject: z.string().optional(),
  senderDid: z.string(),
  comment: z.string().optional(),
});

/** @internal */
export type ComAtprotoAdminSendEmailRequest$Outbound = {
  recipientDid: string;
  content: string;
  subject?: string | undefined;
  senderDid: string;
  comment?: string | undefined;
};

/** @internal */
export const ComAtprotoAdminSendEmailRequest$outboundSchema: z.ZodType<
  ComAtprotoAdminSendEmailRequest$Outbound,
  z.ZodTypeDef,
  ComAtprotoAdminSendEmailRequest
> = z.object({
  recipientDid: z.string(),
  content: z.string(),
  subject: z.string().optional(),
  senderDid: z.string(),
  comment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoAdminSendEmailRequest$ {
  /** @deprecated use `ComAtprotoAdminSendEmailRequest$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoAdminSendEmailRequest$inboundSchema;
  /** @deprecated use `ComAtprotoAdminSendEmailRequest$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoAdminSendEmailRequest$outboundSchema;
  /** @deprecated use `ComAtprotoAdminSendEmailRequest$Outbound` instead. */
  export type Outbound = ComAtprotoAdminSendEmailRequest$Outbound;
}

export function comAtprotoAdminSendEmailRequestToJSON(
  comAtprotoAdminSendEmailRequest: ComAtprotoAdminSendEmailRequest,
): string {
  return JSON.stringify(
    ComAtprotoAdminSendEmailRequest$outboundSchema.parse(
      comAtprotoAdminSendEmailRequest,
    ),
  );
}

export function comAtprotoAdminSendEmailRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoAdminSendEmailRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoAdminSendEmailRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoAdminSendEmailRequest' from JSON`,
  );
}

/** @internal */
export const ComAtprotoAdminSendEmailResponse$inboundSchema: z.ZodType<
  ComAtprotoAdminSendEmailResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sent: z.boolean(),
});

/** @internal */
export type ComAtprotoAdminSendEmailResponse$Outbound = {
  sent: boolean;
};

/** @internal */
export const ComAtprotoAdminSendEmailResponse$outboundSchema: z.ZodType<
  ComAtprotoAdminSendEmailResponse$Outbound,
  z.ZodTypeDef,
  ComAtprotoAdminSendEmailResponse
> = z.object({
  sent: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoAdminSendEmailResponse$ {
  /** @deprecated use `ComAtprotoAdminSendEmailResponse$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoAdminSendEmailResponse$inboundSchema;
  /** @deprecated use `ComAtprotoAdminSendEmailResponse$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoAdminSendEmailResponse$outboundSchema;
  /** @deprecated use `ComAtprotoAdminSendEmailResponse$Outbound` instead. */
  export type Outbound = ComAtprotoAdminSendEmailResponse$Outbound;
}

export function comAtprotoAdminSendEmailResponseToJSON(
  comAtprotoAdminSendEmailResponse: ComAtprotoAdminSendEmailResponse,
): string {
  return JSON.stringify(
    ComAtprotoAdminSendEmailResponse$outboundSchema.parse(
      comAtprotoAdminSendEmailResponse,
    ),
  );
}

export function comAtprotoAdminSendEmailResponseFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoAdminSendEmailResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoAdminSendEmailResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoAdminSendEmailResponse' from JSON`,
  );
}
