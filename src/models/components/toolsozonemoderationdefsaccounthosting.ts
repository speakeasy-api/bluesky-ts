/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ToolsOzoneModerationDefsAccountHostingStatus = {
  Takendown: "takendown",
  Suspended: "suspended",
  Deleted: "deleted",
  Deactivated: "deactivated",
  Unknown: "unknown",
} as const;
export type ToolsOzoneModerationDefsAccountHostingStatus = ClosedEnum<
  typeof ToolsOzoneModerationDefsAccountHostingStatus
>;

export type ToolsOzoneModerationDefsAccountHosting = {
  status: ToolsOzoneModerationDefsAccountHostingStatus;
  updatedAt?: Date | undefined;
  createdAt?: Date | undefined;
  deletedAt?: Date | undefined;
  deactivatedAt?: Date | undefined;
  reactivatedAt?: Date | undefined;
};

/** @internal */
export const ToolsOzoneModerationDefsAccountHostingStatus$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneModerationDefsAccountHostingStatus> = z
    .nativeEnum(ToolsOzoneModerationDefsAccountHostingStatus);

/** @internal */
export const ToolsOzoneModerationDefsAccountHostingStatus$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneModerationDefsAccountHostingStatus> =
    ToolsOzoneModerationDefsAccountHostingStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsAccountHostingStatus$ {
  /** @deprecated use `ToolsOzoneModerationDefsAccountHostingStatus$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationDefsAccountHostingStatus$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsAccountHostingStatus$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationDefsAccountHostingStatus$outboundSchema;
}

/** @internal */
export const ToolsOzoneModerationDefsAccountHosting$inboundSchema: z.ZodType<
  ToolsOzoneModerationDefsAccountHosting,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: ToolsOzoneModerationDefsAccountHostingStatus$inboundSchema,
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deactivatedAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  reactivatedAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
});

/** @internal */
export type ToolsOzoneModerationDefsAccountHosting$Outbound = {
  status: string;
  updatedAt?: string | undefined;
  createdAt?: string | undefined;
  deletedAt?: string | undefined;
  deactivatedAt?: string | undefined;
  reactivatedAt?: string | undefined;
};

/** @internal */
export const ToolsOzoneModerationDefsAccountHosting$outboundSchema: z.ZodType<
  ToolsOzoneModerationDefsAccountHosting$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationDefsAccountHosting
> = z.object({
  status: ToolsOzoneModerationDefsAccountHostingStatus$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  deactivatedAt: z.date().transform(v => v.toISOString()).optional(),
  reactivatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsAccountHosting$ {
  /** @deprecated use `ToolsOzoneModerationDefsAccountHosting$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationDefsAccountHosting$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsAccountHosting$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationDefsAccountHosting$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsAccountHosting$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationDefsAccountHosting$Outbound;
}

export function toolsOzoneModerationDefsAccountHostingToJSON(
  toolsOzoneModerationDefsAccountHosting:
    ToolsOzoneModerationDefsAccountHosting,
): string {
  return JSON.stringify(
    ToolsOzoneModerationDefsAccountHosting$outboundSchema.parse(
      toolsOzoneModerationDefsAccountHosting,
    ),
  );
}

export function toolsOzoneModerationDefsAccountHostingFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationDefsAccountHosting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationDefsAccountHosting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationDefsAccountHosting' from JSON`,
  );
}
