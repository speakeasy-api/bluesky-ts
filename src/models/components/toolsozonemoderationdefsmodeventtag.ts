/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Add/Remove a tag on a subject
 */
export type ToolsOzoneModerationDefsModEventTag = {
  add: Array<string>;
  remove: Array<string>;
  /**
   * Additional comment about added/removed tags.
   */
  comment?: string | undefined;
};

/** @internal */
export const ToolsOzoneModerationDefsModEventTag$inboundSchema: z.ZodType<
  ToolsOzoneModerationDefsModEventTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  add: z.array(z.string()),
  remove: z.array(z.string()),
  comment: z.string().optional(),
});

/** @internal */
export type ToolsOzoneModerationDefsModEventTag$Outbound = {
  add: Array<string>;
  remove: Array<string>;
  comment?: string | undefined;
};

/** @internal */
export const ToolsOzoneModerationDefsModEventTag$outboundSchema: z.ZodType<
  ToolsOzoneModerationDefsModEventTag$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationDefsModEventTag
> = z.object({
  add: z.array(z.string()),
  remove: z.array(z.string()),
  comment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsModEventTag$ {
  /** @deprecated use `ToolsOzoneModerationDefsModEventTag$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationDefsModEventTag$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsModEventTag$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationDefsModEventTag$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsModEventTag$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationDefsModEventTag$Outbound;
}

export function toolsOzoneModerationDefsModEventTagToJSON(
  toolsOzoneModerationDefsModEventTag: ToolsOzoneModerationDefsModEventTag,
): string {
  return JSON.stringify(
    ToolsOzoneModerationDefsModEventTag$outboundSchema.parse(
      toolsOzoneModerationDefsModEventTag,
    ),
  );
}

export function toolsOzoneModerationDefsModEventTagFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationDefsModEventTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationDefsModEventTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationDefsModEventTag' from JSON`,
  );
}
