/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Visibility = {
  Ignore: "ignore",
  Show: "show",
  Warn: "warn",
  Hide: "hide",
} as const;
export type Visibility = ClosedEnum<typeof Visibility>;

export type AppBskyActorDefsContentLabelPref = {
  /**
   * Which labeler does this preference apply to? If undefined, applies globally.
   */
  labelerDid?: string | undefined;
  label: string;
  visibility: Visibility;
};

/** @internal */
export const Visibility$inboundSchema: z.ZodNativeEnum<typeof Visibility> = z
  .nativeEnum(Visibility);

/** @internal */
export const Visibility$outboundSchema: z.ZodNativeEnum<typeof Visibility> =
  Visibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Visibility$ {
  /** @deprecated use `Visibility$inboundSchema` instead. */
  export const inboundSchema = Visibility$inboundSchema;
  /** @deprecated use `Visibility$outboundSchema` instead. */
  export const outboundSchema = Visibility$outboundSchema;
}

/** @internal */
export const AppBskyActorDefsContentLabelPref$inboundSchema: z.ZodType<
  AppBskyActorDefsContentLabelPref,
  z.ZodTypeDef,
  unknown
> = z.object({
  labelerDid: z.string().optional(),
  label: z.string(),
  visibility: Visibility$inboundSchema,
});

/** @internal */
export type AppBskyActorDefsContentLabelPref$Outbound = {
  labelerDid?: string | undefined;
  label: string;
  visibility: string;
};

/** @internal */
export const AppBskyActorDefsContentLabelPref$outboundSchema: z.ZodType<
  AppBskyActorDefsContentLabelPref$Outbound,
  z.ZodTypeDef,
  AppBskyActorDefsContentLabelPref
> = z.object({
  labelerDid: z.string().optional(),
  label: z.string(),
  visibility: Visibility$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyActorDefsContentLabelPref$ {
  /** @deprecated use `AppBskyActorDefsContentLabelPref$inboundSchema` instead. */
  export const inboundSchema = AppBskyActorDefsContentLabelPref$inboundSchema;
  /** @deprecated use `AppBskyActorDefsContentLabelPref$outboundSchema` instead. */
  export const outboundSchema = AppBskyActorDefsContentLabelPref$outboundSchema;
  /** @deprecated use `AppBskyActorDefsContentLabelPref$Outbound` instead. */
  export type Outbound = AppBskyActorDefsContentLabelPref$Outbound;
}

export function appBskyActorDefsContentLabelPrefToJSON(
  appBskyActorDefsContentLabelPref: AppBskyActorDefsContentLabelPref,
): string {
  return JSON.stringify(
    AppBskyActorDefsContentLabelPref$outboundSchema.parse(
      appBskyActorDefsContentLabelPref,
    ),
  );
}

export function appBskyActorDefsContentLabelPrefFromJSON(
  jsonString: string,
): SafeParseResult<AppBskyActorDefsContentLabelPref, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppBskyActorDefsContentLabelPref$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppBskyActorDefsContentLabelPref' from JSON`,
  );
}
