/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ComAtprotoAdminDefsThreatSignature,
  ComAtprotoAdminDefsThreatSignature$inboundSchema,
  ComAtprotoAdminDefsThreatSignature$Outbound,
  ComAtprotoAdminDefsThreatSignature$outboundSchema,
} from "./comatprotoadmindefsthreatsignature.js";
import {
  ComAtprotoServerDefsInviteCode,
  ComAtprotoServerDefsInviteCode$inboundSchema,
  ComAtprotoServerDefsInviteCode$Outbound,
  ComAtprotoServerDefsInviteCode$outboundSchema,
} from "./comatprotoserverdefsinvitecode.js";
import {
  ToolsOzoneModerationDefsModeration,
  ToolsOzoneModerationDefsModeration$inboundSchema,
  ToolsOzoneModerationDefsModeration$Outbound,
  ToolsOzoneModerationDefsModeration$outboundSchema,
} from "./toolsozonemoderationdefsmoderation.js";

export type ToolsOzoneModerationDefsRepoView = {
  did: string;
  handle: string;
  email?: string | undefined;
  relatedRecords: Array<any>;
  indexedAt: Date;
  moderation: ToolsOzoneModerationDefsModeration;
  invitedBy?: ComAtprotoServerDefsInviteCode | undefined;
  invitesDisabled?: boolean | undefined;
  inviteNote?: string | undefined;
  deactivatedAt?: Date | undefined;
  threatSignatures?: Array<ComAtprotoAdminDefsThreatSignature> | undefined;
};

/** @internal */
export const ToolsOzoneModerationDefsRepoView$inboundSchema: z.ZodType<
  ToolsOzoneModerationDefsRepoView,
  z.ZodTypeDef,
  unknown
> = z.object({
  did: z.string(),
  handle: z.string(),
  email: z.string().optional(),
  relatedRecords: z.array(z.any()),
  indexedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  moderation: ToolsOzoneModerationDefsModeration$inboundSchema,
  invitedBy: ComAtprotoServerDefsInviteCode$inboundSchema.optional(),
  invitesDisabled: z.boolean().optional(),
  inviteNote: z.string().optional(),
  deactivatedAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  threatSignatures: z.array(ComAtprotoAdminDefsThreatSignature$inboundSchema)
    .optional(),
});

/** @internal */
export type ToolsOzoneModerationDefsRepoView$Outbound = {
  did: string;
  handle: string;
  email?: string | undefined;
  relatedRecords: Array<any>;
  indexedAt: string;
  moderation: ToolsOzoneModerationDefsModeration$Outbound;
  invitedBy?: ComAtprotoServerDefsInviteCode$Outbound | undefined;
  invitesDisabled?: boolean | undefined;
  inviteNote?: string | undefined;
  deactivatedAt?: string | undefined;
  threatSignatures?:
    | Array<ComAtprotoAdminDefsThreatSignature$Outbound>
    | undefined;
};

/** @internal */
export const ToolsOzoneModerationDefsRepoView$outboundSchema: z.ZodType<
  ToolsOzoneModerationDefsRepoView$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationDefsRepoView
> = z.object({
  did: z.string(),
  handle: z.string(),
  email: z.string().optional(),
  relatedRecords: z.array(z.any()),
  indexedAt: z.date().transform(v => v.toISOString()),
  moderation: ToolsOzoneModerationDefsModeration$outboundSchema,
  invitedBy: ComAtprotoServerDefsInviteCode$outboundSchema.optional(),
  invitesDisabled: z.boolean().optional(),
  inviteNote: z.string().optional(),
  deactivatedAt: z.date().transform(v => v.toISOString()).optional(),
  threatSignatures: z.array(ComAtprotoAdminDefsThreatSignature$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsRepoView$ {
  /** @deprecated use `ToolsOzoneModerationDefsRepoView$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneModerationDefsRepoView$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsRepoView$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneModerationDefsRepoView$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsRepoView$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationDefsRepoView$Outbound;
}

export function toolsOzoneModerationDefsRepoViewToJSON(
  toolsOzoneModerationDefsRepoView: ToolsOzoneModerationDefsRepoView,
): string {
  return JSON.stringify(
    ToolsOzoneModerationDefsRepoView$outboundSchema.parse(
      toolsOzoneModerationDefsRepoView,
    ),
  );
}

export function toolsOzoneModerationDefsRepoViewFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationDefsRepoView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsOzoneModerationDefsRepoView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationDefsRepoView' from JSON`,
  );
}
