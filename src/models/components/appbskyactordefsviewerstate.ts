/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppBskyActorDefsKnownFollowers,
  AppBskyActorDefsKnownFollowers$inboundSchema,
  AppBskyActorDefsKnownFollowers$Outbound,
  AppBskyActorDefsKnownFollowers$outboundSchema,
} from "./appbskyactordefsknownfollowers.js";
import {
  AppBskyGraphDefsListViewBasic,
  AppBskyGraphDefsListViewBasic$inboundSchema,
  AppBskyGraphDefsListViewBasic$Outbound,
  AppBskyGraphDefsListViewBasic$outboundSchema,
} from "./appbskygraphdefslistviewbasic.js";

/**
 * Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.
 */
export type AppBskyActorDefsViewerState = {
  muted?: boolean | undefined;
  mutedByList?: AppBskyGraphDefsListViewBasic | undefined;
  blockedBy?: boolean | undefined;
  blocking?: string | undefined;
  blockingByList?: AppBskyGraphDefsListViewBasic | undefined;
  following?: string | undefined;
  followedBy?: string | undefined;
  /**
   * The subject's followers whom you also follow
   */
  knownFollowers?: AppBskyActorDefsKnownFollowers | undefined;
};

/** @internal */
export const AppBskyActorDefsViewerState$inboundSchema: z.ZodType<
  AppBskyActorDefsViewerState,
  z.ZodTypeDef,
  unknown
> = z.object({
  muted: z.boolean().optional(),
  mutedByList: AppBskyGraphDefsListViewBasic$inboundSchema.optional(),
  blockedBy: z.boolean().optional(),
  blocking: z.string().optional(),
  blockingByList: AppBskyGraphDefsListViewBasic$inboundSchema.optional(),
  following: z.string().optional(),
  followedBy: z.string().optional(),
  knownFollowers: z.lazy(() => AppBskyActorDefsKnownFollowers$inboundSchema)
    .optional(),
});

/** @internal */
export type AppBskyActorDefsViewerState$Outbound = {
  muted?: boolean | undefined;
  mutedByList?: AppBskyGraphDefsListViewBasic$Outbound | undefined;
  blockedBy?: boolean | undefined;
  blocking?: string | undefined;
  blockingByList?: AppBskyGraphDefsListViewBasic$Outbound | undefined;
  following?: string | undefined;
  followedBy?: string | undefined;
  knownFollowers?: AppBskyActorDefsKnownFollowers$Outbound | undefined;
};

/** @internal */
export const AppBskyActorDefsViewerState$outboundSchema: z.ZodType<
  AppBskyActorDefsViewerState$Outbound,
  z.ZodTypeDef,
  AppBskyActorDefsViewerState
> = z.object({
  muted: z.boolean().optional(),
  mutedByList: AppBskyGraphDefsListViewBasic$outboundSchema.optional(),
  blockedBy: z.boolean().optional(),
  blocking: z.string().optional(),
  blockingByList: AppBskyGraphDefsListViewBasic$outboundSchema.optional(),
  following: z.string().optional(),
  followedBy: z.string().optional(),
  knownFollowers: z.lazy(() => AppBskyActorDefsKnownFollowers$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyActorDefsViewerState$ {
  /** @deprecated use `AppBskyActorDefsViewerState$inboundSchema` instead. */
  export const inboundSchema = AppBskyActorDefsViewerState$inboundSchema;
  /** @deprecated use `AppBskyActorDefsViewerState$outboundSchema` instead. */
  export const outboundSchema = AppBskyActorDefsViewerState$outboundSchema;
  /** @deprecated use `AppBskyActorDefsViewerState$Outbound` instead. */
  export type Outbound = AppBskyActorDefsViewerState$Outbound;
}

export function appBskyActorDefsViewerStateToJSON(
  appBskyActorDefsViewerState: AppBskyActorDefsViewerState,
): string {
  return JSON.stringify(
    AppBskyActorDefsViewerState$outboundSchema.parse(
      appBskyActorDefsViewerState,
    ),
  );
}

export function appBskyActorDefsViewerStateFromJSON(
  jsonString: string,
): SafeParseResult<AppBskyActorDefsViewerState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppBskyActorDefsViewerState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppBskyActorDefsViewerState' from JSON`,
  );
}
