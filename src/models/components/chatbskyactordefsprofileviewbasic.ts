/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppBskyActorDefsProfileAssociated,
  AppBskyActorDefsProfileAssociated$inboundSchema,
  AppBskyActorDefsProfileAssociated$Outbound,
  AppBskyActorDefsProfileAssociated$outboundSchema,
} from "./appbskyactordefsprofileassociated.js";
import {
  AppBskyActorDefsViewerState,
  AppBskyActorDefsViewerState$inboundSchema,
  AppBskyActorDefsViewerState$Outbound,
  AppBskyActorDefsViewerState$outboundSchema,
} from "./appbskyactordefsviewerstate.js";
import {
  ComAtprotoLabelDefsLabel,
  ComAtprotoLabelDefsLabel$inboundSchema,
  ComAtprotoLabelDefsLabel$Outbound,
  ComAtprotoLabelDefsLabel$outboundSchema,
} from "./comatprotolabeldefslabel.js";

export type ChatBskyActorDefsProfileViewBasic = {
  did: string;
  handle: string;
  displayName?: string | undefined;
  avatar?: string | undefined;
  associated?: AppBskyActorDefsProfileAssociated | undefined;
  /**
   * Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.
   */
  viewer?: AppBskyActorDefsViewerState | undefined;
  labels?: Array<ComAtprotoLabelDefsLabel> | undefined;
  /**
   * Set to true when the actor cannot actively participate in converations
   */
  chatDisabled?: boolean | undefined;
};

/** @internal */
export const ChatBskyActorDefsProfileViewBasic$inboundSchema: z.ZodType<
  ChatBskyActorDefsProfileViewBasic,
  z.ZodTypeDef,
  unknown
> = z.object({
  did: z.string(),
  handle: z.string(),
  displayName: z.string().optional(),
  avatar: z.string().optional(),
  associated: AppBskyActorDefsProfileAssociated$inboundSchema.optional(),
  viewer: AppBskyActorDefsViewerState$inboundSchema.optional(),
  labels: z.array(ComAtprotoLabelDefsLabel$inboundSchema).optional(),
  chatDisabled: z.boolean().optional(),
});

/** @internal */
export type ChatBskyActorDefsProfileViewBasic$Outbound = {
  did: string;
  handle: string;
  displayName?: string | undefined;
  avatar?: string | undefined;
  associated?: AppBskyActorDefsProfileAssociated$Outbound | undefined;
  viewer?: AppBskyActorDefsViewerState$Outbound | undefined;
  labels?: Array<ComAtprotoLabelDefsLabel$Outbound> | undefined;
  chatDisabled?: boolean | undefined;
};

/** @internal */
export const ChatBskyActorDefsProfileViewBasic$outboundSchema: z.ZodType<
  ChatBskyActorDefsProfileViewBasic$Outbound,
  z.ZodTypeDef,
  ChatBskyActorDefsProfileViewBasic
> = z.object({
  did: z.string(),
  handle: z.string(),
  displayName: z.string().optional(),
  avatar: z.string().optional(),
  associated: AppBskyActorDefsProfileAssociated$outboundSchema.optional(),
  viewer: AppBskyActorDefsViewerState$outboundSchema.optional(),
  labels: z.array(ComAtprotoLabelDefsLabel$outboundSchema).optional(),
  chatDisabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyActorDefsProfileViewBasic$ {
  /** @deprecated use `ChatBskyActorDefsProfileViewBasic$inboundSchema` instead. */
  export const inboundSchema = ChatBskyActorDefsProfileViewBasic$inboundSchema;
  /** @deprecated use `ChatBskyActorDefsProfileViewBasic$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyActorDefsProfileViewBasic$outboundSchema;
  /** @deprecated use `ChatBskyActorDefsProfileViewBasic$Outbound` instead. */
  export type Outbound = ChatBskyActorDefsProfileViewBasic$Outbound;
}

export function chatBskyActorDefsProfileViewBasicToJSON(
  chatBskyActorDefsProfileViewBasic: ChatBskyActorDefsProfileViewBasic,
): string {
  return JSON.stringify(
    ChatBskyActorDefsProfileViewBasic$outboundSchema.parse(
      chatBskyActorDefsProfileViewBasic,
    ),
  );
}

export function chatBskyActorDefsProfileViewBasicFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyActorDefsProfileViewBasic, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyActorDefsProfileViewBasic$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyActorDefsProfileViewBasic' from JSON`,
  );
}
