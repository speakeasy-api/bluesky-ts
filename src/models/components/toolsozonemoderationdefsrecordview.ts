/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ToolsOzoneModerationDefsModeration,
  ToolsOzoneModerationDefsModeration$inboundSchema,
  ToolsOzoneModerationDefsModeration$Outbound,
  ToolsOzoneModerationDefsModeration$outboundSchema,
} from "./toolsozonemoderationdefsmoderation.js";
import {
  ToolsOzoneModerationDefsRepoView,
  ToolsOzoneModerationDefsRepoView$inboundSchema,
  ToolsOzoneModerationDefsRepoView$Outbound,
  ToolsOzoneModerationDefsRepoView$outboundSchema,
} from "./toolsozonemoderationdefsrepoview.js";

export type ToolsOzoneModerationDefsRecordView = {
  uri: string;
  cid: string;
  value?: any | undefined;
  blobCids: Array<string>;
  indexedAt: Date;
  moderation: ToolsOzoneModerationDefsModeration;
  repo: ToolsOzoneModerationDefsRepoView;
};

/** @internal */
export const ToolsOzoneModerationDefsRecordView$inboundSchema: z.ZodType<
  ToolsOzoneModerationDefsRecordView,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  cid: z.string(),
  value: z.any().optional(),
  blobCids: z.array(z.string()),
  indexedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  moderation: ToolsOzoneModerationDefsModeration$inboundSchema,
  repo: ToolsOzoneModerationDefsRepoView$inboundSchema,
});

/** @internal */
export type ToolsOzoneModerationDefsRecordView$Outbound = {
  uri: string;
  cid: string;
  value?: any | undefined;
  blobCids: Array<string>;
  indexedAt: string;
  moderation: ToolsOzoneModerationDefsModeration$Outbound;
  repo: ToolsOzoneModerationDefsRepoView$Outbound;
};

/** @internal */
export const ToolsOzoneModerationDefsRecordView$outboundSchema: z.ZodType<
  ToolsOzoneModerationDefsRecordView$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationDefsRecordView
> = z.object({
  uri: z.string(),
  cid: z.string(),
  value: z.any().optional(),
  blobCids: z.array(z.string()),
  indexedAt: z.date().transform(v => v.toISOString()),
  moderation: ToolsOzoneModerationDefsModeration$outboundSchema,
  repo: ToolsOzoneModerationDefsRepoView$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsRecordView$ {
  /** @deprecated use `ToolsOzoneModerationDefsRecordView$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneModerationDefsRecordView$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsRecordView$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationDefsRecordView$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsRecordView$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationDefsRecordView$Outbound;
}

export function toolsOzoneModerationDefsRecordViewToJSON(
  toolsOzoneModerationDefsRecordView: ToolsOzoneModerationDefsRecordView,
): string {
  return JSON.stringify(
    ToolsOzoneModerationDefsRecordView$outboundSchema.parse(
      toolsOzoneModerationDefsRecordView,
    ),
  );
}

export function toolsOzoneModerationDefsRecordViewFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationDefsRecordView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationDefsRecordView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationDefsRecordView' from JSON`,
  );
}
