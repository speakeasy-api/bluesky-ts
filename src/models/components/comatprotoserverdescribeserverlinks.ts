/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoServerDescribeServerLinks = {
  privacyPolicy?: string | undefined;
  termsOfService?: string | undefined;
};

/** @internal */
export const ComAtprotoServerDescribeServerLinks$inboundSchema: z.ZodType<
  ComAtprotoServerDescribeServerLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  privacyPolicy: z.string().optional(),
  termsOfService: z.string().optional(),
});

/** @internal */
export type ComAtprotoServerDescribeServerLinks$Outbound = {
  privacyPolicy?: string | undefined;
  termsOfService?: string | undefined;
};

/** @internal */
export const ComAtprotoServerDescribeServerLinks$outboundSchema: z.ZodType<
  ComAtprotoServerDescribeServerLinks$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerDescribeServerLinks
> = z.object({
  privacyPolicy: z.string().optional(),
  termsOfService: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDescribeServerLinks$ {
  /** @deprecated use `ComAtprotoServerDescribeServerLinks$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerDescribeServerLinks$inboundSchema;
  /** @deprecated use `ComAtprotoServerDescribeServerLinks$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerDescribeServerLinks$outboundSchema;
  /** @deprecated use `ComAtprotoServerDescribeServerLinks$Outbound` instead. */
  export type Outbound = ComAtprotoServerDescribeServerLinks$Outbound;
}

export function comAtprotoServerDescribeServerLinksToJSON(
  comAtprotoServerDescribeServerLinks: ComAtprotoServerDescribeServerLinks,
): string {
  return JSON.stringify(
    ComAtprotoServerDescribeServerLinks$outboundSchema.parse(
      comAtprotoServerDescribeServerLinks,
    ),
  );
}

export function comAtprotoServerDescribeServerLinksFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoServerDescribeServerLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerDescribeServerLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoServerDescribeServerLinks' from JSON`,
  );
}
