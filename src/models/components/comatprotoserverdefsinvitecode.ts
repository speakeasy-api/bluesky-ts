/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ComAtprotoServerDefsInviteCodeUse,
  ComAtprotoServerDefsInviteCodeUse$inboundSchema,
  ComAtprotoServerDefsInviteCodeUse$Outbound,
  ComAtprotoServerDefsInviteCodeUse$outboundSchema,
} from "./comatprotoserverdefsinvitecodeuse.js";

export type ComAtprotoServerDefsInviteCode = {
  code: string;
  available: number;
  disabled: boolean;
  forAccount: string;
  createdBy: string;
  createdAt: Date;
  uses: Array<ComAtprotoServerDefsInviteCodeUse>;
};

/** @internal */
export const ComAtprotoServerDefsInviteCode$inboundSchema: z.ZodType<
  ComAtprotoServerDefsInviteCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  available: z.number().int(),
  disabled: z.boolean(),
  forAccount: z.string(),
  createdBy: z.string(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  uses: z.array(ComAtprotoServerDefsInviteCodeUse$inboundSchema),
});

/** @internal */
export type ComAtprotoServerDefsInviteCode$Outbound = {
  code: string;
  available: number;
  disabled: boolean;
  forAccount: string;
  createdBy: string;
  createdAt: string;
  uses: Array<ComAtprotoServerDefsInviteCodeUse$Outbound>;
};

/** @internal */
export const ComAtprotoServerDefsInviteCode$outboundSchema: z.ZodType<
  ComAtprotoServerDefsInviteCode$Outbound,
  z.ZodTypeDef,
  ComAtprotoServerDefsInviteCode
> = z.object({
  code: z.string(),
  available: z.number().int(),
  disabled: z.boolean(),
  forAccount: z.string(),
  createdBy: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  uses: z.array(ComAtprotoServerDefsInviteCodeUse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerDefsInviteCode$ {
  /** @deprecated use `ComAtprotoServerDefsInviteCode$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoServerDefsInviteCode$inboundSchema;
  /** @deprecated use `ComAtprotoServerDefsInviteCode$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoServerDefsInviteCode$outboundSchema;
  /** @deprecated use `ComAtprotoServerDefsInviteCode$Outbound` instead. */
  export type Outbound = ComAtprotoServerDefsInviteCode$Outbound;
}

export function comAtprotoServerDefsInviteCodeToJSON(
  comAtprotoServerDefsInviteCode: ComAtprotoServerDefsInviteCode,
): string {
  return JSON.stringify(
    ComAtprotoServerDefsInviteCode$outboundSchema.parse(
      comAtprotoServerDefsInviteCode,
    ),
  );
}

export function comAtprotoServerDefsInviteCodeFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoServerDefsInviteCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoServerDefsInviteCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoServerDefsInviteCode' from JSON`,
  );
}
