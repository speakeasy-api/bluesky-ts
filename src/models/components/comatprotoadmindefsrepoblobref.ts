/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoAdminDefsRepoBlobRef = {
  did: string;
  cid: string;
  recordUri?: string | undefined;
};

/** @internal */
export const ComAtprotoAdminDefsRepoBlobRef$inboundSchema: z.ZodType<
  ComAtprotoAdminDefsRepoBlobRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  did: z.string(),
  cid: z.string(),
  recordUri: z.string().optional(),
});

/** @internal */
export type ComAtprotoAdminDefsRepoBlobRef$Outbound = {
  did: string;
  cid: string;
  recordUri?: string | undefined;
};

/** @internal */
export const ComAtprotoAdminDefsRepoBlobRef$outboundSchema: z.ZodType<
  ComAtprotoAdminDefsRepoBlobRef$Outbound,
  z.ZodTypeDef,
  ComAtprotoAdminDefsRepoBlobRef
> = z.object({
  did: z.string(),
  cid: z.string(),
  recordUri: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoAdminDefsRepoBlobRef$ {
  /** @deprecated use `ComAtprotoAdminDefsRepoBlobRef$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoAdminDefsRepoBlobRef$inboundSchema;
  /** @deprecated use `ComAtprotoAdminDefsRepoBlobRef$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoAdminDefsRepoBlobRef$outboundSchema;
  /** @deprecated use `ComAtprotoAdminDefsRepoBlobRef$Outbound` instead. */
  export type Outbound = ComAtprotoAdminDefsRepoBlobRef$Outbound;
}

export function comAtprotoAdminDefsRepoBlobRefToJSON(
  comAtprotoAdminDefsRepoBlobRef: ComAtprotoAdminDefsRepoBlobRef,
): string {
  return JSON.stringify(
    ComAtprotoAdminDefsRepoBlobRef$outboundSchema.parse(
      comAtprotoAdminDefsRepoBlobRef,
    ),
  );
}

export function comAtprotoAdminDefsRepoBlobRefFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoAdminDefsRepoBlobRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoAdminDefsRepoBlobRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoAdminDefsRepoBlobRef' from JSON`,
  );
}
