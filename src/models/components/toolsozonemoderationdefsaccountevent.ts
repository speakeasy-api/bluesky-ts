/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ToolsOzoneModerationDefsAccountEventStatus = {
  Unknown: "unknown",
  Deactivated: "deactivated",
  Deleted: "deleted",
  Takendown: "takendown",
  Suspended: "suspended",
  Tombstoned: "tombstoned",
} as const;
export type ToolsOzoneModerationDefsAccountEventStatus = ClosedEnum<
  typeof ToolsOzoneModerationDefsAccountEventStatus
>;

/**
 * Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.
 */
export type ToolsOzoneModerationDefsAccountEvent = {
  comment?: string | undefined;
  /**
   * Indicates that the account has a repository which can be fetched from the host that emitted this event.
   */
  active: boolean;
  status?: ToolsOzoneModerationDefsAccountEventStatus | undefined;
  timestamp: Date;
};

/** @internal */
export const ToolsOzoneModerationDefsAccountEventStatus$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneModerationDefsAccountEventStatus> = z
    .nativeEnum(ToolsOzoneModerationDefsAccountEventStatus);

/** @internal */
export const ToolsOzoneModerationDefsAccountEventStatus$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneModerationDefsAccountEventStatus> =
    ToolsOzoneModerationDefsAccountEventStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsAccountEventStatus$ {
  /** @deprecated use `ToolsOzoneModerationDefsAccountEventStatus$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationDefsAccountEventStatus$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsAccountEventStatus$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationDefsAccountEventStatus$outboundSchema;
}

/** @internal */
export const ToolsOzoneModerationDefsAccountEvent$inboundSchema: z.ZodType<
  ToolsOzoneModerationDefsAccountEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.string().optional(),
  active: z.boolean(),
  status: ToolsOzoneModerationDefsAccountEventStatus$inboundSchema.optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type ToolsOzoneModerationDefsAccountEvent$Outbound = {
  comment?: string | undefined;
  active: boolean;
  status?: string | undefined;
  timestamp: string;
};

/** @internal */
export const ToolsOzoneModerationDefsAccountEvent$outboundSchema: z.ZodType<
  ToolsOzoneModerationDefsAccountEvent$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationDefsAccountEvent
> = z.object({
  comment: z.string().optional(),
  active: z.boolean(),
  status: ToolsOzoneModerationDefsAccountEventStatus$outboundSchema.optional(),
  timestamp: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsAccountEvent$ {
  /** @deprecated use `ToolsOzoneModerationDefsAccountEvent$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationDefsAccountEvent$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsAccountEvent$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationDefsAccountEvent$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsAccountEvent$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationDefsAccountEvent$Outbound;
}

export function toolsOzoneModerationDefsAccountEventToJSON(
  toolsOzoneModerationDefsAccountEvent: ToolsOzoneModerationDefsAccountEvent,
): string {
  return JSON.stringify(
    ToolsOzoneModerationDefsAccountEvent$outboundSchema.parse(
      toolsOzoneModerationDefsAccountEvent,
    ),
  );
}

export function toolsOzoneModerationDefsAccountEventFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationDefsAccountEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationDefsAccountEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationDefsAccountEvent' from JSON`,
  );
}
