/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Operation which creates a new record.
 */
export type ComAtprotoRepoApplyWritesCreate = {
  collection: string;
  rkey?: string | undefined;
  value?: any | undefined;
};

/** @internal */
export const ComAtprotoRepoApplyWritesCreate$inboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  collection: z.string(),
  rkey: z.string().optional(),
  value: z.any().optional(),
});

/** @internal */
export type ComAtprotoRepoApplyWritesCreate$Outbound = {
  collection: string;
  rkey?: string | undefined;
  value?: any | undefined;
};

/** @internal */
export const ComAtprotoRepoApplyWritesCreate$outboundSchema: z.ZodType<
  ComAtprotoRepoApplyWritesCreate$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoApplyWritesCreate
> = z.object({
  collection: z.string(),
  rkey: z.string().optional(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoApplyWritesCreate$ {
  /** @deprecated use `ComAtprotoRepoApplyWritesCreate$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoApplyWritesCreate$inboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesCreate$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoApplyWritesCreate$outboundSchema;
  /** @deprecated use `ComAtprotoRepoApplyWritesCreate$Outbound` instead. */
  export type Outbound = ComAtprotoRepoApplyWritesCreate$Outbound;
}

export function comAtprotoRepoApplyWritesCreateToJSON(
  comAtprotoRepoApplyWritesCreate: ComAtprotoRepoApplyWritesCreate,
): string {
  return JSON.stringify(
    ComAtprotoRepoApplyWritesCreate$outboundSchema.parse(
      comAtprotoRepoApplyWritesCreate,
    ),
  );
}

export function comAtprotoRepoApplyWritesCreateFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoApplyWritesCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoApplyWritesCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoApplyWritesCreate' from JSON`,
  );
}
