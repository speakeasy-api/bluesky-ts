/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoRepoListMissingBlobsRecordBlob = {
  cid: string;
  recordUri: string;
};

/** @internal */
export const ComAtprotoRepoListMissingBlobsRecordBlob$inboundSchema: z.ZodType<
  ComAtprotoRepoListMissingBlobsRecordBlob,
  z.ZodTypeDef,
  unknown
> = z.object({
  cid: z.string(),
  recordUri: z.string(),
});

/** @internal */
export type ComAtprotoRepoListMissingBlobsRecordBlob$Outbound = {
  cid: string;
  recordUri: string;
};

/** @internal */
export const ComAtprotoRepoListMissingBlobsRecordBlob$outboundSchema: z.ZodType<
  ComAtprotoRepoListMissingBlobsRecordBlob$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoListMissingBlobsRecordBlob
> = z.object({
  cid: z.string(),
  recordUri: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoListMissingBlobsRecordBlob$ {
  /** @deprecated use `ComAtprotoRepoListMissingBlobsRecordBlob$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoRepoListMissingBlobsRecordBlob$inboundSchema;
  /** @deprecated use `ComAtprotoRepoListMissingBlobsRecordBlob$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoRepoListMissingBlobsRecordBlob$outboundSchema;
  /** @deprecated use `ComAtprotoRepoListMissingBlobsRecordBlob$Outbound` instead. */
  export type Outbound = ComAtprotoRepoListMissingBlobsRecordBlob$Outbound;
}

export function comAtprotoRepoListMissingBlobsRecordBlobToJSON(
  comAtprotoRepoListMissingBlobsRecordBlob:
    ComAtprotoRepoListMissingBlobsRecordBlob,
): string {
  return JSON.stringify(
    ComAtprotoRepoListMissingBlobsRecordBlob$outboundSchema.parse(
      comAtprotoRepoListMissingBlobsRecordBlob,
    ),
  );
}

export function comAtprotoRepoListMissingBlobsRecordBlobFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoRepoListMissingBlobsRecordBlob,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoRepoListMissingBlobsRecordBlob$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoRepoListMissingBlobsRecordBlob' from JSON`,
  );
}
