/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
 */
export const ComAtprotoSyncListReposRepoStatus = {
  Takendown: "takendown",
  Suspended: "suspended",
  Deactivated: "deactivated",
} as const;
/**
 * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
 */
export type ComAtprotoSyncListReposRepoStatus = ClosedEnum<
  typeof ComAtprotoSyncListReposRepoStatus
>;

export type ComAtprotoSyncListReposRepo = {
  did: string;
  /**
   * Current repo commit CID
   */
  head: string;
  rev: string;
  active?: boolean | undefined;
  /**
   * If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.
   */
  status?: ComAtprotoSyncListReposRepoStatus | undefined;
};

/** @internal */
export const ComAtprotoSyncListReposRepoStatus$inboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncListReposRepoStatus
> = z.nativeEnum(ComAtprotoSyncListReposRepoStatus);

/** @internal */
export const ComAtprotoSyncListReposRepoStatus$outboundSchema: z.ZodNativeEnum<
  typeof ComAtprotoSyncListReposRepoStatus
> = ComAtprotoSyncListReposRepoStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncListReposRepoStatus$ {
  /** @deprecated use `ComAtprotoSyncListReposRepoStatus$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoSyncListReposRepoStatus$inboundSchema;
  /** @deprecated use `ComAtprotoSyncListReposRepoStatus$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoSyncListReposRepoStatus$outboundSchema;
}

/** @internal */
export const ComAtprotoSyncListReposRepo$inboundSchema: z.ZodType<
  ComAtprotoSyncListReposRepo,
  z.ZodTypeDef,
  unknown
> = z.object({
  did: z.string(),
  head: z.string(),
  rev: z.string(),
  active: z.boolean().optional(),
  status: ComAtprotoSyncListReposRepoStatus$inboundSchema.optional(),
});

/** @internal */
export type ComAtprotoSyncListReposRepo$Outbound = {
  did: string;
  head: string;
  rev: string;
  active?: boolean | undefined;
  status?: string | undefined;
};

/** @internal */
export const ComAtprotoSyncListReposRepo$outboundSchema: z.ZodType<
  ComAtprotoSyncListReposRepo$Outbound,
  z.ZodTypeDef,
  ComAtprotoSyncListReposRepo
> = z.object({
  did: z.string(),
  head: z.string(),
  rev: z.string(),
  active: z.boolean().optional(),
  status: ComAtprotoSyncListReposRepoStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoSyncListReposRepo$ {
  /** @deprecated use `ComAtprotoSyncListReposRepo$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoSyncListReposRepo$inboundSchema;
  /** @deprecated use `ComAtprotoSyncListReposRepo$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoSyncListReposRepo$outboundSchema;
  /** @deprecated use `ComAtprotoSyncListReposRepo$Outbound` instead. */
  export type Outbound = ComAtprotoSyncListReposRepo$Outbound;
}

export function comAtprotoSyncListReposRepoToJSON(
  comAtprotoSyncListReposRepo: ComAtprotoSyncListReposRepo,
): string {
  return JSON.stringify(
    ComAtprotoSyncListReposRepo$outboundSchema.parse(
      comAtprotoSyncListReposRepo,
    ),
  );
}

export function comAtprotoSyncListReposRepoFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoSyncListReposRepo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoSyncListReposRepo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoSyncListReposRepo' from JSON`,
  );
}
