/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppBskyEmbedRecordView,
  AppBskyEmbedRecordView$inboundSchema,
  AppBskyEmbedRecordView$Outbound,
  AppBskyEmbedRecordView$outboundSchema,
} from "./appbskyembedrecordview.js";
import {
  AppBskyRichtextFacet,
  AppBskyRichtextFacet$inboundSchema,
  AppBskyRichtextFacet$Outbound,
  AppBskyRichtextFacet$outboundSchema,
} from "./appbskyrichtextfacet.js";
import {
  ChatBskyConvoDefsMessageViewSender,
  ChatBskyConvoDefsMessageViewSender$inboundSchema,
  ChatBskyConvoDefsMessageViewSender$Outbound,
  ChatBskyConvoDefsMessageViewSender$outboundSchema,
} from "./chatbskyconvodefsmessageviewsender.js";

export type ChatBskyConvoDefsMessageViewEmbed = AppBskyEmbedRecordView;

export type ChatBskyConvoDefsMessageView = {
  id: string;
  rev: string;
  text: string;
  facets?: Array<AppBskyRichtextFacet> | undefined;
  embed?: AppBskyEmbedRecordView | undefined;
  sender: ChatBskyConvoDefsMessageViewSender;
  sentAt: Date;
};

/** @internal */
export const ChatBskyConvoDefsMessageViewEmbed$inboundSchema: z.ZodType<
  ChatBskyConvoDefsMessageViewEmbed,
  z.ZodTypeDef,
  unknown
> = AppBskyEmbedRecordView$inboundSchema;

/** @internal */
export type ChatBskyConvoDefsMessageViewEmbed$Outbound =
  AppBskyEmbedRecordView$Outbound;

/** @internal */
export const ChatBskyConvoDefsMessageViewEmbed$outboundSchema: z.ZodType<
  ChatBskyConvoDefsMessageViewEmbed$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoDefsMessageViewEmbed
> = AppBskyEmbedRecordView$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoDefsMessageViewEmbed$ {
  /** @deprecated use `ChatBskyConvoDefsMessageViewEmbed$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoDefsMessageViewEmbed$inboundSchema;
  /** @deprecated use `ChatBskyConvoDefsMessageViewEmbed$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoDefsMessageViewEmbed$outboundSchema;
  /** @deprecated use `ChatBskyConvoDefsMessageViewEmbed$Outbound` instead. */
  export type Outbound = ChatBskyConvoDefsMessageViewEmbed$Outbound;
}

export function chatBskyConvoDefsMessageViewEmbedToJSON(
  chatBskyConvoDefsMessageViewEmbed: ChatBskyConvoDefsMessageViewEmbed,
): string {
  return JSON.stringify(
    ChatBskyConvoDefsMessageViewEmbed$outboundSchema.parse(
      chatBskyConvoDefsMessageViewEmbed,
    ),
  );
}

export function chatBskyConvoDefsMessageViewEmbedFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoDefsMessageViewEmbed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoDefsMessageViewEmbed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoDefsMessageViewEmbed' from JSON`,
  );
}

/** @internal */
export const ChatBskyConvoDefsMessageView$inboundSchema: z.ZodType<
  ChatBskyConvoDefsMessageView,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  rev: z.string(),
  text: z.string(),
  facets: z.array(AppBskyRichtextFacet$inboundSchema).optional(),
  embed: AppBskyEmbedRecordView$inboundSchema.optional(),
  sender: ChatBskyConvoDefsMessageViewSender$inboundSchema,
  sentAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type ChatBskyConvoDefsMessageView$Outbound = {
  id: string;
  rev: string;
  text: string;
  facets?: Array<AppBskyRichtextFacet$Outbound> | undefined;
  embed?: AppBskyEmbedRecordView$Outbound | undefined;
  sender: ChatBskyConvoDefsMessageViewSender$Outbound;
  sentAt: string;
};

/** @internal */
export const ChatBskyConvoDefsMessageView$outboundSchema: z.ZodType<
  ChatBskyConvoDefsMessageView$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoDefsMessageView
> = z.object({
  id: z.string(),
  rev: z.string(),
  text: z.string(),
  facets: z.array(AppBskyRichtextFacet$outboundSchema).optional(),
  embed: AppBskyEmbedRecordView$outboundSchema.optional(),
  sender: ChatBskyConvoDefsMessageViewSender$outboundSchema,
  sentAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoDefsMessageView$ {
  /** @deprecated use `ChatBskyConvoDefsMessageView$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoDefsMessageView$inboundSchema;
  /** @deprecated use `ChatBskyConvoDefsMessageView$outboundSchema` instead. */
  export const outboundSchema = ChatBskyConvoDefsMessageView$outboundSchema;
  /** @deprecated use `ChatBskyConvoDefsMessageView$Outbound` instead. */
  export type Outbound = ChatBskyConvoDefsMessageView$Outbound;
}

export function chatBskyConvoDefsMessageViewToJSON(
  chatBskyConvoDefsMessageView: ChatBskyConvoDefsMessageView,
): string {
  return JSON.stringify(
    ChatBskyConvoDefsMessageView$outboundSchema.parse(
      chatBskyConvoDefsMessageView,
    ),
  );
}

export function chatBskyConvoDefsMessageViewFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoDefsMessageView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoDefsMessageView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoDefsMessageView' from JSON`,
  );
}
