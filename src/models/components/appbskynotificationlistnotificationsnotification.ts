/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppBskyActorDefsProfileView,
  AppBskyActorDefsProfileView$inboundSchema,
  AppBskyActorDefsProfileView$Outbound,
  AppBskyActorDefsProfileView$outboundSchema,
} from "./appbskyactordefsprofileview.js";
import {
  ComAtprotoLabelDefsLabel,
  ComAtprotoLabelDefsLabel$inboundSchema,
  ComAtprotoLabelDefsLabel$Outbound,
  ComAtprotoLabelDefsLabel$outboundSchema,
} from "./comatprotolabeldefslabel.js";

/**
 * Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.
 */
export const ReasonEnum = {
  Like: "like",
  Repost: "repost",
  Follow: "follow",
  Mention: "mention",
  Reply: "reply",
  Quote: "quote",
  StarterpackJoined: "starterpack-joined",
} as const;
/**
 * Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.
 */
export type ReasonEnum = ClosedEnum<typeof ReasonEnum>;

export type AppBskyNotificationListNotificationsNotification = {
  uri: string;
  cid: string;
  author: AppBskyActorDefsProfileView;
  /**
   * Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.
   */
  reason: ReasonEnum;
  reasonSubject?: string | undefined;
  record?: any | undefined;
  isRead: boolean;
  indexedAt: Date;
  labels?: Array<ComAtprotoLabelDefsLabel> | undefined;
};

/** @internal */
export const ReasonEnum$inboundSchema: z.ZodNativeEnum<typeof ReasonEnum> = z
  .nativeEnum(ReasonEnum);

/** @internal */
export const ReasonEnum$outboundSchema: z.ZodNativeEnum<typeof ReasonEnum> =
  ReasonEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasonEnum$ {
  /** @deprecated use `ReasonEnum$inboundSchema` instead. */
  export const inboundSchema = ReasonEnum$inboundSchema;
  /** @deprecated use `ReasonEnum$outboundSchema` instead. */
  export const outboundSchema = ReasonEnum$outboundSchema;
}

/** @internal */
export const AppBskyNotificationListNotificationsNotification$inboundSchema:
  z.ZodType<
    AppBskyNotificationListNotificationsNotification,
    z.ZodTypeDef,
    unknown
  > = z.object({
    uri: z.string(),
    cid: z.string(),
    author: AppBskyActorDefsProfileView$inboundSchema,
    reason: ReasonEnum$inboundSchema,
    reasonSubject: z.string().optional(),
    record: z.any().optional(),
    isRead: z.boolean(),
    indexedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    labels: z.array(ComAtprotoLabelDefsLabel$inboundSchema).optional(),
  });

/** @internal */
export type AppBskyNotificationListNotificationsNotification$Outbound = {
  uri: string;
  cid: string;
  author: AppBskyActorDefsProfileView$Outbound;
  reason: string;
  reasonSubject?: string | undefined;
  record?: any | undefined;
  isRead: boolean;
  indexedAt: string;
  labels?: Array<ComAtprotoLabelDefsLabel$Outbound> | undefined;
};

/** @internal */
export const AppBskyNotificationListNotificationsNotification$outboundSchema:
  z.ZodType<
    AppBskyNotificationListNotificationsNotification$Outbound,
    z.ZodTypeDef,
    AppBskyNotificationListNotificationsNotification
  > = z.object({
    uri: z.string(),
    cid: z.string(),
    author: AppBskyActorDefsProfileView$outboundSchema,
    reason: ReasonEnum$outboundSchema,
    reasonSubject: z.string().optional(),
    record: z.any().optional(),
    isRead: z.boolean(),
    indexedAt: z.date().transform(v => v.toISOString()),
    labels: z.array(ComAtprotoLabelDefsLabel$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyNotificationListNotificationsNotification$ {
  /** @deprecated use `AppBskyNotificationListNotificationsNotification$inboundSchema` instead. */
  export const inboundSchema =
    AppBskyNotificationListNotificationsNotification$inboundSchema;
  /** @deprecated use `AppBskyNotificationListNotificationsNotification$outboundSchema` instead. */
  export const outboundSchema =
    AppBskyNotificationListNotificationsNotification$outboundSchema;
  /** @deprecated use `AppBskyNotificationListNotificationsNotification$Outbound` instead. */
  export type Outbound =
    AppBskyNotificationListNotificationsNotification$Outbound;
}

export function appBskyNotificationListNotificationsNotificationToJSON(
  appBskyNotificationListNotificationsNotification:
    AppBskyNotificationListNotificationsNotification,
): string {
  return JSON.stringify(
    AppBskyNotificationListNotificationsNotification$outboundSchema.parse(
      appBskyNotificationListNotificationsNotification,
    ),
  );
}

export function appBskyNotificationListNotificationsNotificationFromJSON(
  jsonString: string,
): SafeParseResult<
  AppBskyNotificationListNotificationsNotification,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AppBskyNotificationListNotificationsNotification$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AppBskyNotificationListNotificationsNotification' from JSON`,
  );
}
