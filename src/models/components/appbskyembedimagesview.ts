/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppBskyEmbedImagesViewImage,
  AppBskyEmbedImagesViewImage$inboundSchema,
  AppBskyEmbedImagesViewImage$Outbound,
  AppBskyEmbedImagesViewImage$outboundSchema,
} from "./appbskyembedimagesviewimage.js";

export type AppBskyEmbedImagesView = {
  images: Array<AppBskyEmbedImagesViewImage>;
};

/** @internal */
export const AppBskyEmbedImagesView$inboundSchema: z.ZodType<
  AppBskyEmbedImagesView,
  z.ZodTypeDef,
  unknown
> = z.object({
  images: z.array(AppBskyEmbedImagesViewImage$inboundSchema),
});

/** @internal */
export type AppBskyEmbedImagesView$Outbound = {
  images: Array<AppBskyEmbedImagesViewImage$Outbound>;
};

/** @internal */
export const AppBskyEmbedImagesView$outboundSchema: z.ZodType<
  AppBskyEmbedImagesView$Outbound,
  z.ZodTypeDef,
  AppBskyEmbedImagesView
> = z.object({
  images: z.array(AppBskyEmbedImagesViewImage$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyEmbedImagesView$ {
  /** @deprecated use `AppBskyEmbedImagesView$inboundSchema` instead. */
  export const inboundSchema = AppBskyEmbedImagesView$inboundSchema;
  /** @deprecated use `AppBskyEmbedImagesView$outboundSchema` instead. */
  export const outboundSchema = AppBskyEmbedImagesView$outboundSchema;
  /** @deprecated use `AppBskyEmbedImagesView$Outbound` instead. */
  export type Outbound = AppBskyEmbedImagesView$Outbound;
}

export function appBskyEmbedImagesViewToJSON(
  appBskyEmbedImagesView: AppBskyEmbedImagesView,
): string {
  return JSON.stringify(
    AppBskyEmbedImagesView$outboundSchema.parse(appBskyEmbedImagesView),
  );
}

export function appBskyEmbedImagesViewFromJSON(
  jsonString: string,
): SafeParseResult<AppBskyEmbedImagesView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppBskyEmbedImagesView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppBskyEmbedImagesView' from JSON`,
  );
}
