/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Sorting mode for threads.
 */
export const Sort = {
  Oldest: "oldest",
  Newest: "newest",
  MostLikes: "most-likes",
  Random: "random",
} as const;
/**
 * Sorting mode for threads.
 */
export type Sort = ClosedEnum<typeof Sort>;

export type AppBskyActorDefsThreadViewPref = {
  /**
   * Sorting mode for threads.
   */
  sort?: Sort | undefined;
  /**
   * Show followed users at the top of all replies.
   */
  prioritizeFollowedUsers?: boolean | undefined;
};

/** @internal */
export const Sort$inboundSchema: z.ZodNativeEnum<typeof Sort> = z.nativeEnum(
  Sort,
);

/** @internal */
export const Sort$outboundSchema: z.ZodNativeEnum<typeof Sort> =
  Sort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sort$ {
  /** @deprecated use `Sort$inboundSchema` instead. */
  export const inboundSchema = Sort$inboundSchema;
  /** @deprecated use `Sort$outboundSchema` instead. */
  export const outboundSchema = Sort$outboundSchema;
}

/** @internal */
export const AppBskyActorDefsThreadViewPref$inboundSchema: z.ZodType<
  AppBskyActorDefsThreadViewPref,
  z.ZodTypeDef,
  unknown
> = z.object({
  sort: Sort$inboundSchema.optional(),
  prioritizeFollowedUsers: z.boolean().optional(),
});

/** @internal */
export type AppBskyActorDefsThreadViewPref$Outbound = {
  sort?: string | undefined;
  prioritizeFollowedUsers?: boolean | undefined;
};

/** @internal */
export const AppBskyActorDefsThreadViewPref$outboundSchema: z.ZodType<
  AppBskyActorDefsThreadViewPref$Outbound,
  z.ZodTypeDef,
  AppBskyActorDefsThreadViewPref
> = z.object({
  sort: Sort$outboundSchema.optional(),
  prioritizeFollowedUsers: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyActorDefsThreadViewPref$ {
  /** @deprecated use `AppBskyActorDefsThreadViewPref$inboundSchema` instead. */
  export const inboundSchema = AppBskyActorDefsThreadViewPref$inboundSchema;
  /** @deprecated use `AppBskyActorDefsThreadViewPref$outboundSchema` instead. */
  export const outboundSchema = AppBskyActorDefsThreadViewPref$outboundSchema;
  /** @deprecated use `AppBskyActorDefsThreadViewPref$Outbound` instead. */
  export type Outbound = AppBskyActorDefsThreadViewPref$Outbound;
}

export function appBskyActorDefsThreadViewPrefToJSON(
  appBskyActorDefsThreadViewPref: AppBskyActorDefsThreadViewPref,
): string {
  return JSON.stringify(
    AppBskyActorDefsThreadViewPref$outboundSchema.parse(
      appBskyActorDefsThreadViewPref,
    ),
  );
}

export function appBskyActorDefsThreadViewPrefFromJSON(
  jsonString: string,
): SafeParseResult<AppBskyActorDefsThreadViewPref, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppBskyActorDefsThreadViewPref$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppBskyActorDefsThreadViewPref' from JSON`,
  );
}
