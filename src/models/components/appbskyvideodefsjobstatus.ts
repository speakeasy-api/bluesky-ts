/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The state of the video processing job. All values not listed as a known value indicate that the job is in process.
 */
export const State = {
  JobStateCompleted: "JOB_STATE_COMPLETED",
  JobStateFailed: "JOB_STATE_FAILED",
} as const;
/**
 * The state of the video processing job. All values not listed as a known value indicate that the job is in process.
 */
export type State = ClosedEnum<typeof State>;

export type AppBskyVideoDefsJobStatus = {
  jobId: string;
  did: string;
  /**
   * The state of the video processing job. All values not listed as a known value indicate that the job is in process.
   */
  state: State;
  progress?: number | undefined;
  blob?: Uint8Array | string | undefined;
  error?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(
  State,
);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> =
  State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const AppBskyVideoDefsJobStatus$inboundSchema: z.ZodType<
  AppBskyVideoDefsJobStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  jobId: z.string(),
  did: z.string(),
  state: State$inboundSchema,
  progress: z.number().int().optional(),
  blob: b64$.zodInbound.optional(),
  error: z.string().optional(),
  message: z.string().optional(),
});

/** @internal */
export type AppBskyVideoDefsJobStatus$Outbound = {
  jobId: string;
  did: string;
  state: string;
  progress?: number | undefined;
  blob?: Uint8Array | undefined;
  error?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const AppBskyVideoDefsJobStatus$outboundSchema: z.ZodType<
  AppBskyVideoDefsJobStatus$Outbound,
  z.ZodTypeDef,
  AppBskyVideoDefsJobStatus
> = z.object({
  jobId: z.string(),
  did: z.string(),
  state: State$outboundSchema,
  progress: z.number().int().optional(),
  blob: b64$.zodOutbound.optional(),
  error: z.string().optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyVideoDefsJobStatus$ {
  /** @deprecated use `AppBskyVideoDefsJobStatus$inboundSchema` instead. */
  export const inboundSchema = AppBskyVideoDefsJobStatus$inboundSchema;
  /** @deprecated use `AppBskyVideoDefsJobStatus$outboundSchema` instead. */
  export const outboundSchema = AppBskyVideoDefsJobStatus$outboundSchema;
  /** @deprecated use `AppBskyVideoDefsJobStatus$Outbound` instead. */
  export type Outbound = AppBskyVideoDefsJobStatus$Outbound;
}

export function appBskyVideoDefsJobStatusToJSON(
  appBskyVideoDefsJobStatus: AppBskyVideoDefsJobStatus,
): string {
  return JSON.stringify(
    AppBskyVideoDefsJobStatus$outboundSchema.parse(appBskyVideoDefsJobStatus),
  );
}

export function appBskyVideoDefsJobStatusFromJSON(
  jsonString: string,
): SafeParseResult<AppBskyVideoDefsJobStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppBskyVideoDefsJobStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppBskyVideoDefsJobStatus' from JSON`,
  );
}
