/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A new user experiences (NUX) storage object
 */
export type AppBskyActorDefsNux = {
  id: string;
  completed: boolean;
  /**
   * Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.
   */
  data?: string | undefined;
  /**
   * The date and time at which the NUX will expire and should be considered completed.
   */
  expiresAt?: Date | undefined;
};

/** @internal */
export const AppBskyActorDefsNux$inboundSchema: z.ZodType<
  AppBskyActorDefsNux,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  completed: z.boolean(),
  data: z.string().optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type AppBskyActorDefsNux$Outbound = {
  id: string;
  completed: boolean;
  data?: string | undefined;
  expiresAt?: string | undefined;
};

/** @internal */
export const AppBskyActorDefsNux$outboundSchema: z.ZodType<
  AppBskyActorDefsNux$Outbound,
  z.ZodTypeDef,
  AppBskyActorDefsNux
> = z.object({
  id: z.string(),
  completed: z.boolean(),
  data: z.string().optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyActorDefsNux$ {
  /** @deprecated use `AppBskyActorDefsNux$inboundSchema` instead. */
  export const inboundSchema = AppBskyActorDefsNux$inboundSchema;
  /** @deprecated use `AppBskyActorDefsNux$outboundSchema` instead. */
  export const outboundSchema = AppBskyActorDefsNux$outboundSchema;
  /** @deprecated use `AppBskyActorDefsNux$Outbound` instead. */
  export type Outbound = AppBskyActorDefsNux$Outbound;
}

export function appBskyActorDefsNuxToJSON(
  appBskyActorDefsNux: AppBskyActorDefsNux,
): string {
  return JSON.stringify(
    AppBskyActorDefsNux$outboundSchema.parse(appBskyActorDefsNux),
  );
}

export function appBskyActorDefsNuxFromJSON(
  jsonString: string,
): SafeParseResult<AppBskyActorDefsNux, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppBskyActorDefsNux$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppBskyActorDefsNux' from JSON`,
  );
}
