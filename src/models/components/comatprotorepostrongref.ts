/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoRepoStrongRef = {
  uri: string;
  cid: string;
};

/** @internal */
export const ComAtprotoRepoStrongRef$inboundSchema: z.ZodType<
  ComAtprotoRepoStrongRef,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  cid: z.string(),
});

/** @internal */
export type ComAtprotoRepoStrongRef$Outbound = {
  uri: string;
  cid: string;
};

/** @internal */
export const ComAtprotoRepoStrongRef$outboundSchema: z.ZodType<
  ComAtprotoRepoStrongRef$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoStrongRef
> = z.object({
  uri: z.string(),
  cid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoStrongRef$ {
  /** @deprecated use `ComAtprotoRepoStrongRef$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoStrongRef$inboundSchema;
  /** @deprecated use `ComAtprotoRepoStrongRef$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoStrongRef$outboundSchema;
  /** @deprecated use `ComAtprotoRepoStrongRef$Outbound` instead. */
  export type Outbound = ComAtprotoRepoStrongRef$Outbound;
}

export function comAtprotoRepoStrongRefToJSON(
  comAtprotoRepoStrongRef: ComAtprotoRepoStrongRef,
): string {
  return JSON.stringify(
    ComAtprotoRepoStrongRef$outboundSchema.parse(comAtprotoRepoStrongRef),
  );
}

export function comAtprotoRepoStrongRefFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoStrongRef, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoStrongRef$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoStrongRef' from JSON`,
  );
}
