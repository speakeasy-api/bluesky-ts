/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Add a comment to a subject
 */
export type ToolsOzoneModerationDefsModEventComment = {
  comment: string;
  /**
   * Make the comment persistent on the subject
   */
  sticky?: boolean | undefined;
};

/** @internal */
export const ToolsOzoneModerationDefsModEventComment$inboundSchema: z.ZodType<
  ToolsOzoneModerationDefsModEventComment,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.string(),
  sticky: z.boolean().optional(),
});

/** @internal */
export type ToolsOzoneModerationDefsModEventComment$Outbound = {
  comment: string;
  sticky?: boolean | undefined;
};

/** @internal */
export const ToolsOzoneModerationDefsModEventComment$outboundSchema: z.ZodType<
  ToolsOzoneModerationDefsModEventComment$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationDefsModEventComment
> = z.object({
  comment: z.string(),
  sticky: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsModEventComment$ {
  /** @deprecated use `ToolsOzoneModerationDefsModEventComment$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationDefsModEventComment$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsModEventComment$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationDefsModEventComment$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsModEventComment$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationDefsModEventComment$Outbound;
}

export function toolsOzoneModerationDefsModEventCommentToJSON(
  toolsOzoneModerationDefsModEventComment:
    ToolsOzoneModerationDefsModEventComment,
): string {
  return JSON.stringify(
    ToolsOzoneModerationDefsModEventComment$outboundSchema.parse(
      toolsOzoneModerationDefsModEventComment,
    ),
  );
}

export function toolsOzoneModerationDefsModEventCommentFromJSON(
  jsonString: string,
): SafeParseResult<
  ToolsOzoneModerationDefsModEventComment,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationDefsModEventComment$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ToolsOzoneModerationDefsModEventComment' from JSON`,
  );
}
