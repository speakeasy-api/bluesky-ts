/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoRepoListRecordsRecord = {
  uri: string;
  cid: string;
  value?: any | undefined;
};

/** @internal */
export const ComAtprotoRepoListRecordsRecord$inboundSchema: z.ZodType<
  ComAtprotoRepoListRecordsRecord,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  cid: z.string(),
  value: z.any().optional(),
});

/** @internal */
export type ComAtprotoRepoListRecordsRecord$Outbound = {
  uri: string;
  cid: string;
  value?: any | undefined;
};

/** @internal */
export const ComAtprotoRepoListRecordsRecord$outboundSchema: z.ZodType<
  ComAtprotoRepoListRecordsRecord$Outbound,
  z.ZodTypeDef,
  ComAtprotoRepoListRecordsRecord
> = z.object({
  uri: z.string(),
  cid: z.string(),
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoRepoListRecordsRecord$ {
  /** @deprecated use `ComAtprotoRepoListRecordsRecord$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoRepoListRecordsRecord$inboundSchema;
  /** @deprecated use `ComAtprotoRepoListRecordsRecord$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoRepoListRecordsRecord$outboundSchema;
  /** @deprecated use `ComAtprotoRepoListRecordsRecord$Outbound` instead. */
  export type Outbound = ComAtprotoRepoListRecordsRecord$Outbound;
}

export function comAtprotoRepoListRecordsRecordToJSON(
  comAtprotoRepoListRecordsRecord: ComAtprotoRepoListRecordsRecord,
): string {
  return JSON.stringify(
    ComAtprotoRepoListRecordsRecord$outboundSchema.parse(
      comAtprotoRepoListRecordsRecord,
    ),
  );
}

export function comAtprotoRepoListRecordsRecordFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoRepoListRecordsRecord, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoRepoListRecordsRecord$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoRepoListRecordsRecord' from JSON`,
  );
}
