/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ComAtprotoLabelDefsLabel,
  ComAtprotoLabelDefsLabel$inboundSchema,
  ComAtprotoLabelDefsLabel$Outbound,
  ComAtprotoLabelDefsLabel$outboundSchema,
} from "./comatprotolabeldefslabel.js";
import {
  ToolsOzoneModerationDefsBlobView,
  ToolsOzoneModerationDefsBlobView$inboundSchema,
  ToolsOzoneModerationDefsBlobView$Outbound,
  ToolsOzoneModerationDefsBlobView$outboundSchema,
} from "./toolsozonemoderationdefsblobview.js";
import {
  ToolsOzoneModerationDefsModerationDetail,
  ToolsOzoneModerationDefsModerationDetail$inboundSchema,
  ToolsOzoneModerationDefsModerationDetail$Outbound,
  ToolsOzoneModerationDefsModerationDetail$outboundSchema,
} from "./toolsozonemoderationdefsmoderationdetail.js";
import {
  ToolsOzoneModerationDefsRepoView,
  ToolsOzoneModerationDefsRepoView$inboundSchema,
  ToolsOzoneModerationDefsRepoView$Outbound,
  ToolsOzoneModerationDefsRepoView$outboundSchema,
} from "./toolsozonemoderationdefsrepoview.js";

export type ToolsOzoneModerationDefsRecordViewDetail = {
  uri: string;
  cid: string;
  value?: any | undefined;
  blobs: Array<ToolsOzoneModerationDefsBlobView>;
  labels?: Array<ComAtprotoLabelDefsLabel> | undefined;
  indexedAt: Date;
  moderation: ToolsOzoneModerationDefsModerationDetail;
  repo: ToolsOzoneModerationDefsRepoView;
};

/** @internal */
export const ToolsOzoneModerationDefsRecordViewDetail$inboundSchema: z.ZodType<
  ToolsOzoneModerationDefsRecordViewDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  cid: z.string(),
  value: z.any().optional(),
  blobs: z.array(ToolsOzoneModerationDefsBlobView$inboundSchema),
  labels: z.array(ComAtprotoLabelDefsLabel$inboundSchema).optional(),
  indexedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  moderation: ToolsOzoneModerationDefsModerationDetail$inboundSchema,
  repo: ToolsOzoneModerationDefsRepoView$inboundSchema,
});

/** @internal */
export type ToolsOzoneModerationDefsRecordViewDetail$Outbound = {
  uri: string;
  cid: string;
  value?: any | undefined;
  blobs: Array<ToolsOzoneModerationDefsBlobView$Outbound>;
  labels?: Array<ComAtprotoLabelDefsLabel$Outbound> | undefined;
  indexedAt: string;
  moderation: ToolsOzoneModerationDefsModerationDetail$Outbound;
  repo: ToolsOzoneModerationDefsRepoView$Outbound;
};

/** @internal */
export const ToolsOzoneModerationDefsRecordViewDetail$outboundSchema: z.ZodType<
  ToolsOzoneModerationDefsRecordViewDetail$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationDefsRecordViewDetail
> = z.object({
  uri: z.string(),
  cid: z.string(),
  value: z.any().optional(),
  blobs: z.array(ToolsOzoneModerationDefsBlobView$outboundSchema),
  labels: z.array(ComAtprotoLabelDefsLabel$outboundSchema).optional(),
  indexedAt: z.date().transform(v => v.toISOString()),
  moderation: ToolsOzoneModerationDefsModerationDetail$outboundSchema,
  repo: ToolsOzoneModerationDefsRepoView$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsRecordViewDetail$ {
  /** @deprecated use `ToolsOzoneModerationDefsRecordViewDetail$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationDefsRecordViewDetail$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsRecordViewDetail$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationDefsRecordViewDetail$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsRecordViewDetail$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationDefsRecordViewDetail$Outbound;
}

export function toolsOzoneModerationDefsRecordViewDetailToJSON(
  toolsOzoneModerationDefsRecordViewDetail:
    ToolsOzoneModerationDefsRecordViewDetail,
): string {
  return JSON.stringify(
    ToolsOzoneModerationDefsRecordViewDetail$outboundSchema.parse(
      toolsOzoneModerationDefsRecordViewDetail,
    ),
  );
}

export function toolsOzoneModerationDefsRecordViewDetailFromJSON(
  jsonString: string,
): SafeParseResult<
  ToolsOzoneModerationDefsRecordViewDetail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationDefsRecordViewDetail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ToolsOzoneModerationDefsRecordViewDetail' from JSON`,
  );
}
