/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatBskyConvoDefsDeletedMessageView,
  ChatBskyConvoDefsDeletedMessageView$inboundSchema,
  ChatBskyConvoDefsDeletedMessageView$Outbound,
  ChatBskyConvoDefsDeletedMessageView$outboundSchema,
} from "./chatbskyconvodefsdeletedmessageview.js";
import {
  ChatBskyConvoDefsMessageView,
  ChatBskyConvoDefsMessageView$inboundSchema,
  ChatBskyConvoDefsMessageView$Outbound,
  ChatBskyConvoDefsMessageView$outboundSchema,
} from "./chatbskyconvodefsmessageview.js";

export type Message =
  | ChatBskyConvoDefsDeletedMessageView
  | ChatBskyConvoDefsMessageView;

export type ChatBskyConvoDefsLogCreateMessage = {
  rev: string;
  convoId: string;
  message: ChatBskyConvoDefsDeletedMessageView | ChatBskyConvoDefsMessageView;
};

/** @internal */
export const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> =
  z.union([
    ChatBskyConvoDefsDeletedMessageView$inboundSchema,
    ChatBskyConvoDefsMessageView$inboundSchema,
  ]);

/** @internal */
export type Message$Outbound =
  | ChatBskyConvoDefsDeletedMessageView$Outbound
  | ChatBskyConvoDefsMessageView$Outbound;

/** @internal */
export const Message$outboundSchema: z.ZodType<
  Message$Outbound,
  z.ZodTypeDef,
  Message
> = z.union([
  ChatBskyConvoDefsDeletedMessageView$outboundSchema,
  ChatBskyConvoDefsMessageView$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
  /** @deprecated use `Message$inboundSchema` instead. */
  export const inboundSchema = Message$inboundSchema;
  /** @deprecated use `Message$outboundSchema` instead. */
  export const outboundSchema = Message$outboundSchema;
  /** @deprecated use `Message$Outbound` instead. */
  export type Outbound = Message$Outbound;
}

export function messageToJSON(message: Message): string {
  return JSON.stringify(Message$outboundSchema.parse(message));
}

export function messageFromJSON(
  jsonString: string,
): SafeParseResult<Message, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message' from JSON`,
  );
}

/** @internal */
export const ChatBskyConvoDefsLogCreateMessage$inboundSchema: z.ZodType<
  ChatBskyConvoDefsLogCreateMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  rev: z.string(),
  convoId: z.string(),
  message: z.union([
    ChatBskyConvoDefsDeletedMessageView$inboundSchema,
    ChatBskyConvoDefsMessageView$inboundSchema,
  ]),
});

/** @internal */
export type ChatBskyConvoDefsLogCreateMessage$Outbound = {
  rev: string;
  convoId: string;
  message:
    | ChatBskyConvoDefsDeletedMessageView$Outbound
    | ChatBskyConvoDefsMessageView$Outbound;
};

/** @internal */
export const ChatBskyConvoDefsLogCreateMessage$outboundSchema: z.ZodType<
  ChatBskyConvoDefsLogCreateMessage$Outbound,
  z.ZodTypeDef,
  ChatBskyConvoDefsLogCreateMessage
> = z.object({
  rev: z.string(),
  convoId: z.string(),
  message: z.union([
    ChatBskyConvoDefsDeletedMessageView$outboundSchema,
    ChatBskyConvoDefsMessageView$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatBskyConvoDefsLogCreateMessage$ {
  /** @deprecated use `ChatBskyConvoDefsLogCreateMessage$inboundSchema` instead. */
  export const inboundSchema = ChatBskyConvoDefsLogCreateMessage$inboundSchema;
  /** @deprecated use `ChatBskyConvoDefsLogCreateMessage$outboundSchema` instead. */
  export const outboundSchema =
    ChatBskyConvoDefsLogCreateMessage$outboundSchema;
  /** @deprecated use `ChatBskyConvoDefsLogCreateMessage$Outbound` instead. */
  export type Outbound = ChatBskyConvoDefsLogCreateMessage$Outbound;
}

export function chatBskyConvoDefsLogCreateMessageToJSON(
  chatBskyConvoDefsLogCreateMessage: ChatBskyConvoDefsLogCreateMessage,
): string {
  return JSON.stringify(
    ChatBskyConvoDefsLogCreateMessage$outboundSchema.parse(
      chatBskyConvoDefsLogCreateMessage,
    ),
  );
}

export function chatBskyConvoDefsLogCreateMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatBskyConvoDefsLogCreateMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatBskyConvoDefsLogCreateMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatBskyConvoDefsLogCreateMessage' from JSON`,
  );
}
