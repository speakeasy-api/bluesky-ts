/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ToolsOzoneModerationDefsRecordHostingStatus = {
  Deleted: "deleted",
  Unknown: "unknown",
} as const;
export type ToolsOzoneModerationDefsRecordHostingStatus = ClosedEnum<
  typeof ToolsOzoneModerationDefsRecordHostingStatus
>;

export type ToolsOzoneModerationDefsRecordHosting = {
  status: ToolsOzoneModerationDefsRecordHostingStatus;
  updatedAt?: Date | undefined;
  createdAt?: Date | undefined;
  deletedAt?: Date | undefined;
};

/** @internal */
export const ToolsOzoneModerationDefsRecordHostingStatus$inboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneModerationDefsRecordHostingStatus> = z
    .nativeEnum(ToolsOzoneModerationDefsRecordHostingStatus);

/** @internal */
export const ToolsOzoneModerationDefsRecordHostingStatus$outboundSchema:
  z.ZodNativeEnum<typeof ToolsOzoneModerationDefsRecordHostingStatus> =
    ToolsOzoneModerationDefsRecordHostingStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsRecordHostingStatus$ {
  /** @deprecated use `ToolsOzoneModerationDefsRecordHostingStatus$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationDefsRecordHostingStatus$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsRecordHostingStatus$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationDefsRecordHostingStatus$outboundSchema;
}

/** @internal */
export const ToolsOzoneModerationDefsRecordHosting$inboundSchema: z.ZodType<
  ToolsOzoneModerationDefsRecordHosting,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: ToolsOzoneModerationDefsRecordHostingStatus$inboundSchema,
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ToolsOzoneModerationDefsRecordHosting$Outbound = {
  status: string;
  updatedAt?: string | undefined;
  createdAt?: string | undefined;
  deletedAt?: string | undefined;
};

/** @internal */
export const ToolsOzoneModerationDefsRecordHosting$outboundSchema: z.ZodType<
  ToolsOzoneModerationDefsRecordHosting$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationDefsRecordHosting
> = z.object({
  status: ToolsOzoneModerationDefsRecordHostingStatus$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsRecordHosting$ {
  /** @deprecated use `ToolsOzoneModerationDefsRecordHosting$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationDefsRecordHosting$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsRecordHosting$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationDefsRecordHosting$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsRecordHosting$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationDefsRecordHosting$Outbound;
}

export function toolsOzoneModerationDefsRecordHostingToJSON(
  toolsOzoneModerationDefsRecordHosting: ToolsOzoneModerationDefsRecordHosting,
): string {
  return JSON.stringify(
    ToolsOzoneModerationDefsRecordHosting$outboundSchema.parse(
      toolsOzoneModerationDefsRecordHosting,
    ),
  );
}

export function toolsOzoneModerationDefsRecordHostingFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationDefsRecordHosting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationDefsRecordHosting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationDefsRecordHosting' from JSON`,
  );
}
