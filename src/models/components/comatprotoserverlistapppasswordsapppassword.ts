/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ComAtprotoServerListAppPasswordsAppPassword = {
  name: string;
  createdAt: Date;
  privileged?: boolean | undefined;
};

/** @internal */
export const ComAtprotoServerListAppPasswordsAppPassword$inboundSchema:
  z.ZodType<
    ComAtprotoServerListAppPasswordsAppPassword,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    createdAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    privileged: z.boolean().optional(),
  });

/** @internal */
export type ComAtprotoServerListAppPasswordsAppPassword$Outbound = {
  name: string;
  createdAt: string;
  privileged?: boolean | undefined;
};

/** @internal */
export const ComAtprotoServerListAppPasswordsAppPassword$outboundSchema:
  z.ZodType<
    ComAtprotoServerListAppPasswordsAppPassword$Outbound,
    z.ZodTypeDef,
    ComAtprotoServerListAppPasswordsAppPassword
  > = z.object({
    name: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    privileged: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoServerListAppPasswordsAppPassword$ {
  /** @deprecated use `ComAtprotoServerListAppPasswordsAppPassword$inboundSchema` instead. */
  export const inboundSchema =
    ComAtprotoServerListAppPasswordsAppPassword$inboundSchema;
  /** @deprecated use `ComAtprotoServerListAppPasswordsAppPassword$outboundSchema` instead. */
  export const outboundSchema =
    ComAtprotoServerListAppPasswordsAppPassword$outboundSchema;
  /** @deprecated use `ComAtprotoServerListAppPasswordsAppPassword$Outbound` instead. */
  export type Outbound = ComAtprotoServerListAppPasswordsAppPassword$Outbound;
}

export function comAtprotoServerListAppPasswordsAppPasswordToJSON(
  comAtprotoServerListAppPasswordsAppPassword:
    ComAtprotoServerListAppPasswordsAppPassword,
): string {
  return JSON.stringify(
    ComAtprotoServerListAppPasswordsAppPassword$outboundSchema.parse(
      comAtprotoServerListAppPasswordsAppPassword,
    ),
  );
}

export function comAtprotoServerListAppPasswordsAppPasswordFromJSON(
  jsonString: string,
): SafeParseResult<
  ComAtprotoServerListAppPasswordsAppPassword,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ComAtprotoServerListAppPasswordsAppPassword$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ComAtprotoServerListAppPasswordsAppPassword' from JSON`,
  );
}
