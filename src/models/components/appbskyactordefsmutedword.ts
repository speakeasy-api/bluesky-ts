/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppBskyActorDefsMutedWordTarget,
  AppBskyActorDefsMutedWordTarget$inboundSchema,
  AppBskyActorDefsMutedWordTarget$outboundSchema,
} from "./appbskyactordefsmutedwordtarget.js";

/**
 * Groups of users to apply the muted word to. If undefined, applies to all users.
 */
export const ActorTarget = {
  All: "all",
  ExcludeFollowing: "exclude-following",
} as const;
/**
 * Groups of users to apply the muted word to. If undefined, applies to all users.
 */
export type ActorTarget = ClosedEnum<typeof ActorTarget>;

/**
 * A word that the account owner has muted.
 */
export type AppBskyActorDefsMutedWord = {
  id?: string | undefined;
  /**
   * The muted word itself.
   */
  value: string;
  targets: Array<AppBskyActorDefsMutedWordTarget>;
  /**
   * Groups of users to apply the muted word to. If undefined, applies to all users.
   */
  actorTarget?: ActorTarget | undefined;
  /**
   * The date and time at which the muted word will expire and no longer be applied.
   */
  expiresAt?: Date | undefined;
};

/** @internal */
export const ActorTarget$inboundSchema: z.ZodNativeEnum<typeof ActorTarget> = z
  .nativeEnum(ActorTarget);

/** @internal */
export const ActorTarget$outboundSchema: z.ZodNativeEnum<typeof ActorTarget> =
  ActorTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActorTarget$ {
  /** @deprecated use `ActorTarget$inboundSchema` instead. */
  export const inboundSchema = ActorTarget$inboundSchema;
  /** @deprecated use `ActorTarget$outboundSchema` instead. */
  export const outboundSchema = ActorTarget$outboundSchema;
}

/** @internal */
export const AppBskyActorDefsMutedWord$inboundSchema: z.ZodType<
  AppBskyActorDefsMutedWord,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  value: z.string(),
  targets: z.array(AppBskyActorDefsMutedWordTarget$inboundSchema),
  actorTarget: ActorTarget$inboundSchema.default("all"),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type AppBskyActorDefsMutedWord$Outbound = {
  id?: string | undefined;
  value: string;
  targets: Array<string>;
  actorTarget: string;
  expiresAt?: string | undefined;
};

/** @internal */
export const AppBskyActorDefsMutedWord$outboundSchema: z.ZodType<
  AppBskyActorDefsMutedWord$Outbound,
  z.ZodTypeDef,
  AppBskyActorDefsMutedWord
> = z.object({
  id: z.string().optional(),
  value: z.string(),
  targets: z.array(AppBskyActorDefsMutedWordTarget$outboundSchema),
  actorTarget: ActorTarget$outboundSchema.default("all"),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyActorDefsMutedWord$ {
  /** @deprecated use `AppBskyActorDefsMutedWord$inboundSchema` instead. */
  export const inboundSchema = AppBskyActorDefsMutedWord$inboundSchema;
  /** @deprecated use `AppBskyActorDefsMutedWord$outboundSchema` instead. */
  export const outboundSchema = AppBskyActorDefsMutedWord$outboundSchema;
  /** @deprecated use `AppBskyActorDefsMutedWord$Outbound` instead. */
  export type Outbound = AppBskyActorDefsMutedWord$Outbound;
}

export function appBskyActorDefsMutedWordToJSON(
  appBskyActorDefsMutedWord: AppBskyActorDefsMutedWord,
): string {
  return JSON.stringify(
    AppBskyActorDefsMutedWord$outboundSchema.parse(appBskyActorDefsMutedWord),
  );
}

export function appBskyActorDefsMutedWordFromJSON(
  jsonString: string,
): SafeParseResult<AppBskyActorDefsMutedWord, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppBskyActorDefsMutedWord$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppBskyActorDefsMutedWord' from JSON`,
  );
}
