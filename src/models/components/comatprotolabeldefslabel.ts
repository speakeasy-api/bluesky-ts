/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Metadata tag on an atproto resource (eg, repo or record).
 */
export type ComAtprotoLabelDefsLabel = {
  ver?: number | undefined;
  /**
   * DID of the actor who created this label.
   */
  src: string;
  /**
   * AT URI of the record, repository (account), or other resource that this label applies to.
   */
  uri: string;
  /**
   * Optionally, CID specifying the specific version of 'uri' resource this label applies to.
   */
  cid?: string | undefined;
  /**
   * The short string name of the value or type of this label.
   */
  val: string;
  /**
   * If true, this is a negation label, overwriting a previous label.
   */
  neg?: boolean | undefined;
  /**
   * Timestamp when this label was created.
   */
  cts: Date;
  /**
   * Timestamp at which this label expires (no longer applies).
   */
  exp?: Date | undefined;
  /**
   * Signature of dag-cbor encoded label.
   */
  sig?: string | undefined;
};

/** @internal */
export const ComAtprotoLabelDefsLabel$inboundSchema: z.ZodType<
  ComAtprotoLabelDefsLabel,
  z.ZodTypeDef,
  unknown
> = z.object({
  ver: z.number().int().optional(),
  src: z.string(),
  uri: z.string(),
  cid: z.string().optional(),
  val: z.string(),
  neg: z.boolean().optional(),
  cts: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  exp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  sig: z.string().optional(),
});

/** @internal */
export type ComAtprotoLabelDefsLabel$Outbound = {
  ver?: number | undefined;
  src: string;
  uri: string;
  cid?: string | undefined;
  val: string;
  neg?: boolean | undefined;
  cts: string;
  exp?: string | undefined;
  sig?: string | undefined;
};

/** @internal */
export const ComAtprotoLabelDefsLabel$outboundSchema: z.ZodType<
  ComAtprotoLabelDefsLabel$Outbound,
  z.ZodTypeDef,
  ComAtprotoLabelDefsLabel
> = z.object({
  ver: z.number().int().optional(),
  src: z.string(),
  uri: z.string(),
  cid: z.string().optional(),
  val: z.string(),
  neg: z.boolean().optional(),
  cts: z.date().transform(v => v.toISOString()),
  exp: z.date().transform(v => v.toISOString()).optional(),
  sig: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComAtprotoLabelDefsLabel$ {
  /** @deprecated use `ComAtprotoLabelDefsLabel$inboundSchema` instead. */
  export const inboundSchema = ComAtprotoLabelDefsLabel$inboundSchema;
  /** @deprecated use `ComAtprotoLabelDefsLabel$outboundSchema` instead. */
  export const outboundSchema = ComAtprotoLabelDefsLabel$outboundSchema;
  /** @deprecated use `ComAtprotoLabelDefsLabel$Outbound` instead. */
  export type Outbound = ComAtprotoLabelDefsLabel$Outbound;
}

export function comAtprotoLabelDefsLabelToJSON(
  comAtprotoLabelDefsLabel: ComAtprotoLabelDefsLabel,
): string {
  return JSON.stringify(
    ComAtprotoLabelDefsLabel$outboundSchema.parse(comAtprotoLabelDefsLabel),
  );
}

export function comAtprotoLabelDefsLabelFromJSON(
  jsonString: string,
): SafeParseResult<ComAtprotoLabelDefsLabel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComAtprotoLabelDefsLabel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComAtprotoLabelDefsLabel' from JSON`,
  );
}
