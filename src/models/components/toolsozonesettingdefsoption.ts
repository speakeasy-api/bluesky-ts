/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ManagerRole = {
  ToolsOzoneTeamDefsNumberRoleModerator: "tools.ozone.team.defs#roleModerator",
  ToolsOzoneTeamDefsNumberRoleTriage: "tools.ozone.team.defs#roleTriage",
  ToolsOzoneTeamDefsNumberRoleAdmin: "tools.ozone.team.defs#roleAdmin",
} as const;
export type ManagerRole = ClosedEnum<typeof ManagerRole>;

export const Scope = {
  Instance: "instance",
  Personal: "personal",
} as const;
export type Scope = ClosedEnum<typeof Scope>;

export type ToolsOzoneSettingDefsOption = {
  key: string;
  did: string;
  value?: any | undefined;
  description?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  managerRole?: ManagerRole | undefined;
  scope: Scope;
  createdBy: string;
  lastUpdatedBy: string;
};

/** @internal */
export const ManagerRole$inboundSchema: z.ZodNativeEnum<typeof ManagerRole> = z
  .nativeEnum(ManagerRole);

/** @internal */
export const ManagerRole$outboundSchema: z.ZodNativeEnum<typeof ManagerRole> =
  ManagerRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ManagerRole$ {
  /** @deprecated use `ManagerRole$inboundSchema` instead. */
  export const inboundSchema = ManagerRole$inboundSchema;
  /** @deprecated use `ManagerRole$outboundSchema` instead. */
  export const outboundSchema = ManagerRole$outboundSchema;
}

/** @internal */
export const Scope$inboundSchema: z.ZodNativeEnum<typeof Scope> = z.nativeEnum(
  Scope,
);

/** @internal */
export const Scope$outboundSchema: z.ZodNativeEnum<typeof Scope> =
  Scope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scope$ {
  /** @deprecated use `Scope$inboundSchema` instead. */
  export const inboundSchema = Scope$inboundSchema;
  /** @deprecated use `Scope$outboundSchema` instead. */
  export const outboundSchema = Scope$outboundSchema;
}

/** @internal */
export const ToolsOzoneSettingDefsOption$inboundSchema: z.ZodType<
  ToolsOzoneSettingDefsOption,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  did: z.string(),
  value: z.any().optional(),
  description: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  managerRole: ManagerRole$inboundSchema.optional(),
  scope: Scope$inboundSchema,
  createdBy: z.string(),
  lastUpdatedBy: z.string(),
});

/** @internal */
export type ToolsOzoneSettingDefsOption$Outbound = {
  key: string;
  did: string;
  value?: any | undefined;
  description?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  managerRole?: string | undefined;
  scope: string;
  createdBy: string;
  lastUpdatedBy: string;
};

/** @internal */
export const ToolsOzoneSettingDefsOption$outboundSchema: z.ZodType<
  ToolsOzoneSettingDefsOption$Outbound,
  z.ZodTypeDef,
  ToolsOzoneSettingDefsOption
> = z.object({
  key: z.string(),
  did: z.string(),
  value: z.any().optional(),
  description: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  managerRole: ManagerRole$outboundSchema.optional(),
  scope: Scope$outboundSchema,
  createdBy: z.string(),
  lastUpdatedBy: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneSettingDefsOption$ {
  /** @deprecated use `ToolsOzoneSettingDefsOption$inboundSchema` instead. */
  export const inboundSchema = ToolsOzoneSettingDefsOption$inboundSchema;
  /** @deprecated use `ToolsOzoneSettingDefsOption$outboundSchema` instead. */
  export const outboundSchema = ToolsOzoneSettingDefsOption$outboundSchema;
  /** @deprecated use `ToolsOzoneSettingDefsOption$Outbound` instead. */
  export type Outbound = ToolsOzoneSettingDefsOption$Outbound;
}

export function toolsOzoneSettingDefsOptionToJSON(
  toolsOzoneSettingDefsOption: ToolsOzoneSettingDefsOption,
): string {
  return JSON.stringify(
    ToolsOzoneSettingDefsOption$outboundSchema.parse(
      toolsOzoneSettingDefsOption,
    ),
  );
}

export function toolsOzoneSettingDefsOptionFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneSettingDefsOption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsOzoneSettingDefsOption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneSettingDefsOption' from JSON`,
  );
}
