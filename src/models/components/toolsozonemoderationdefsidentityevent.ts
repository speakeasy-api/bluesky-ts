/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.
 */
export type ToolsOzoneModerationDefsIdentityEvent = {
  comment?: string | undefined;
  handle?: string | undefined;
  pdsHost?: string | undefined;
  tombstone?: boolean | undefined;
  timestamp: Date;
};

/** @internal */
export const ToolsOzoneModerationDefsIdentityEvent$inboundSchema: z.ZodType<
  ToolsOzoneModerationDefsIdentityEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.string().optional(),
  handle: z.string().optional(),
  pdsHost: z.string().optional(),
  tombstone: z.boolean().optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type ToolsOzoneModerationDefsIdentityEvent$Outbound = {
  comment?: string | undefined;
  handle?: string | undefined;
  pdsHost?: string | undefined;
  tombstone?: boolean | undefined;
  timestamp: string;
};

/** @internal */
export const ToolsOzoneModerationDefsIdentityEvent$outboundSchema: z.ZodType<
  ToolsOzoneModerationDefsIdentityEvent$Outbound,
  z.ZodTypeDef,
  ToolsOzoneModerationDefsIdentityEvent
> = z.object({
  comment: z.string().optional(),
  handle: z.string().optional(),
  pdsHost: z.string().optional(),
  tombstone: z.boolean().optional(),
  timestamp: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsOzoneModerationDefsIdentityEvent$ {
  /** @deprecated use `ToolsOzoneModerationDefsIdentityEvent$inboundSchema` instead. */
  export const inboundSchema =
    ToolsOzoneModerationDefsIdentityEvent$inboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsIdentityEvent$outboundSchema` instead. */
  export const outboundSchema =
    ToolsOzoneModerationDefsIdentityEvent$outboundSchema;
  /** @deprecated use `ToolsOzoneModerationDefsIdentityEvent$Outbound` instead. */
  export type Outbound = ToolsOzoneModerationDefsIdentityEvent$Outbound;
}

export function toolsOzoneModerationDefsIdentityEventToJSON(
  toolsOzoneModerationDefsIdentityEvent: ToolsOzoneModerationDefsIdentityEvent,
): string {
  return JSON.stringify(
    ToolsOzoneModerationDefsIdentityEvent$outboundSchema.parse(
      toolsOzoneModerationDefsIdentityEvent,
    ),
  );
}

export function toolsOzoneModerationDefsIdentityEventFromJSON(
  jsonString: string,
): SafeParseResult<ToolsOzoneModerationDefsIdentityEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ToolsOzoneModerationDefsIdentityEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsOzoneModerationDefsIdentityEvent' from JSON`,
  );
}
