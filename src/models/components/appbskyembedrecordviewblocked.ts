/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppBskyFeedDefsBlockedAuthor,
  AppBskyFeedDefsBlockedAuthor$inboundSchema,
  AppBskyFeedDefsBlockedAuthor$Outbound,
  AppBskyFeedDefsBlockedAuthor$outboundSchema,
} from "./appbskyfeeddefsblockedauthor.js";

export type AppBskyEmbedRecordViewBlocked = {
  uri: string;
  blocked?: boolean | undefined;
  author: AppBskyFeedDefsBlockedAuthor;
};

/** @internal */
export const AppBskyEmbedRecordViewBlocked$inboundSchema: z.ZodType<
  AppBskyEmbedRecordViewBlocked,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  blocked: z.boolean().default(true),
  author: AppBskyFeedDefsBlockedAuthor$inboundSchema,
});

/** @internal */
export type AppBskyEmbedRecordViewBlocked$Outbound = {
  uri: string;
  blocked: boolean;
  author: AppBskyFeedDefsBlockedAuthor$Outbound;
};

/** @internal */
export const AppBskyEmbedRecordViewBlocked$outboundSchema: z.ZodType<
  AppBskyEmbedRecordViewBlocked$Outbound,
  z.ZodTypeDef,
  AppBskyEmbedRecordViewBlocked
> = z.object({
  uri: z.string(),
  blocked: z.boolean().default(true),
  author: AppBskyFeedDefsBlockedAuthor$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyEmbedRecordViewBlocked$ {
  /** @deprecated use `AppBskyEmbedRecordViewBlocked$inboundSchema` instead. */
  export const inboundSchema = AppBskyEmbedRecordViewBlocked$inboundSchema;
  /** @deprecated use `AppBskyEmbedRecordViewBlocked$outboundSchema` instead. */
  export const outboundSchema = AppBskyEmbedRecordViewBlocked$outboundSchema;
  /** @deprecated use `AppBskyEmbedRecordViewBlocked$Outbound` instead. */
  export type Outbound = AppBskyEmbedRecordViewBlocked$Outbound;
}

export function appBskyEmbedRecordViewBlockedToJSON(
  appBskyEmbedRecordViewBlocked: AppBskyEmbedRecordViewBlocked,
): string {
  return JSON.stringify(
    AppBskyEmbedRecordViewBlocked$outboundSchema.parse(
      appBskyEmbedRecordViewBlocked,
    ),
  );
}

export function appBskyEmbedRecordViewBlockedFromJSON(
  jsonString: string,
): SafeParseResult<AppBskyEmbedRecordViewBlocked, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppBskyEmbedRecordViewBlocked$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppBskyEmbedRecordViewBlocked' from JSON`,
  );
}
