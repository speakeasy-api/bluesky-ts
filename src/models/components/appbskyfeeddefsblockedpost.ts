/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AppBskyFeedDefsBlockedAuthor,
  AppBskyFeedDefsBlockedAuthor$inboundSchema,
  AppBskyFeedDefsBlockedAuthor$Outbound,
  AppBskyFeedDefsBlockedAuthor$outboundSchema,
} from "./appbskyfeeddefsblockedauthor.js";

export type AppBskyFeedDefsBlockedPost = {
  uri: string;
  blocked?: boolean | undefined;
  author: AppBskyFeedDefsBlockedAuthor;
};

/** @internal */
export const AppBskyFeedDefsBlockedPost$inboundSchema: z.ZodType<
  AppBskyFeedDefsBlockedPost,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  blocked: z.boolean().default(true),
  author: AppBskyFeedDefsBlockedAuthor$inboundSchema,
});

/** @internal */
export type AppBskyFeedDefsBlockedPost$Outbound = {
  uri: string;
  blocked: boolean;
  author: AppBskyFeedDefsBlockedAuthor$Outbound;
};

/** @internal */
export const AppBskyFeedDefsBlockedPost$outboundSchema: z.ZodType<
  AppBskyFeedDefsBlockedPost$Outbound,
  z.ZodTypeDef,
  AppBskyFeedDefsBlockedPost
> = z.object({
  uri: z.string(),
  blocked: z.boolean().default(true),
  author: AppBskyFeedDefsBlockedAuthor$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppBskyFeedDefsBlockedPost$ {
  /** @deprecated use `AppBskyFeedDefsBlockedPost$inboundSchema` instead. */
  export const inboundSchema = AppBskyFeedDefsBlockedPost$inboundSchema;
  /** @deprecated use `AppBskyFeedDefsBlockedPost$outboundSchema` instead. */
  export const outboundSchema = AppBskyFeedDefsBlockedPost$outboundSchema;
  /** @deprecated use `AppBskyFeedDefsBlockedPost$Outbound` instead. */
  export type Outbound = AppBskyFeedDefsBlockedPost$Outbound;
}

export function appBskyFeedDefsBlockedPostToJSON(
  appBskyFeedDefsBlockedPost: AppBskyFeedDefsBlockedPost,
): string {
  return JSON.stringify(
    AppBskyFeedDefsBlockedPost$outboundSchema.parse(appBskyFeedDefsBlockedPost),
  );
}

export function appBskyFeedDefsBlockedPostFromJSON(
  jsonString: string,
): SafeParseResult<AppBskyFeedDefsBlockedPost, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppBskyFeedDefsBlockedPost$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppBskyFeedDefsBlockedPost' from JSON`,
  );
}
